// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: highway.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HighwayBaseHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version      uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Uin          string `protobuf:"bytes,2,opt,name=uin,proto3" json:"uin,omitempty"`
	Command      string `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`
	Seq          uint32 `protobuf:"varint,4,opt,name=seq,proto3" json:"seq,omitempty"`
	RetryTimes   uint32 `protobuf:"varint,5,opt,name=retry_times,json=retryTimes,proto3" json:"retry_times,omitempty"`
	AppId        uint32 `protobuf:"varint,6,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	DataFlag     uint32 `protobuf:"varint,7,opt,name=data_flag,json=dataFlag,proto3" json:"data_flag,omitempty"`
	CommandId    uint32 `protobuf:"varint,8,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	BuildVersion string `protobuf:"bytes,9,opt,name=build_version,json=buildVersion,proto3" json:"build_version,omitempty"`
	LocaleId     uint32 `protobuf:"varint,10,opt,name=locale_id,json=localeId,proto3" json:"locale_id,omitempty"`
	EnvId        uint32 `protobuf:"varint,11,opt,name=env_id,json=envId,proto3" json:"env_id,omitempty"`
}

func (x *HighwayBaseHead) Reset() {
	*x = HighwayBaseHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_highway_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HighwayBaseHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HighwayBaseHead) ProtoMessage() {}

func (x *HighwayBaseHead) ProtoReflect() protoreflect.Message {
	mi := &file_highway_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HighwayBaseHead.ProtoReflect.Descriptor instead.
func (*HighwayBaseHead) Descriptor() ([]byte, []int) {
	return file_highway_proto_rawDescGZIP(), []int{0}
}

func (x *HighwayBaseHead) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *HighwayBaseHead) GetUin() string {
	if x != nil {
		return x.Uin
	}
	return ""
}

func (x *HighwayBaseHead) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *HighwayBaseHead) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *HighwayBaseHead) GetRetryTimes() uint32 {
	if x != nil {
		return x.RetryTimes
	}
	return 0
}

func (x *HighwayBaseHead) GetAppId() uint32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *HighwayBaseHead) GetDataFlag() uint32 {
	if x != nil {
		return x.DataFlag
	}
	return 0
}

func (x *HighwayBaseHead) GetCommandId() uint32 {
	if x != nil {
		return x.CommandId
	}
	return 0
}

func (x *HighwayBaseHead) GetBuildVersion() string {
	if x != nil {
		return x.BuildVersion
	}
	return ""
}

func (x *HighwayBaseHead) GetLocaleId() uint32 {
	if x != nil {
		return x.LocaleId
	}
	return 0
}

func (x *HighwayBaseHead) GetEnvId() uint32 {
	if x != nil {
		return x.EnvId
	}
	return 0
}

type HighwayLoginSigHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HighwayLoginSigHead) Reset() {
	*x = HighwayLoginSigHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_highway_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HighwayLoginSigHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HighwayLoginSigHead) ProtoMessage() {}

func (x *HighwayLoginSigHead) ProtoReflect() protoreflect.Message {
	mi := &file_highway_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HighwayLoginSigHead.ProtoReflect.Descriptor instead.
func (*HighwayLoginSigHead) Descriptor() ([]byte, []int) {
	return file_highway_proto_rawDescGZIP(), []int{1}
}

type HighwayRequestHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseHead     *HighwayBaseHead     `protobuf:"bytes,1,opt,name=base_head,json=baseHead,proto3" json:"base_head,omitempty"`
	SegmentHead  *HighwaySegmentHead  `protobuf:"bytes,2,opt,name=segment_head,json=segmentHead,proto3" json:"segment_head,omitempty"`
	ExtendInfo   []byte               `protobuf:"bytes,3,opt,name=extend_info,json=extendInfo,proto3" json:"extend_info,omitempty"`
	Timestamp    uint64               `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	LoginSigHead *HighwayLoginSigHead `protobuf:"bytes,5,opt,name=login_sig_head,json=loginSigHead,proto3" json:"login_sig_head,omitempty"`
}

func (x *HighwayRequestHead) Reset() {
	*x = HighwayRequestHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_highway_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HighwayRequestHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HighwayRequestHead) ProtoMessage() {}

func (x *HighwayRequestHead) ProtoReflect() protoreflect.Message {
	mi := &file_highway_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HighwayRequestHead.ProtoReflect.Descriptor instead.
func (*HighwayRequestHead) Descriptor() ([]byte, []int) {
	return file_highway_proto_rawDescGZIP(), []int{2}
}

func (x *HighwayRequestHead) GetBaseHead() *HighwayBaseHead {
	if x != nil {
		return x.BaseHead
	}
	return nil
}

func (x *HighwayRequestHead) GetSegmentHead() *HighwaySegmentHead {
	if x != nil {
		return x.SegmentHead
	}
	return nil
}

func (x *HighwayRequestHead) GetExtendInfo() []byte {
	if x != nil {
		return x.ExtendInfo
	}
	return nil
}

func (x *HighwayRequestHead) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *HighwayRequestHead) GetLoginSigHead() *HighwayLoginSigHead {
	if x != nil {
		return x.LoginSigHead
	}
	return nil
}

type HighwayResponseHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseHead    *HighwayBaseHead    `protobuf:"bytes,1,opt,name=base_head,json=baseHead,proto3" json:"base_head,omitempty"`
	SegmentHead *HighwaySegmentHead `protobuf:"bytes,2,opt,name=segment_head,json=segmentHead,proto3" json:"segment_head,omitempty"`
	ErrorCode   uint32              `protobuf:"varint,3,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	AllowRetry  uint32              `protobuf:"varint,4,opt,name=allow_retry,json=allowRetry,proto3" json:"allow_retry,omitempty"`
	CacheCost   uint32              `protobuf:"varint,5,opt,name=cache_cost,json=cacheCost,proto3" json:"cache_cost,omitempty"`
	HtCost      uint32              `protobuf:"varint,6,opt,name=ht_cost,json=htCost,proto3" json:"ht_cost,omitempty"`
	ExtendInfo  []byte              `protobuf:"bytes,7,opt,name=extend_info,json=extendInfo,proto3" json:"extend_info,omitempty"`
	Timestamp   uint64              `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Range       uint64              `protobuf:"varint,9,opt,name=range,proto3" json:"range,omitempty"`
	IsReset     uint32              `protobuf:"varint,10,opt,name=is_reset,json=isReset,proto3" json:"is_reset,omitempty"`
}

func (x *HighwayResponseHead) Reset() {
	*x = HighwayResponseHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_highway_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HighwayResponseHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HighwayResponseHead) ProtoMessage() {}

func (x *HighwayResponseHead) ProtoReflect() protoreflect.Message {
	mi := &file_highway_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HighwayResponseHead.ProtoReflect.Descriptor instead.
func (*HighwayResponseHead) Descriptor() ([]byte, []int) {
	return file_highway_proto_rawDescGZIP(), []int{3}
}

func (x *HighwayResponseHead) GetBaseHead() *HighwayBaseHead {
	if x != nil {
		return x.BaseHead
	}
	return nil
}

func (x *HighwayResponseHead) GetSegmentHead() *HighwaySegmentHead {
	if x != nil {
		return x.SegmentHead
	}
	return nil
}

func (x *HighwayResponseHead) GetErrorCode() uint32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *HighwayResponseHead) GetAllowRetry() uint32 {
	if x != nil {
		return x.AllowRetry
	}
	return 0
}

func (x *HighwayResponseHead) GetCacheCost() uint32 {
	if x != nil {
		return x.CacheCost
	}
	return 0
}

func (x *HighwayResponseHead) GetHtCost() uint32 {
	if x != nil {
		return x.HtCost
	}
	return 0
}

func (x *HighwayResponseHead) GetExtendInfo() []byte {
	if x != nil {
		return x.ExtendInfo
	}
	return nil
}

func (x *HighwayResponseHead) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *HighwayResponseHead) GetRange() uint64 {
	if x != nil {
		return x.Range
	}
	return 0
}

func (x *HighwayResponseHead) GetIsReset() uint32 {
	if x != nil {
		return x.IsReset
	}
	return 0
}

type HighwaySegmentHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId     uint32 `protobuf:"varint,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	FileSize      uint64 `protobuf:"varint,2,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	DataOffset    uint64 `protobuf:"varint,3,opt,name=data_offset,json=dataOffset,proto3" json:"data_offset,omitempty"`
	DataLength    uint32 `protobuf:"varint,4,opt,name=data_length,json=dataLength,proto3" json:"data_length,omitempty"`
	ReturnCode    uint32 `protobuf:"varint,5,opt,name=return_code,json=returnCode,proto3" json:"return_code,omitempty"`
	ServiceTicket []byte `protobuf:"bytes,6,opt,name=service_ticket,json=serviceTicket,proto3" json:"service_ticket,omitempty"`
	Flag          uint32 `protobuf:"varint,7,opt,name=flag,proto3" json:"flag,omitempty"`
	Md5           []byte `protobuf:"bytes,8,opt,name=md5,proto3" json:"md5,omitempty"`
	FileMd5       []byte `protobuf:"bytes,9,opt,name=file_md5,json=fileMd5,proto3" json:"file_md5,omitempty"`
	CacheAddress  uint32 `protobuf:"varint,10,opt,name=cache_address,json=cacheAddress,proto3" json:"cache_address,omitempty"`
	QueryTimes    uint32 `protobuf:"varint,11,opt,name=query_times,json=queryTimes,proto3" json:"query_times,omitempty"`
	UpdateCacheIp uint32 `protobuf:"varint,12,opt,name=update_cache_ip,json=updateCacheIp,proto3" json:"update_cache_ip,omitempty"`
	CachePort     uint32 `protobuf:"varint,13,opt,name=cache_port,json=cachePort,proto3" json:"cache_port,omitempty"`
}

func (x *HighwaySegmentHead) Reset() {
	*x = HighwaySegmentHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_highway_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HighwaySegmentHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HighwaySegmentHead) ProtoMessage() {}

func (x *HighwaySegmentHead) ProtoReflect() protoreflect.Message {
	mi := &file_highway_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HighwaySegmentHead.ProtoReflect.Descriptor instead.
func (*HighwaySegmentHead) Descriptor() ([]byte, []int) {
	return file_highway_proto_rawDescGZIP(), []int{4}
}

func (x *HighwaySegmentHead) GetServiceId() uint32 {
	if x != nil {
		return x.ServiceId
	}
	return 0
}

func (x *HighwaySegmentHead) GetFileSize() uint64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *HighwaySegmentHead) GetDataOffset() uint64 {
	if x != nil {
		return x.DataOffset
	}
	return 0
}

func (x *HighwaySegmentHead) GetDataLength() uint32 {
	if x != nil {
		return x.DataLength
	}
	return 0
}

func (x *HighwaySegmentHead) GetReturnCode() uint32 {
	if x != nil {
		return x.ReturnCode
	}
	return 0
}

func (x *HighwaySegmentHead) GetServiceTicket() []byte {
	if x != nil {
		return x.ServiceTicket
	}
	return nil
}

func (x *HighwaySegmentHead) GetFlag() uint32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *HighwaySegmentHead) GetMd5() []byte {
	if x != nil {
		return x.Md5
	}
	return nil
}

func (x *HighwaySegmentHead) GetFileMd5() []byte {
	if x != nil {
		return x.FileMd5
	}
	return nil
}

func (x *HighwaySegmentHead) GetCacheAddress() uint32 {
	if x != nil {
		return x.CacheAddress
	}
	return 0
}

func (x *HighwaySegmentHead) GetQueryTimes() uint32 {
	if x != nil {
		return x.QueryTimes
	}
	return 0
}

func (x *HighwaySegmentHead) GetUpdateCacheIp() uint32 {
	if x != nil {
		return x.UpdateCacheIp
	}
	return 0
}

func (x *HighwaySegmentHead) GetCachePort() uint32 {
	if x != nil {
		return x.CachePort
	}
	return 0
}

var File_highway_proto protoreflect.FileDescriptor

var file_highway_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x68, 0x69, 0x67, 0x68, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xb6, 0x02, 0x0a, 0x0f, 0x48, 0x69, 0x67, 0x68, 0x77, 0x61, 0x79, 0x42, 0x61, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x76, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x48, 0x69, 0x67, 0x68,
	0x77, 0x61, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x69, 0x67, 0x48, 0x65, 0x61, 0x64, 0x22,
	0xf6, 0x01, 0x0a, 0x12, 0x48, 0x69, 0x67, 0x68, 0x77, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x12, 0x2d, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x48, 0x69, 0x67, 0x68,
	0x77, 0x61, 0x79, 0x42, 0x61, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x08, 0x62, 0x61, 0x73,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x36, 0x0a, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x48, 0x69,
	0x67, 0x68, 0x77, 0x61, 0x79, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x52, 0x0b, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3a, 0x0a, 0x0e,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x77, 0x61, 0x79, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x53, 0x69, 0x67, 0x48, 0x65, 0x61, 0x64, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x53, 0x69, 0x67, 0x48, 0x65, 0x61, 0x64, 0x22, 0xe4, 0x02, 0x0a, 0x13, 0x48, 0x69, 0x67,
	0x68, 0x77, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x12, 0x2d, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x77, 0x61, 0x79, 0x42, 0x61, 0x73,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12,
	0x36, 0x0a, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x77, 0x61, 0x79, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x64, 0x52, 0x0b, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x73, 0x52, 0x65, 0x73, 0x65, 0x74, 0x22,
	0xa8, 0x03, 0x0a, 0x12, 0x48, 0x69, 0x67, 0x68, 0x77, 0x61, 0x79, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x48, 0x65, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6d,
	0x64, 0x35, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x64, 0x35, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f,
	0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_highway_proto_rawDescOnce sync.Once
	file_highway_proto_rawDescData = file_highway_proto_rawDesc
)

func file_highway_proto_rawDescGZIP() []byte {
	file_highway_proto_rawDescOnce.Do(func() {
		file_highway_proto_rawDescData = protoimpl.X.CompressGZIP(file_highway_proto_rawDescData)
	})
	return file_highway_proto_rawDescData
}

var file_highway_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_highway_proto_goTypes = []interface{}{
	(*HighwayBaseHead)(nil),     // 0: HighwayBaseHead
	(*HighwayLoginSigHead)(nil), // 1: HighwayLoginSigHead
	(*HighwayRequestHead)(nil),  // 2: HighwayRequestHead
	(*HighwayResponseHead)(nil), // 3: HighwayResponseHead
	(*HighwaySegmentHead)(nil),  // 4: HighwaySegmentHead
}
var file_highway_proto_depIdxs = []int32{
	0, // 0: HighwayRequestHead.base_head:type_name -> HighwayBaseHead
	4, // 1: HighwayRequestHead.segment_head:type_name -> HighwaySegmentHead
	1, // 2: HighwayRequestHead.login_sig_head:type_name -> HighwayLoginSigHead
	0, // 3: HighwayResponseHead.base_head:type_name -> HighwayBaseHead
	4, // 4: HighwayResponseHead.segment_head:type_name -> HighwaySegmentHead
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_highway_proto_init() }
func file_highway_proto_init() {
	if File_highway_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_highway_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HighwayBaseHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_highway_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HighwayLoginSigHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_highway_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HighwayRequestHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_highway_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HighwayResponseHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_highway_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HighwaySegmentHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_highway_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_highway_proto_goTypes,
		DependencyIndexes: file_highway_proto_depIdxs,
		MessageInfos:      file_highway_proto_msgTypes,
	}.Build()
	File_highway_proto = out.File
	file_highway_proto_rawDesc = nil
	file_highway_proto_goTypes = nil
	file_highway_proto_depIdxs = nil
}
