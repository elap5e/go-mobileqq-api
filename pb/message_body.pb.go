// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: message_body.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AnonymousGroupMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags         uint32 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	AnonymousId   []byte `protobuf:"bytes,2,opt,name=anonymous_id,json=anonymousId,proto3" json:"anonymous_id,omitempty"`
	AnonymousNick []byte `protobuf:"bytes,3,opt,name=anonymous_nick,json=anonymousNick,proto3" json:"anonymous_nick,omitempty"`
	HeadPortrait  uint32 `protobuf:"varint,4,opt,name=head_portrait,json=headPortrait,proto3" json:"head_portrait,omitempty"`
	ExpireTime    uint32 `protobuf:"varint,5,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	BubbleId      uint32 `protobuf:"varint,6,opt,name=bubble_id,json=bubbleId,proto3" json:"bubble_id,omitempty"`
	RankColor     []byte `protobuf:"bytes,7,opt,name=rank_color,json=rankColor,proto3" json:"rank_color,omitempty"`
}

func (x *AnonymousGroupMessage) Reset() {
	*x = AnonymousGroupMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnonymousGroupMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnonymousGroupMessage) ProtoMessage() {}

func (x *AnonymousGroupMessage) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnonymousGroupMessage.ProtoReflect.Descriptor instead.
func (*AnonymousGroupMessage) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{0}
}

func (x *AnonymousGroupMessage) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *AnonymousGroupMessage) GetAnonymousId() []byte {
	if x != nil {
		return x.AnonymousId
	}
	return nil
}

func (x *AnonymousGroupMessage) GetAnonymousNick() []byte {
	if x != nil {
		return x.AnonymousNick
	}
	return nil
}

func (x *AnonymousGroupMessage) GetHeadPortrait() uint32 {
	if x != nil {
		return x.HeadPortrait
	}
	return 0
}

func (x *AnonymousGroupMessage) GetExpireTime() uint32 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *AnonymousGroupMessage) GetBubbleId() uint32 {
	if x != nil {
		return x.BubbleId
	}
	return 0
}

func (x *AnonymousGroupMessage) GetRankColor() []byte {
	if x != nil {
		return x.RankColor
	}
	return nil
}

type Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodePage       int32  `protobuf:"zigzag32,1,opt,name=code_page,json=codePage,proto3" json:"code_page,omitempty"`
	Time           uint32 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Random         uint32 `protobuf:"varint,3,opt,name=random,proto3" json:"random,omitempty"`
	Color          uint32 `protobuf:"varint,4,opt,name=color,proto3" json:"color,omitempty"`
	Size           uint32 `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	Effect         uint32 `protobuf:"varint,6,opt,name=effect,proto3" json:"effect,omitempty"`
	CharSet        uint32 `protobuf:"varint,7,opt,name=char_set,json=charSet,proto3" json:"char_set,omitempty"`
	PitchAndFamily uint32 `protobuf:"varint,8,opt,name=pitch_and_family,json=pitchAndFamily,proto3" json:"pitch_and_family,omitempty"`
	FontName       string `protobuf:"bytes,9,opt,name=font_name,json=fontName,proto3" json:"font_name,omitempty"`
	ReserveData    []byte `protobuf:"bytes,10,opt,name=reserve_data,json=reserveData,proto3" json:"reserve_data,omitempty"`
}

func (x *Attribute) Reset() {
	*x = Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attribute) ProtoMessage() {}

func (x *Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attribute.ProtoReflect.Descriptor instead.
func (*Attribute) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{1}
}

func (x *Attribute) GetCodePage() int32 {
	if x != nil {
		return x.CodePage
	}
	return 0
}

func (x *Attribute) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Attribute) GetRandom() uint32 {
	if x != nil {
		return x.Random
	}
	return 0
}

func (x *Attribute) GetColor() uint32 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *Attribute) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Attribute) GetEffect() uint32 {
	if x != nil {
		return x.Effect
	}
	return 0
}

func (x *Attribute) GetCharSet() uint32 {
	if x != nil {
		return x.CharSet
	}
	return 0
}

func (x *Attribute) GetPitchAndFamily() uint32 {
	if x != nil {
		return x.PitchAndFamily
	}
	return 0
}

func (x *Attribute) GetFontName() string {
	if x != nil {
		return x.FontName
	}
	return ""
}

func (x *Attribute) GetReserveData() []byte {
	if x != nil {
		return x.ReserveData
	}
	return nil
}

type CommonElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceType  uint32 `protobuf:"varint,1,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"`
	Buffer       []byte `protobuf:"bytes,2,opt,name=buffer,proto3" json:"buffer,omitempty"` // pb_element
	BusinessType uint32 `protobuf:"varint,3,opt,name=business_type,json=businessType,proto3" json:"business_type,omitempty"`
}

func (x *CommonElement) Reset() {
	*x = CommonElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonElement) ProtoMessage() {}

func (x *CommonElement) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonElement.ProtoReflect.Descriptor instead.
func (*CommonElement) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{2}
}

func (x *CommonElement) GetServiceType() uint32 {
	if x != nil {
		return x.ServiceType
	}
	return 0
}

func (x *CommonElement) GetBuffer() []byte {
	if x != nil {
		return x.Buffer
	}
	return nil
}

func (x *CommonElement) GetBusinessType() uint32 {
	if x != nil {
		return x.BusinessType
	}
	return 0
}

type CustomElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Desc  []byte `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`
	Data  []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Type  uint32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"` // Enum
	Ext   []byte `protobuf:"bytes,4,opt,name=ext,proto3" json:"ext,omitempty"`
	Sound []byte `protobuf:"bytes,5,opt,name=sound,proto3" json:"sound,omitempty"`
}

func (x *CustomElement) Reset() {
	*x = CustomElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomElement) ProtoMessage() {}

func (x *CustomElement) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomElement.ProtoReflect.Descriptor instead.
func (*CustomElement) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{3}
}

func (x *CustomElement) GetDesc() []byte {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *CustomElement) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CustomElement) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CustomElement) GetExt() []byte {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *CustomElement) GetSound() []byte {
	if x != nil {
		return x.Sound
	}
	return nil
}

type CustomFace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid        []byte `protobuf:"bytes,1,opt,name=guid,proto3" json:"guid,omitempty"`
	FilePath    string `protobuf:"bytes,2,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	Shortcut    string `protobuf:"bytes,3,opt,name=shortcut,proto3" json:"shortcut,omitempty"`
	Buffer      []byte `protobuf:"bytes,4,opt,name=buffer,proto3" json:"buffer,omitempty"`
	Flag        []byte `protobuf:"bytes,5,opt,name=flag,proto3" json:"flag,omitempty"`
	OldData     []byte `protobuf:"bytes,6,opt,name=old_data,json=oldData,proto3" json:"old_data,omitempty"`
	FileId      uint32 `protobuf:"varint,7,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	ServerIp    uint32 `protobuf:"varint,8,opt,name=server_ip,json=serverIp,proto3" json:"server_ip,omitempty"`
	ServerPort  uint32 `protobuf:"varint,9,opt,name=server_port,json=serverPort,proto3" json:"server_port,omitempty"`
	FileType    uint32 `protobuf:"varint,10,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
	Signature   []byte `protobuf:"bytes,11,opt,name=signature,proto3" json:"signature,omitempty"`
	Useful      uint32 `protobuf:"varint,12,opt,name=useful,proto3" json:"useful,omitempty"`
	Md5         []byte `protobuf:"bytes,13,opt,name=md5,proto3" json:"md5,omitempty"`
	ThumbUrl    string `protobuf:"bytes,14,opt,name=thumb_url,json=thumbUrl,proto3" json:"thumb_url,omitempty"`
	BigUrl      string `protobuf:"bytes,15,opt,name=big_url,json=bigUrl,proto3" json:"big_url,omitempty"`
	OrigUrl     string `protobuf:"bytes,16,opt,name=orig_url,json=origUrl,proto3" json:"orig_url,omitempty"`
	BizType     uint32 `protobuf:"varint,17,opt,name=biz_type,json=bizType,proto3" json:"biz_type,omitempty"`
	RepeatIndex uint32 `protobuf:"varint,18,opt,name=repeat_index,json=repeatIndex,proto3" json:"repeat_index,omitempty"`
	RepeatImage uint32 `protobuf:"varint,19,opt,name=repeat_image,json=repeatImage,proto3" json:"repeat_image,omitempty"`
	ImageType   uint32 `protobuf:"varint,20,opt,name=image_type,json=imageType,proto3" json:"image_type,omitempty"`
	Index       uint32 `protobuf:"varint,21,opt,name=index,proto3" json:"index,omitempty"`
	Width       uint32 `protobuf:"varint,22,opt,name=width,proto3" json:"width,omitempty"`
	Height      uint32 `protobuf:"varint,23,opt,name=height,proto3" json:"height,omitempty"`
	Source      uint32 `protobuf:"varint,24,opt,name=source,proto3" json:"source,omitempty"`
	Size        uint32 `protobuf:"varint,25,opt,name=size,proto3" json:"size,omitempty"`
	Origin      uint32 `protobuf:"varint,26,opt,name=origin,proto3" json:"origin,omitempty"`
	ThumbWidth  uint32 `protobuf:"varint,27,opt,name=thumb_width,json=thumbWidth,proto3" json:"thumb_width,omitempty"`
	ThumbHeight uint32 `protobuf:"varint,28,opt,name=thumb_height,json=thumbHeight,proto3" json:"thumb_height,omitempty"`
	ShowLen     uint32 `protobuf:"varint,29,opt,name=show_len,json=showLen,proto3" json:"show_len,omitempty"`
	DownloadLen uint32 `protobuf:"varint,30,opt,name=download_len,json=downloadLen,proto3" json:"download_len,omitempty"`
	Url400      string `protobuf:"bytes,31,opt,name=url400,proto3" json:"url400,omitempty"`
	Width400    uint32 `protobuf:"varint,32,opt,name=width400,proto3" json:"width400,omitempty"`
	Height400   uint32 `protobuf:"varint,33,opt,name=height400,proto3" json:"height400,omitempty"`
	ReserveData []byte `protobuf:"bytes,34,opt,name=reserve_data,json=reserveData,proto3" json:"reserve_data,omitempty"`
}

func (x *CustomFace) Reset() {
	*x = CustomFace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomFace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomFace) ProtoMessage() {}

func (x *CustomFace) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomFace.ProtoReflect.Descriptor instead.
func (*CustomFace) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{4}
}

func (x *CustomFace) GetGuid() []byte {
	if x != nil {
		return x.Guid
	}
	return nil
}

func (x *CustomFace) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *CustomFace) GetShortcut() string {
	if x != nil {
		return x.Shortcut
	}
	return ""
}

func (x *CustomFace) GetBuffer() []byte {
	if x != nil {
		return x.Buffer
	}
	return nil
}

func (x *CustomFace) GetFlag() []byte {
	if x != nil {
		return x.Flag
	}
	return nil
}

func (x *CustomFace) GetOldData() []byte {
	if x != nil {
		return x.OldData
	}
	return nil
}

func (x *CustomFace) GetFileId() uint32 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *CustomFace) GetServerIp() uint32 {
	if x != nil {
		return x.ServerIp
	}
	return 0
}

func (x *CustomFace) GetServerPort() uint32 {
	if x != nil {
		return x.ServerPort
	}
	return 0
}

func (x *CustomFace) GetFileType() uint32 {
	if x != nil {
		return x.FileType
	}
	return 0
}

func (x *CustomFace) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *CustomFace) GetUseful() uint32 {
	if x != nil {
		return x.Useful
	}
	return 0
}

func (x *CustomFace) GetMd5() []byte {
	if x != nil {
		return x.Md5
	}
	return nil
}

func (x *CustomFace) GetThumbUrl() string {
	if x != nil {
		return x.ThumbUrl
	}
	return ""
}

func (x *CustomFace) GetBigUrl() string {
	if x != nil {
		return x.BigUrl
	}
	return ""
}

func (x *CustomFace) GetOrigUrl() string {
	if x != nil {
		return x.OrigUrl
	}
	return ""
}

func (x *CustomFace) GetBizType() uint32 {
	if x != nil {
		return x.BizType
	}
	return 0
}

func (x *CustomFace) GetRepeatIndex() uint32 {
	if x != nil {
		return x.RepeatIndex
	}
	return 0
}

func (x *CustomFace) GetRepeatImage() uint32 {
	if x != nil {
		return x.RepeatImage
	}
	return 0
}

func (x *CustomFace) GetImageType() uint32 {
	if x != nil {
		return x.ImageType
	}
	return 0
}

func (x *CustomFace) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CustomFace) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *CustomFace) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *CustomFace) GetSource() uint32 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *CustomFace) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CustomFace) GetOrigin() uint32 {
	if x != nil {
		return x.Origin
	}
	return 0
}

func (x *CustomFace) GetThumbWidth() uint32 {
	if x != nil {
		return x.ThumbWidth
	}
	return 0
}

func (x *CustomFace) GetThumbHeight() uint32 {
	if x != nil {
		return x.ThumbHeight
	}
	return 0
}

func (x *CustomFace) GetShowLen() uint32 {
	if x != nil {
		return x.ShowLen
	}
	return 0
}

func (x *CustomFace) GetDownloadLen() uint32 {
	if x != nil {
		return x.DownloadLen
	}
	return 0
}

func (x *CustomFace) GetUrl400() string {
	if x != nil {
		return x.Url400
	}
	return ""
}

func (x *CustomFace) GetWidth400() uint32 {
	if x != nil {
		return x.Width400
	}
	return 0
}

func (x *CustomFace) GetHeight400() uint32 {
	if x != nil {
		return x.Height400
	}
	return 0
}

func (x *CustomFace) GetReserveData() []byte {
	if x != nil {
		return x.ReserveData
	}
	return nil
}

type Element struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text                  *Text                  `protobuf:"bytes,1,opt,name=text,proto3,oneof" json:"text,omitempty"`
	Face                  *Face                  `protobuf:"bytes,2,opt,name=face,proto3,oneof" json:"face,omitempty"`
	OnlineImage           *OnlineImage           `protobuf:"bytes,3,opt,name=online_image,json=onlineImage,proto3,oneof" json:"online_image,omitempty"`
	NotOnlineImage        *NotOnlineImage        `protobuf:"bytes,4,opt,name=not_online_image,json=notOnlineImage,proto3,oneof" json:"not_online_image,omitempty"`
	Transfer              *TransferElement       `protobuf:"bytes,5,opt,name=transfer,proto3,oneof" json:"transfer,omitempty"`
	MarketFace            *MarketFace            `protobuf:"bytes,6,opt,name=market_face,json=marketFace,proto3,oneof" json:"market_face,omitempty"`
	ElementFlags          *ElementFlags          `protobuf:"bytes,7,opt,name=element_flags,json=elementFlags,proto3,oneof" json:"element_flags,omitempty"`
	CustomFace            *CustomFace            `protobuf:"bytes,8,opt,name=custom_face,json=customFace,proto3,oneof" json:"custom_face,omitempty"`
	ElementFlags2         *ElementFlags2         `protobuf:"bytes,9,opt,name=element_flags2,json=elementFlags2,proto3,oneof" json:"element_flags2,omitempty"`
	FunFace               *FunFace               `protobuf:"bytes,10,opt,name=fun_face,json=funFace,proto3,oneof" json:"fun_face,omitempty"`
	SecretFileMessage     *SecretFileMessage     `protobuf:"bytes,11,opt,name=secret_file_message,json=secretFileMessage,proto3,oneof" json:"secret_file_message,omitempty"`
	RichMessage           *RichMessage           `protobuf:"bytes,12,opt,name=rich_message,json=richMessage,proto3,oneof" json:"rich_message,omitempty"`
	GroupFile             *GroupFile             `protobuf:"bytes,13,opt,name=group_file,json=groupFile,proto3,oneof" json:"group_file,omitempty"`
	PublicGroup           *PublicGroup           `protobuf:"bytes,14,opt,name=public_group,json=publicGroup,proto3,oneof" json:"public_group,omitempty"`
	MarketTransfer        *MarketTransfer        `protobuf:"bytes,15,opt,name=market_transfer,json=marketTransfer,proto3,oneof" json:"market_transfer,omitempty"`
	ExtraInfo             *ExtraInfo             `protobuf:"bytes,16,opt,name=extra_info,json=extraInfo,proto3,oneof" json:"extra_info,omitempty"`
	ShakeWindow           *ShakeWindow           `protobuf:"bytes,17,opt,name=shake_window,json=shakeWindow,proto3,oneof" json:"shake_window,omitempty"`
	PublicAccount         *PublicAccount         `protobuf:"bytes,18,opt,name=public_account,json=publicAccount,proto3,oneof" json:"public_account,omitempty"`
	VideoFile             *VideoFile             `protobuf:"bytes,19,opt,name=video_file,json=videoFile,proto3,oneof" json:"video_file,omitempty"`
	TipsInfo              *TipsInfo              `protobuf:"bytes,20,opt,name=tips_info,json=tipsInfo,proto3,oneof" json:"tips_info,omitempty"`
	AnonymousGroupMessage *AnonymousGroupMessage `protobuf:"bytes,21,opt,name=anonymous_group_message,json=anonymousGroupMessage,proto3,oneof" json:"anonymous_group_message,omitempty"`
	QqLiveOld             *QQLiveOld             `protobuf:"bytes,22,opt,name=qq_live_old,json=qqLiveOld,proto3,oneof" json:"qq_live_old,omitempty"`
	LifeOnline            *LifeOnlineAccount     `protobuf:"bytes,23,opt,name=life_online,json=lifeOnline,proto3,oneof" json:"life_online,omitempty"`
	QqWalletMessage       *QQWalletMessage       `protobuf:"bytes,24,opt,name=qq_wallet_message,json=qqWalletMessage,proto3,oneof" json:"qq_wallet_message,omitempty"`
	// optional string crm_elem = 25;
	// optional string conference_tips_info = 26;
	RedBagInfo          *RedBagInfo     `protobuf:"bytes,27,opt,name=red_bag_info,json=redBagInfo,proto3,oneof" json:"red_bag_info,omitempty"`
	LowVersionTips      *LowVersionTips `protobuf:"bytes,28,opt,name=low_version_tips,json=lowVersionTips,proto3,oneof" json:"low_version_tips,omitempty"`
	BankcodeControlInfo []byte          `protobuf:"bytes,29,opt,name=bankcode_control_info,json=bankcodeControlInfo,proto3,oneof" json:"bankcode_control_info,omitempty"`
	// optional string near_by_msg = 30;
	Custom *CustomElement `protobuf:"bytes,31,opt,name=custom,proto3,oneof" json:"custom,omitempty"`
	// optional string location_info = 32;
	// optional string pub_acc_info = 33;
	// optional string small_emoji = 34;
	// optional string fsj_msg_elem = 35;
	// optional string ark_app = 36;
	GeneralFlags *GeneralFlags `protobuf:"bytes,37,opt,name=general_flags,json=generalFlags,proto3,oneof" json:"general_flags,omitempty"`
	// optional string hc_flash_pic = 38;
	// optional string deliver_gift_msg = 39;
	// optional string bitapp_msg = 40;
	// optional string open_qq_data = 41;
	// optional string apollo_msg = 42;
	// optional string group_pub_acc_info = 43;
	// optional string bless_msg = 44;
	SourceMessage *SourceMessage `protobuf:"bytes,45,opt,name=source_message,json=sourceMessage,proto3,oneof" json:"source_message,omitempty"`
	// optional string lola_msg = 46;
	GroupBusinessMsg *GroupBusinessMessage `protobuf:"bytes,47,opt,name=group_business_msg,json=groupBusinessMsg,proto3,oneof" json:"group_business_msg,omitempty"`
	// optional string msg_workflow_notify = 48;
	// optional string pat_elem = 49;
	GroupPost *GroupPostElement `protobuf:"bytes,50,opt,name=group_post,json=groupPost,proto3,oneof" json:"group_post,omitempty"`
	LightApp  *LightAppElement  `protobuf:"bytes,51,opt,name=light_app,json=lightApp,proto3,oneof" json:"light_app,omitempty"`
	// optional string eim_info = 52;
	Common *CommonElement `protobuf:"bytes,53,opt,name=common,proto3,oneof" json:"common,omitempty"`
}

func (x *Element) Reset() {
	*x = Element{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Element) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Element) ProtoMessage() {}

func (x *Element) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Element.ProtoReflect.Descriptor instead.
func (*Element) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{5}
}

func (x *Element) GetText() *Text {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Element) GetFace() *Face {
	if x != nil {
		return x.Face
	}
	return nil
}

func (x *Element) GetOnlineImage() *OnlineImage {
	if x != nil {
		return x.OnlineImage
	}
	return nil
}

func (x *Element) GetNotOnlineImage() *NotOnlineImage {
	if x != nil {
		return x.NotOnlineImage
	}
	return nil
}

func (x *Element) GetTransfer() *TransferElement {
	if x != nil {
		return x.Transfer
	}
	return nil
}

func (x *Element) GetMarketFace() *MarketFace {
	if x != nil {
		return x.MarketFace
	}
	return nil
}

func (x *Element) GetElementFlags() *ElementFlags {
	if x != nil {
		return x.ElementFlags
	}
	return nil
}

func (x *Element) GetCustomFace() *CustomFace {
	if x != nil {
		return x.CustomFace
	}
	return nil
}

func (x *Element) GetElementFlags2() *ElementFlags2 {
	if x != nil {
		return x.ElementFlags2
	}
	return nil
}

func (x *Element) GetFunFace() *FunFace {
	if x != nil {
		return x.FunFace
	}
	return nil
}

func (x *Element) GetSecretFileMessage() *SecretFileMessage {
	if x != nil {
		return x.SecretFileMessage
	}
	return nil
}

func (x *Element) GetRichMessage() *RichMessage {
	if x != nil {
		return x.RichMessage
	}
	return nil
}

func (x *Element) GetGroupFile() *GroupFile {
	if x != nil {
		return x.GroupFile
	}
	return nil
}

func (x *Element) GetPublicGroup() *PublicGroup {
	if x != nil {
		return x.PublicGroup
	}
	return nil
}

func (x *Element) GetMarketTransfer() *MarketTransfer {
	if x != nil {
		return x.MarketTransfer
	}
	return nil
}

func (x *Element) GetExtraInfo() *ExtraInfo {
	if x != nil {
		return x.ExtraInfo
	}
	return nil
}

func (x *Element) GetShakeWindow() *ShakeWindow {
	if x != nil {
		return x.ShakeWindow
	}
	return nil
}

func (x *Element) GetPublicAccount() *PublicAccount {
	if x != nil {
		return x.PublicAccount
	}
	return nil
}

func (x *Element) GetVideoFile() *VideoFile {
	if x != nil {
		return x.VideoFile
	}
	return nil
}

func (x *Element) GetTipsInfo() *TipsInfo {
	if x != nil {
		return x.TipsInfo
	}
	return nil
}

func (x *Element) GetAnonymousGroupMessage() *AnonymousGroupMessage {
	if x != nil {
		return x.AnonymousGroupMessage
	}
	return nil
}

func (x *Element) GetQqLiveOld() *QQLiveOld {
	if x != nil {
		return x.QqLiveOld
	}
	return nil
}

func (x *Element) GetLifeOnline() *LifeOnlineAccount {
	if x != nil {
		return x.LifeOnline
	}
	return nil
}

func (x *Element) GetQqWalletMessage() *QQWalletMessage {
	if x != nil {
		return x.QqWalletMessage
	}
	return nil
}

func (x *Element) GetRedBagInfo() *RedBagInfo {
	if x != nil {
		return x.RedBagInfo
	}
	return nil
}

func (x *Element) GetLowVersionTips() *LowVersionTips {
	if x != nil {
		return x.LowVersionTips
	}
	return nil
}

func (x *Element) GetBankcodeControlInfo() []byte {
	if x != nil {
		return x.BankcodeControlInfo
	}
	return nil
}

func (x *Element) GetCustom() *CustomElement {
	if x != nil {
		return x.Custom
	}
	return nil
}

func (x *Element) GetGeneralFlags() *GeneralFlags {
	if x != nil {
		return x.GeneralFlags
	}
	return nil
}

func (x *Element) GetSourceMessage() *SourceMessage {
	if x != nil {
		return x.SourceMessage
	}
	return nil
}

func (x *Element) GetGroupBusinessMsg() *GroupBusinessMessage {
	if x != nil {
		return x.GroupBusinessMsg
	}
	return nil
}

func (x *Element) GetGroupPost() *GroupPostElement {
	if x != nil {
		return x.GroupPost
	}
	return nil
}

func (x *Element) GetLightApp() *LightAppElement {
	if x != nil {
		return x.LightApp
	}
	return nil
}

func (x *Element) GetCommon() *CommonElement {
	if x != nil {
		return x.Common
	}
	return nil
}

type ElementFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags        []byte `protobuf:"bytes,1,opt,name=flags,proto3" json:"flags,omitempty"`
	BusinessData []byte `protobuf:"bytes,2,opt,name=business_data,json=businessData,proto3" json:"business_data,omitempty"`
}

func (x *ElementFlags) Reset() {
	*x = ElementFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementFlags) ProtoMessage() {}

func (x *ElementFlags) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementFlags.ProtoReflect.Descriptor instead.
func (*ElementFlags) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{6}
}

func (x *ElementFlags) GetFlags() []byte {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *ElementFlags) GetBusinessData() []byte {
	if x != nil {
		return x.BusinessData
	}
	return nil
}

type ElementFlags2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColorTextId      uint32                   `protobuf:"varint,1,opt,name=color_text_id,json=colorTextId,proto3" json:"color_text_id,omitempty"`
	MessageId        uint64                   `protobuf:"varint,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	WhisperSessionId uint32                   `protobuf:"varint,3,opt,name=whisper_session_id,json=whisperSessionId,proto3" json:"whisper_session_id,omitempty"`
	PttChangeBit     uint32                   `protobuf:"varint,4,opt,name=ptt_change_bit,json=pttChangeBit,proto3" json:"ptt_change_bit,omitempty"`
	VipStatus        uint32                   `protobuf:"varint,5,opt,name=vip_status,json=vipStatus,proto3" json:"vip_status,omitempty"`
	CompatibleId     uint32                   `protobuf:"varint,6,opt,name=compatible_id,json=compatibleId,proto3" json:"compatible_id,omitempty"`
	Instants         []*ElementFlags2_Instant `protobuf:"bytes,7,rep,name=instants,proto3" json:"instants,omitempty"`
	MessageCount     uint32                   `protobuf:"varint,8,opt,name=message_count,json=messageCount,proto3" json:"message_count,omitempty"`
	SrcInstant       *ElementFlags2_Instant   `protobuf:"bytes,9,opt,name=src_instant,json=srcInstant,proto3" json:"src_instant,omitempty"`
	Longtitude       uint32                   `protobuf:"varint,10,opt,name=longtitude,proto3" json:"longtitude,omitempty"`
	Latitude         uint32                   `protobuf:"varint,11,opt,name=latitude,proto3" json:"latitude,omitempty"`
	CustomAont       uint32                   `protobuf:"varint,12,opt,name=custom_aont,json=customAont,proto3" json:"custom_aont,omitempty"`
	PcSupportDefine  *PCSupportDef            `protobuf:"bytes,13,opt,name=pc_support_define,json=pcSupportDefine,proto3" json:"pc_support_define,omitempty"`
}

func (x *ElementFlags2) Reset() {
	*x = ElementFlags2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementFlags2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementFlags2) ProtoMessage() {}

func (x *ElementFlags2) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementFlags2.ProtoReflect.Descriptor instead.
func (*ElementFlags2) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{7}
}

func (x *ElementFlags2) GetColorTextId() uint32 {
	if x != nil {
		return x.ColorTextId
	}
	return 0
}

func (x *ElementFlags2) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *ElementFlags2) GetWhisperSessionId() uint32 {
	if x != nil {
		return x.WhisperSessionId
	}
	return 0
}

func (x *ElementFlags2) GetPttChangeBit() uint32 {
	if x != nil {
		return x.PttChangeBit
	}
	return 0
}

func (x *ElementFlags2) GetVipStatus() uint32 {
	if x != nil {
		return x.VipStatus
	}
	return 0
}

func (x *ElementFlags2) GetCompatibleId() uint32 {
	if x != nil {
		return x.CompatibleId
	}
	return 0
}

func (x *ElementFlags2) GetInstants() []*ElementFlags2_Instant {
	if x != nil {
		return x.Instants
	}
	return nil
}

func (x *ElementFlags2) GetMessageCount() uint32 {
	if x != nil {
		return x.MessageCount
	}
	return 0
}

func (x *ElementFlags2) GetSrcInstant() *ElementFlags2_Instant {
	if x != nil {
		return x.SrcInstant
	}
	return nil
}

func (x *ElementFlags2) GetLongtitude() uint32 {
	if x != nil {
		return x.Longtitude
	}
	return 0
}

func (x *ElementFlags2) GetLatitude() uint32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *ElementFlags2) GetCustomAont() uint32 {
	if x != nil {
		return x.CustomAont
	}
	return 0
}

func (x *ElementFlags2) GetPcSupportDefine() *PCSupportDef {
	if x != nil {
		return x.PcSupportDefine
	}
	return nil
}

type ExtraInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nick             []byte `protobuf:"bytes,1,opt,name=nick,proto3" json:"nick,omitempty"`
	GroupCard        []byte `protobuf:"bytes,2,opt,name=group_card,json=groupCard,proto3" json:"group_card,omitempty"`
	Level            uint32 `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	Flags            uint32 `protobuf:"varint,4,opt,name=flags,proto3" json:"flags,omitempty"`
	GroupMask        uint32 `protobuf:"varint,5,opt,name=group_mask,json=groupMask,proto3" json:"group_mask,omitempty"`
	MessageTailId    uint32 `protobuf:"varint,6,opt,name=message_tail_id,json=messageTailId,proto3" json:"message_tail_id,omitempty"`
	SenderTitle      []byte `protobuf:"bytes,7,opt,name=sender_title,json=senderTitle,proto3" json:"sender_title,omitempty"`
	ApnsTips         []byte `protobuf:"bytes,8,opt,name=apns_tips,json=apnsTips,proto3" json:"apns_tips,omitempty"`
	Uin              uint64 `protobuf:"varint,9,opt,name=uin,proto3" json:"uin,omitempty"`
	MessageStateFlag uint32 `protobuf:"varint,10,opt,name=message_state_flag,json=messageStateFlag,proto3" json:"message_state_flag,omitempty"`
	ApnsSoundType    uint32 `protobuf:"varint,11,opt,name=apns_sound_type,json=apnsSoundType,proto3" json:"apns_sound_type,omitempty"`
	NewGroupFlag     uint32 `protobuf:"varint,12,opt,name=new_group_flag,json=newGroupFlag,proto3" json:"new_group_flag,omitempty"`
}

func (x *ExtraInfo) Reset() {
	*x = ExtraInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraInfo) ProtoMessage() {}

func (x *ExtraInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraInfo.ProtoReflect.Descriptor instead.
func (*ExtraInfo) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{8}
}

func (x *ExtraInfo) GetNick() []byte {
	if x != nil {
		return x.Nick
	}
	return nil
}

func (x *ExtraInfo) GetGroupCard() []byte {
	if x != nil {
		return x.GroupCard
	}
	return nil
}

func (x *ExtraInfo) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ExtraInfo) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ExtraInfo) GetGroupMask() uint32 {
	if x != nil {
		return x.GroupMask
	}
	return 0
}

func (x *ExtraInfo) GetMessageTailId() uint32 {
	if x != nil {
		return x.MessageTailId
	}
	return 0
}

func (x *ExtraInfo) GetSenderTitle() []byte {
	if x != nil {
		return x.SenderTitle
	}
	return nil
}

func (x *ExtraInfo) GetApnsTips() []byte {
	if x != nil {
		return x.ApnsTips
	}
	return nil
}

func (x *ExtraInfo) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *ExtraInfo) GetMessageStateFlag() uint32 {
	if x != nil {
		return x.MessageStateFlag
	}
	return 0
}

func (x *ExtraInfo) GetApnsSoundType() uint32 {
	if x != nil {
		return x.ApnsSoundType
	}
	return 0
}

func (x *ExtraInfo) GetNewGroupFlag() uint32 {
	if x != nil {
		return x.NewGroupFlag
	}
	return 0
}

type Face struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index  uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Old    []byte `protobuf:"bytes,2,opt,name=old,proto3" json:"old,omitempty"`
	Buffer []byte `protobuf:"bytes,3,opt,name=buffer,proto3" json:"buffer,omitempty"`
}

func (x *Face) Reset() {
	*x = Face{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Face) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Face) ProtoMessage() {}

func (x *Face) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Face.ProtoReflect.Descriptor instead.
func (*Face) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{9}
}

func (x *Face) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Face) GetOld() []byte {
	if x != nil {
		return x.Old
	}
	return nil
}

func (x *Face) GetBuffer() []byte {
	if x != nil {
		return x.Buffer
	}
	return nil
}

type FunFace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Turntable *FunFace_Turntable `protobuf:"bytes,1,opt,name=turntable,proto3" json:"turntable,omitempty"`
	Bomb      *FunFace_Bomb      `protobuf:"bytes,2,opt,name=bomb,proto3" json:"bomb,omitempty"`
}

func (x *FunFace) Reset() {
	*x = FunFace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunFace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunFace) ProtoMessage() {}

func (x *FunFace) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunFace.ProtoReflect.Descriptor instead.
func (*FunFace) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{10}
}

func (x *FunFace) GetTurntable() *FunFace_Turntable {
	if x != nil {
		return x.Turntable
	}
	return nil
}

func (x *FunFace) GetBomb() *FunFace_Bomb {
	if x != nil {
		return x.Bomb
	}
	return nil
}

type GeneralFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BubbleDiyTextId     uint32 `protobuf:"varint,1,opt,name=bubble_diy_text_id,json=bubbleDiyTextId,proto3" json:"bubble_diy_text_id,omitempty"`
	GroupFlagNew        uint32 `protobuf:"varint,2,opt,name=group_flag_new,json=groupFlagNew,proto3" json:"group_flag_new,omitempty"`
	Uin                 uint64 `protobuf:"varint,3,opt,name=uin,proto3" json:"uin,omitempty"`
	RpId                []byte `protobuf:"bytes,4,opt,name=rp_id,json=rpId,proto3" json:"rp_id,omitempty"`
	PrpFold             uint32 `protobuf:"varint,5,opt,name=prp_fold,json=prpFold,proto3" json:"prp_fold,omitempty"`
	LongTextFlag        []byte `protobuf:"bytes,6,opt,name=long_text_flag,json=longTextFlag,proto3" json:"long_text_flag,omitempty"`
	LongTextResid       uint32 `protobuf:"varint,7,opt,name=long_text_resid,json=longTextResid,proto3" json:"long_text_resid,omitempty"`
	GroupType           uint32 `protobuf:"varint,8,opt,name=group_type,json=groupType,proto3" json:"group_type,omitempty"`
	ToUinFlag           uint32 `protobuf:"varint,9,opt,name=to_uin_flag,json=toUinFlag,proto3" json:"to_uin_flag,omitempty"`
	GlamourLevel        uint32 `protobuf:"varint,10,opt,name=glamour_level,json=glamourLevel,proto3" json:"glamour_level,omitempty"`
	MemberLevel         uint32 `protobuf:"varint,11,opt,name=member_level,json=memberLevel,proto3" json:"member_level,omitempty"`
	GroupRankSeq        uint64 `protobuf:"varint,12,opt,name=group_rank_seq,json=groupRankSeq,proto3" json:"group_rank_seq,omitempty"`
	OlympicTorch        uint32 `protobuf:"varint,13,opt,name=olympic_torch,json=olympicTorch,proto3" json:"olympic_torch,omitempty"`
	BabyqGuideMsgCookie []byte `protobuf:"bytes,14,opt,name=babyq_guide_msg_cookie,json=babyqGuideMsgCookie,proto3" json:"babyq_guide_msg_cookie,omitempty"`
	ExpertFlag          uint32 `protobuf:"varint,15,opt,name=expert_flag,json=expertFlag,proto3" json:"expert_flag,omitempty"`
	BubbleSubId         uint32 `protobuf:"varint,16,opt,name=bubble_sub_id,json=bubbleSubId,proto3" json:"bubble_sub_id,omitempty"`
	PendantId           uint64 `protobuf:"varint,17,opt,name=pendant_id,json=pendantId,proto3" json:"pendant_id,omitempty"`
	RpIndex             []byte `protobuf:"bytes,18,opt,name=rp_index,json=rpIndex,proto3" json:"rp_index,omitempty"`
	PbReserve           []byte `protobuf:"bytes,19,opt,name=pb_reserve,json=pbReserve,proto3" json:"pb_reserve,omitempty"`
}

func (x *GeneralFlags) Reset() {
	*x = GeneralFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralFlags) ProtoMessage() {}

func (x *GeneralFlags) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralFlags.ProtoReflect.Descriptor instead.
func (*GeneralFlags) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{11}
}

func (x *GeneralFlags) GetBubbleDiyTextId() uint32 {
	if x != nil {
		return x.BubbleDiyTextId
	}
	return 0
}

func (x *GeneralFlags) GetGroupFlagNew() uint32 {
	if x != nil {
		return x.GroupFlagNew
	}
	return 0
}

func (x *GeneralFlags) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *GeneralFlags) GetRpId() []byte {
	if x != nil {
		return x.RpId
	}
	return nil
}

func (x *GeneralFlags) GetPrpFold() uint32 {
	if x != nil {
		return x.PrpFold
	}
	return 0
}

func (x *GeneralFlags) GetLongTextFlag() []byte {
	if x != nil {
		return x.LongTextFlag
	}
	return nil
}

func (x *GeneralFlags) GetLongTextResid() uint32 {
	if x != nil {
		return x.LongTextResid
	}
	return 0
}

func (x *GeneralFlags) GetGroupType() uint32 {
	if x != nil {
		return x.GroupType
	}
	return 0
}

func (x *GeneralFlags) GetToUinFlag() uint32 {
	if x != nil {
		return x.ToUinFlag
	}
	return 0
}

func (x *GeneralFlags) GetGlamourLevel() uint32 {
	if x != nil {
		return x.GlamourLevel
	}
	return 0
}

func (x *GeneralFlags) GetMemberLevel() uint32 {
	if x != nil {
		return x.MemberLevel
	}
	return 0
}

func (x *GeneralFlags) GetGroupRankSeq() uint64 {
	if x != nil {
		return x.GroupRankSeq
	}
	return 0
}

func (x *GeneralFlags) GetOlympicTorch() uint32 {
	if x != nil {
		return x.OlympicTorch
	}
	return 0
}

func (x *GeneralFlags) GetBabyqGuideMsgCookie() []byte {
	if x != nil {
		return x.BabyqGuideMsgCookie
	}
	return nil
}

func (x *GeneralFlags) GetExpertFlag() uint32 {
	if x != nil {
		return x.ExpertFlag
	}
	return 0
}

func (x *GeneralFlags) GetBubbleSubId() uint32 {
	if x != nil {
		return x.BubbleSubId
	}
	return 0
}

func (x *GeneralFlags) GetPendantId() uint64 {
	if x != nil {
		return x.PendantId
	}
	return 0
}

func (x *GeneralFlags) GetRpIndex() []byte {
	if x != nil {
		return x.RpIndex
	}
	return nil
}

func (x *GeneralFlags) GetPbReserve() []byte {
	if x != nil {
		return x.PbReserve
	}
	return nil
}

type GroupBusinessMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags       uint32 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	HeadUrl     []byte `protobuf:"bytes,2,opt,name=head_url,json=headUrl,proto3" json:"head_url,omitempty"`
	HeadClkUrl  []byte `protobuf:"bytes,3,opt,name=head_clk_url,json=headClkUrl,proto3" json:"head_clk_url,omitempty"`
	Nick        []byte `protobuf:"bytes,4,opt,name=nick,proto3" json:"nick,omitempty"`
	NickColor   []byte `protobuf:"bytes,5,opt,name=nick_color,json=nickColor,proto3" json:"nick_color,omitempty"`
	Rank        []byte `protobuf:"bytes,6,opt,name=rank,proto3" json:"rank,omitempty"`
	RankColor   []byte `protobuf:"bytes,7,opt,name=rank_color,json=rankColor,proto3" json:"rank_color,omitempty"`
	RankBgcolor []byte `protobuf:"bytes,8,opt,name=rank_bgcolor,json=rankBgcolor,proto3" json:"rank_bgcolor,omitempty"`
}

func (x *GroupBusinessMessage) Reset() {
	*x = GroupBusinessMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupBusinessMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupBusinessMessage) ProtoMessage() {}

func (x *GroupBusinessMessage) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupBusinessMessage.ProtoReflect.Descriptor instead.
func (*GroupBusinessMessage) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{12}
}

func (x *GroupBusinessMessage) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *GroupBusinessMessage) GetHeadUrl() []byte {
	if x != nil {
		return x.HeadUrl
	}
	return nil
}

func (x *GroupBusinessMessage) GetHeadClkUrl() []byte {
	if x != nil {
		return x.HeadClkUrl
	}
	return nil
}

func (x *GroupBusinessMessage) GetNick() []byte {
	if x != nil {
		return x.Nick
	}
	return nil
}

func (x *GroupBusinessMessage) GetNickColor() []byte {
	if x != nil {
		return x.NickColor
	}
	return nil
}

func (x *GroupBusinessMessage) GetRank() []byte {
	if x != nil {
		return x.Rank
	}
	return nil
}

func (x *GroupBusinessMessage) GetRankColor() []byte {
	if x != nil {
		return x.RankColor
	}
	return nil
}

func (x *GroupBusinessMessage) GetRankBgcolor() []byte {
	if x != nil {
		return x.RankBgcolor
	}
	return nil
}

type GroupFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName        []byte `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FileSize        uint64 `protobuf:"varint,2,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	FileId          []byte `protobuf:"bytes,3,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	BatchId         []byte `protobuf:"bytes,4,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	FileKey         []byte `protobuf:"bytes,5,opt,name=file_key,json=fileKey,proto3" json:"file_key,omitempty"`
	Mark            []byte `protobuf:"bytes,6,opt,name=mark,proto3" json:"mark,omitempty"`
	Sequence        uint64 `protobuf:"varint,7,opt,name=sequence,proto3" json:"sequence,omitempty"`
	BatchItemId     []byte `protobuf:"bytes,8,opt,name=batch_item_id,json=batchItemId,proto3" json:"batch_item_id,omitempty"`
	FeedMessageTime uint32 `protobuf:"varint,9,opt,name=feed_message_time,json=feedMessageTime,proto3" json:"feed_message_time,omitempty"`
}

func (x *GroupFile) Reset() {
	*x = GroupFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupFile) ProtoMessage() {}

func (x *GroupFile) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupFile.ProtoReflect.Descriptor instead.
func (*GroupFile) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{13}
}

func (x *GroupFile) GetFileName() []byte {
	if x != nil {
		return x.FileName
	}
	return nil
}

func (x *GroupFile) GetFileSize() uint64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *GroupFile) GetFileId() []byte {
	if x != nil {
		return x.FileId
	}
	return nil
}

func (x *GroupFile) GetBatchId() []byte {
	if x != nil {
		return x.BatchId
	}
	return nil
}

func (x *GroupFile) GetFileKey() []byte {
	if x != nil {
		return x.FileKey
	}
	return nil
}

func (x *GroupFile) GetMark() []byte {
	if x != nil {
		return x.Mark
	}
	return nil
}

func (x *GroupFile) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *GroupFile) GetBatchItemId() []byte {
	if x != nil {
		return x.BatchItemId
	}
	return nil
}

func (x *GroupFile) GetFeedMessageTime() uint32 {
	if x != nil {
		return x.FeedMessageTime
	}
	return 0
}

type GroupPostElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferType    uint32 `protobuf:"varint,1,opt,name=transfer_type,json=transferType,proto3" json:"transfer_type,omitempty"`
	TransferMessage []byte `protobuf:"bytes,2,opt,name=transfer_message,json=transferMessage,proto3" json:"transfer_message,omitempty"`
}

func (x *GroupPostElement) Reset() {
	*x = GroupPostElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupPostElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupPostElement) ProtoMessage() {}

func (x *GroupPostElement) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupPostElement.ProtoReflect.Descriptor instead.
func (*GroupPostElement) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{14}
}

func (x *GroupPostElement) GetTransferType() uint32 {
	if x != nil {
		return x.TransferType
	}
	return 0
}

func (x *GroupPostElement) GetTransferMessage() []byte {
	if x != nil {
		return x.TransferMessage
	}
	return nil
}

type LifeOnlineAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniqueId uint64 `protobuf:"varint,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	Op       uint32 `protobuf:"varint,2,opt,name=op,proto3" json:"op,omitempty"`
	ShowTime uint32 `protobuf:"varint,3,opt,name=show_time,json=showTime,proto3" json:"show_time,omitempty"`
	Report   uint32 `protobuf:"varint,4,opt,name=report,proto3" json:"report,omitempty"`
	Ack      uint32 `protobuf:"varint,5,opt,name=ack,proto3" json:"ack,omitempty"`
	Bitmap   uint64 `protobuf:"varint,6,opt,name=bitmap,proto3" json:"bitmap,omitempty"`
}

func (x *LifeOnlineAccount) Reset() {
	*x = LifeOnlineAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LifeOnlineAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifeOnlineAccount) ProtoMessage() {}

func (x *LifeOnlineAccount) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifeOnlineAccount.ProtoReflect.Descriptor instead.
func (*LifeOnlineAccount) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{15}
}

func (x *LifeOnlineAccount) GetUniqueId() uint64 {
	if x != nil {
		return x.UniqueId
	}
	return 0
}

func (x *LifeOnlineAccount) GetOp() uint32 {
	if x != nil {
		return x.Op
	}
	return 0
}

func (x *LifeOnlineAccount) GetShowTime() uint32 {
	if x != nil {
		return x.ShowTime
	}
	return 0
}

func (x *LifeOnlineAccount) GetReport() uint32 {
	if x != nil {
		return x.Report
	}
	return 0
}

func (x *LifeOnlineAccount) GetAck() uint32 {
	if x != nil {
		return x.Ack
	}
	return 0
}

func (x *LifeOnlineAccount) GetBitmap() uint64 {
	if x != nil {
		return x.Bitmap
	}
	return 0
}

type LightAppElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	ResourceId []byte `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
}

func (x *LightAppElement) Reset() {
	*x = LightAppElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LightAppElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightAppElement) ProtoMessage() {}

func (x *LightAppElement) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LightAppElement.ProtoReflect.Descriptor instead.
func (*LightAppElement) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{16}
}

func (x *LightAppElement) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *LightAppElement) GetResourceId() []byte {
	if x != nil {
		return x.ResourceId
	}
	return nil
}

type LowVersionTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessId  uint32 `protobuf:"varint,1,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	SessionType uint32 `protobuf:"varint,2,opt,name=session_type,json=sessionType,proto3" json:"session_type,omitempty"`
	SessionUin  uint64 `protobuf:"varint,3,opt,name=session_uin,json=sessionUin,proto3" json:"session_uin,omitempty"`
	SenderUin   uint64 `protobuf:"varint,4,opt,name=sender_uin,json=senderUin,proto3" json:"sender_uin,omitempty"`
	Text        string `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *LowVersionTips) Reset() {
	*x = LowVersionTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LowVersionTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LowVersionTips) ProtoMessage() {}

func (x *LowVersionTips) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LowVersionTips.ProtoReflect.Descriptor instead.
func (*LowVersionTips) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{17}
}

func (x *LowVersionTips) GetBusinessId() uint32 {
	if x != nil {
		return x.BusinessId
	}
	return 0
}

func (x *LowVersionTips) GetSessionType() uint32 {
	if x != nil {
		return x.SessionType
	}
	return 0
}

func (x *LowVersionTips) GetSessionUin() uint64 {
	if x != nil {
		return x.SessionUin
	}
	return 0
}

func (x *LowVersionTips) GetSenderUin() uint64 {
	if x != nil {
		return x.SenderUin
	}
	return 0
}

func (x *LowVersionTips) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type MarketFace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaceName    []byte `protobuf:"bytes,1,opt,name=faceName,proto3" json:"faceName,omitempty"`
	ItemType    uint32 `protobuf:"varint,2,opt,name=item_type,json=itemType,proto3" json:"item_type,omitempty"`
	FaceInfo    uint32 `protobuf:"varint,3,opt,name=face_info,json=faceInfo,proto3" json:"face_info,omitempty"`
	FaceId      []byte `protobuf:"bytes,4,opt,name=face_id,json=faceId,proto3" json:"face_id,omitempty"`
	TabId       uint32 `protobuf:"varint,5,opt,name=tab_id,json=tabId,proto3" json:"tab_id,omitempty"`
	SubType     uint32 `protobuf:"varint,6,opt,name=sub_type,json=subType,proto3" json:"sub_type,omitempty"`
	Key         []byte `protobuf:"bytes,7,opt,name=key,proto3" json:"key,omitempty"`
	Param       []byte `protobuf:"bytes,8,opt,name=param,proto3" json:"param,omitempty"`
	MediaType   uint32 `protobuf:"varint,9,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
	ImageWidth  uint32 `protobuf:"varint,10,opt,name=image_width,json=imageWidth,proto3" json:"image_width,omitempty"`
	ImageHeight uint32 `protobuf:"varint,11,opt,name=image_height,json=imageHeight,proto3" json:"image_height,omitempty"`
	MobileParam []byte `protobuf:"bytes,12,opt,name=mobile_param,json=mobileParam,proto3" json:"mobile_param,omitempty"`
}

func (x *MarketFace) Reset() {
	*x = MarketFace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketFace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketFace) ProtoMessage() {}

func (x *MarketFace) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketFace.ProtoReflect.Descriptor instead.
func (*MarketFace) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{18}
}

func (x *MarketFace) GetFaceName() []byte {
	if x != nil {
		return x.FaceName
	}
	return nil
}

func (x *MarketFace) GetItemType() uint32 {
	if x != nil {
		return x.ItemType
	}
	return 0
}

func (x *MarketFace) GetFaceInfo() uint32 {
	if x != nil {
		return x.FaceInfo
	}
	return 0
}

func (x *MarketFace) GetFaceId() []byte {
	if x != nil {
		return x.FaceId
	}
	return nil
}

func (x *MarketFace) GetTabId() uint32 {
	if x != nil {
		return x.TabId
	}
	return 0
}

func (x *MarketFace) GetSubType() uint32 {
	if x != nil {
		return x.SubType
	}
	return 0
}

func (x *MarketFace) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *MarketFace) GetParam() []byte {
	if x != nil {
		return x.Param
	}
	return nil
}

func (x *MarketFace) GetMediaType() uint32 {
	if x != nil {
		return x.MediaType
	}
	return 0
}

func (x *MarketFace) GetImageWidth() uint32 {
	if x != nil {
		return x.ImageWidth
	}
	return 0
}

func (x *MarketFace) GetImageHeight() uint32 {
	if x != nil {
		return x.ImageHeight
	}
	return 0
}

func (x *MarketFace) GetMobileParam() []byte {
	if x != nil {
		return x.MobileParam
	}
	return nil
}

type MarketTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flag       int32  `protobuf:"varint,1,opt,name=flag,proto3" json:"flag,omitempty"`
	Xml        []byte `protobuf:"bytes,2,opt,name=xml,proto3" json:"xml,omitempty"`
	ResourceId []byte `protobuf:"bytes,3,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	Ability    uint32 `protobuf:"varint,4,opt,name=ability,proto3" json:"ability,omitempty"`
	MinAbility uint32 `protobuf:"varint,5,opt,name=min_ability,json=minAbility,proto3" json:"min_ability,omitempty"`
}

func (x *MarketTransfer) Reset() {
	*x = MarketTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketTransfer) ProtoMessage() {}

func (x *MarketTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketTransfer.ProtoReflect.Descriptor instead.
func (*MarketTransfer) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{19}
}

func (x *MarketTransfer) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *MarketTransfer) GetXml() []byte {
	if x != nil {
		return x.Xml
	}
	return nil
}

func (x *MarketTransfer) GetResourceId() []byte {
	if x != nil {
		return x.ResourceId
	}
	return nil
}

func (x *MarketTransfer) GetAbility() uint32 {
	if x != nil {
		return x.Ability
	}
	return 0
}

func (x *MarketTransfer) GetMinAbility() uint32 {
	if x != nil {
		return x.MinAbility
	}
	return 0
}

type MessageBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RichText       *RichText `protobuf:"bytes,1,opt,name=rich_text,json=richText,proto3" json:"rich_text,omitempty"`
	MessageContent []byte    `protobuf:"bytes,2,opt,name=message_content,json=messageContent,proto3" json:"message_content,omitempty"`
}

func (x *MessageBody) Reset() {
	*x = MessageBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageBody) ProtoMessage() {}

func (x *MessageBody) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageBody.ProtoReflect.Descriptor instead.
func (*MessageBody) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{20}
}

func (x *MessageBody) GetRichText() *RichText {
	if x != nil {
		return x.RichText
	}
	return nil
}

func (x *MessageBody) GetMessageContent() []byte {
	if x != nil {
		return x.MessageContent
	}
	return nil
}

type NotOnlineFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileType    uint32 `protobuf:"varint,1,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
	Sig         []byte `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
	FileUuid    []byte `protobuf:"bytes,3,opt,name=file_uuid,json=fileUuid,proto3" json:"file_uuid,omitempty"`
	FileMd5     []byte `protobuf:"bytes,4,opt,name=file_md5,json=fileMd5,proto3" json:"file_md5,omitempty"`
	FileName    []byte `protobuf:"bytes,5,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FileSize    uint64 `protobuf:"varint,6,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	Note        []byte `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`
	Reserved    uint32 `protobuf:"varint,8,opt,name=reserved,proto3" json:"reserved,omitempty"`
	SubCmd      uint32 `protobuf:"varint,9,opt,name=sub_cmd,json=subCmd,proto3" json:"sub_cmd,omitempty"`
	MicroCloud  uint32 `protobuf:"varint,10,opt,name=micro_cloud,json=microCloud,proto3" json:"micro_cloud,omitempty"`
	DangerEvel  uint32 `protobuf:"varint,11,opt,name=danger_evel,json=dangerEvel,proto3" json:"danger_evel,omitempty"`
	LifeTime    uint32 `protobuf:"varint,12,opt,name=life_time,json=lifeTime,proto3" json:"life_time,omitempty"`
	UploadTime  uint32 `protobuf:"varint,13,opt,name=upload_time,json=uploadTime,proto3" json:"upload_time,omitempty"`
	AbsAileType uint32 `protobuf:"varint,14,opt,name=absAile_type,json=absAileType,proto3" json:"absAile_type,omitempty"`
	ClientType  uint32 `protobuf:"varint,15,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
	ExpireTime  uint32 `protobuf:"varint,16,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
}

func (x *NotOnlineFile) Reset() {
	*x = NotOnlineFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotOnlineFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotOnlineFile) ProtoMessage() {}

func (x *NotOnlineFile) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotOnlineFile.ProtoReflect.Descriptor instead.
func (*NotOnlineFile) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{21}
}

func (x *NotOnlineFile) GetFileType() uint32 {
	if x != nil {
		return x.FileType
	}
	return 0
}

func (x *NotOnlineFile) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

func (x *NotOnlineFile) GetFileUuid() []byte {
	if x != nil {
		return x.FileUuid
	}
	return nil
}

func (x *NotOnlineFile) GetFileMd5() []byte {
	if x != nil {
		return x.FileMd5
	}
	return nil
}

func (x *NotOnlineFile) GetFileName() []byte {
	if x != nil {
		return x.FileName
	}
	return nil
}

func (x *NotOnlineFile) GetFileSize() uint64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *NotOnlineFile) GetNote() []byte {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *NotOnlineFile) GetReserved() uint32 {
	if x != nil {
		return x.Reserved
	}
	return 0
}

func (x *NotOnlineFile) GetSubCmd() uint32 {
	if x != nil {
		return x.SubCmd
	}
	return 0
}

func (x *NotOnlineFile) GetMicroCloud() uint32 {
	if x != nil {
		return x.MicroCloud
	}
	return 0
}

func (x *NotOnlineFile) GetDangerEvel() uint32 {
	if x != nil {
		return x.DangerEvel
	}
	return 0
}

func (x *NotOnlineFile) GetLifeTime() uint32 {
	if x != nil {
		return x.LifeTime
	}
	return 0
}

func (x *NotOnlineFile) GetUploadTime() uint32 {
	if x != nil {
		return x.UploadTime
	}
	return 0
}

func (x *NotOnlineFile) GetAbsAileType() uint32 {
	if x != nil {
		return x.AbsAileType
	}
	return 0
}

func (x *NotOnlineFile) GetClientType() uint32 {
	if x != nil {
		return x.ClientType
	}
	return 0
}

func (x *NotOnlineFile) GetExpireTime() uint32 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

type NotOnlineImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath      []byte `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	FileLen       uint32 `protobuf:"varint,2,opt,name=file_len,json=fileLen,proto3" json:"file_len,omitempty"`
	DownloadPath  []byte `protobuf:"bytes,3,opt,name=download_path,json=downloadPath,proto3" json:"download_path,omitempty"`
	SendFile      []byte `protobuf:"bytes,4,opt,name=send_file,json=sendFile,proto3" json:"send_file,omitempty"`
	ImgType       uint32 `protobuf:"varint,5,opt,name=img_type,json=imgType,proto3" json:"img_type,omitempty"`
	PreviewsImage []byte `protobuf:"bytes,6,opt,name=previews_image,json=previewsImage,proto3" json:"previews_image,omitempty"`
	PicMd5        []byte `protobuf:"bytes,7,opt,name=pic_md5,json=picMd5,proto3" json:"pic_md5,omitempty"`
	PicHeight     uint32 `protobuf:"varint,8,opt,name=pic_height,json=picHeight,proto3" json:"pic_height,omitempty"`
	PicWidth      uint32 `protobuf:"varint,9,opt,name=pic_width,json=picWidth,proto3" json:"pic_width,omitempty"`
	ResourceId    []byte `protobuf:"bytes,10,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	Flag          []byte `protobuf:"bytes,11,opt,name=flag,proto3" json:"flag,omitempty"`
	ThumbUrl      string `protobuf:"bytes,12,opt,name=thumb_url,json=thumbUrl,proto3" json:"thumb_url,omitempty"`
	Original      uint32 `protobuf:"varint,13,opt,name=original,proto3" json:"original,omitempty"`
	BigUrl        string `protobuf:"bytes,14,opt,name=big_url,json=bigUrl,proto3" json:"big_url,omitempty"`
	OrigUrl       string `protobuf:"bytes,15,opt,name=orig_url,json=origUrl,proto3" json:"orig_url,omitempty"`
	BizType       uint32 `protobuf:"varint,16,opt,name=biz_type,json=bizType,proto3" json:"biz_type,omitempty"`
	Result        uint32 `protobuf:"varint,17,opt,name=result,proto3" json:"result,omitempty"`
	Index         uint32 `protobuf:"varint,18,opt,name=index,proto3" json:"index,omitempty"`
	OpAceBuffer   []byte `protobuf:"bytes,19,opt,name=op_ace_buffer,json=opAceBuffer,proto3" json:"op_ace_buffer,omitempty"`
	OldPicMd5     bool   `protobuf:"varint,20,opt,name=old_pic_md5,json=oldPicMd5,proto3" json:"old_pic_md5,omitempty"`
	ThumbWidth    uint32 `protobuf:"varint,21,opt,name=thumb_width,json=thumbWidth,proto3" json:"thumb_width,omitempty"`
	ThumbHeight   uint32 `protobuf:"varint,22,opt,name=thumb_height,json=thumbHeight,proto3" json:"thumb_height,omitempty"`
	FileId        uint32 `protobuf:"varint,23,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	ShowLen       uint32 `protobuf:"varint,24,opt,name=show_len,json=showLen,proto3" json:"show_len,omitempty"`
	DownloadLen   uint32 `protobuf:"varint,25,opt,name=download_len,json=downloadLen,proto3" json:"download_len,omitempty"`
}

func (x *NotOnlineImage) Reset() {
	*x = NotOnlineImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotOnlineImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotOnlineImage) ProtoMessage() {}

func (x *NotOnlineImage) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotOnlineImage.ProtoReflect.Descriptor instead.
func (*NotOnlineImage) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{22}
}

func (x *NotOnlineImage) GetFilePath() []byte {
	if x != nil {
		return x.FilePath
	}
	return nil
}

func (x *NotOnlineImage) GetFileLen() uint32 {
	if x != nil {
		return x.FileLen
	}
	return 0
}

func (x *NotOnlineImage) GetDownloadPath() []byte {
	if x != nil {
		return x.DownloadPath
	}
	return nil
}

func (x *NotOnlineImage) GetSendFile() []byte {
	if x != nil {
		return x.SendFile
	}
	return nil
}

func (x *NotOnlineImage) GetImgType() uint32 {
	if x != nil {
		return x.ImgType
	}
	return 0
}

func (x *NotOnlineImage) GetPreviewsImage() []byte {
	if x != nil {
		return x.PreviewsImage
	}
	return nil
}

func (x *NotOnlineImage) GetPicMd5() []byte {
	if x != nil {
		return x.PicMd5
	}
	return nil
}

func (x *NotOnlineImage) GetPicHeight() uint32 {
	if x != nil {
		return x.PicHeight
	}
	return 0
}

func (x *NotOnlineImage) GetPicWidth() uint32 {
	if x != nil {
		return x.PicWidth
	}
	return 0
}

func (x *NotOnlineImage) GetResourceId() []byte {
	if x != nil {
		return x.ResourceId
	}
	return nil
}

func (x *NotOnlineImage) GetFlag() []byte {
	if x != nil {
		return x.Flag
	}
	return nil
}

func (x *NotOnlineImage) GetThumbUrl() string {
	if x != nil {
		return x.ThumbUrl
	}
	return ""
}

func (x *NotOnlineImage) GetOriginal() uint32 {
	if x != nil {
		return x.Original
	}
	return 0
}

func (x *NotOnlineImage) GetBigUrl() string {
	if x != nil {
		return x.BigUrl
	}
	return ""
}

func (x *NotOnlineImage) GetOrigUrl() string {
	if x != nil {
		return x.OrigUrl
	}
	return ""
}

func (x *NotOnlineImage) GetBizType() uint32 {
	if x != nil {
		return x.BizType
	}
	return 0
}

func (x *NotOnlineImage) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *NotOnlineImage) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *NotOnlineImage) GetOpAceBuffer() []byte {
	if x != nil {
		return x.OpAceBuffer
	}
	return nil
}

func (x *NotOnlineImage) GetOldPicMd5() bool {
	if x != nil {
		return x.OldPicMd5
	}
	return false
}

func (x *NotOnlineImage) GetThumbWidth() uint32 {
	if x != nil {
		return x.ThumbWidth
	}
	return 0
}

func (x *NotOnlineImage) GetThumbHeight() uint32 {
	if x != nil {
		return x.ThumbHeight
	}
	return 0
}

func (x *NotOnlineImage) GetFileId() uint32 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *NotOnlineImage) GetShowLen() uint32 {
	if x != nil {
		return x.ShowLen
	}
	return 0
}

func (x *NotOnlineImage) GetDownloadLen() uint32 {
	if x != nil {
		return x.DownloadLen
	}
	return 0
}

type OnlineImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid     []byte `protobuf:"bytes,1,opt,name=guid,proto3" json:"guid,omitempty"`
	FilePath []byte `protobuf:"bytes,2,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	SendFile []byte `protobuf:"bytes,3,opt,name=send_file,json=sendFile,proto3" json:"send_file,omitempty"`
}

func (x *OnlineImage) Reset() {
	*x = OnlineImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineImage) ProtoMessage() {}

func (x *OnlineImage) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineImage.ProtoReflect.Descriptor instead.
func (*OnlineImage) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{23}
}

func (x *OnlineImage) GetGuid() []byte {
	if x != nil {
		return x.Guid
	}
	return nil
}

func (x *OnlineImage) GetFilePath() []byte {
	if x != nil {
		return x.FilePath
	}
	return nil
}

func (x *OnlineImage) GetSendFile() []byte {
	if x != nil {
		return x.SendFile
	}
	return nil
}

type PCSupportDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PcPtlBegin     uint32   `protobuf:"varint,1,opt,name=pc_ptl_begin,json=pcPtlBegin,proto3" json:"pc_ptl_begin,omitempty"`
	PcPtlEnd       uint32   `protobuf:"varint,2,opt,name=pc_ptl_end,json=pcPtlEnd,proto3" json:"pc_ptl_end,omitempty"`
	MacPtlBegin    uint32   `protobuf:"varint,3,opt,name=mac_ptl_begin,json=macPtlBegin,proto3" json:"mac_ptl_begin,omitempty"`
	MacPtlEnd      uint32   `protobuf:"varint,4,opt,name=mac_ptl_end,json=macPtlEnd,proto3" json:"mac_ptl_end,omitempty"`
	PtlsSupport    []uint32 `protobuf:"varint,5,rep,packed,name=ptls_support,json=ptlsSupport,proto3" json:"ptls_support,omitempty"`
	PtlsNotSupport []uint32 `protobuf:"varint,6,rep,packed,name=ptls_not_support,json=ptlsNotSupport,proto3" json:"ptls_not_support,omitempty"`
}

func (x *PCSupportDef) Reset() {
	*x = PCSupportDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PCSupportDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PCSupportDef) ProtoMessage() {}

func (x *PCSupportDef) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PCSupportDef.ProtoReflect.Descriptor instead.
func (*PCSupportDef) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{24}
}

func (x *PCSupportDef) GetPcPtlBegin() uint32 {
	if x != nil {
		return x.PcPtlBegin
	}
	return 0
}

func (x *PCSupportDef) GetPcPtlEnd() uint32 {
	if x != nil {
		return x.PcPtlEnd
	}
	return 0
}

func (x *PCSupportDef) GetMacPtlBegin() uint32 {
	if x != nil {
		return x.MacPtlBegin
	}
	return 0
}

func (x *PCSupportDef) GetMacPtlEnd() uint32 {
	if x != nil {
		return x.MacPtlEnd
	}
	return 0
}

func (x *PCSupportDef) GetPtlsSupport() []uint32 {
	if x != nil {
		return x.PtlsSupport
	}
	return nil
}

func (x *PCSupportDef) GetPtlsNotSupport() []uint32 {
	if x != nil {
		return x.PtlsNotSupport
	}
	return nil
}

type PTT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileType      uint32 `protobuf:"varint,1,opt,name=fileType,proto3" json:"fileType,omitempty"`
	SrcUin        uint64 `protobuf:"varint,2,opt,name=src_uin,json=srcUin,proto3" json:"src_uin,omitempty"`
	FileUuid      []byte `protobuf:"bytes,3,opt,name=file_uuid,json=fileUuid,proto3" json:"file_uuid,omitempty"`
	FileMd5       []byte `protobuf:"bytes,4,opt,name=fileMd5,proto3" json:"fileMd5,omitempty"`
	FileName      []byte `protobuf:"bytes,5,opt,name=fileName,proto3" json:"fileName,omitempty"`
	FileSize      uint32 `protobuf:"varint,6,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
	ReserveData   []byte `protobuf:"bytes,7,opt,name=reserveData,proto3" json:"reserveData,omitempty"`
	FileId        uint32 `protobuf:"varint,8,opt,name=fileId,proto3" json:"fileId,omitempty"`
	ServerIp      uint32 `protobuf:"varint,9,opt,name=serverIp,proto3" json:"serverIp,omitempty"`
	ServerPort    uint32 `protobuf:"varint,10,opt,name=serverPort,proto3" json:"serverPort,omitempty"`
	Valid         bool   `protobuf:"varint,11,opt,name=valid,proto3" json:"valid,omitempty"`
	Signature     []byte `protobuf:"bytes,12,opt,name=signature,proto3" json:"signature,omitempty"`
	Shortcut      []byte `protobuf:"bytes,13,opt,name=shortcut,proto3" json:"shortcut,omitempty"`
	FileKey       []byte `protobuf:"bytes,14,opt,name=fileKey,proto3" json:"fileKey,omitempty"`
	MagicPttIndex uint32 `protobuf:"varint,15,opt,name=magicPttIndex,proto3" json:"magicPttIndex,omitempty"`
	VoiceSwitch   uint32 `protobuf:"varint,16,opt,name=voiceSwitch,proto3" json:"voiceSwitch,omitempty"`
	PttUrl        []byte `protobuf:"bytes,17,opt,name=ptt_url,json=pttUrl,proto3" json:"ptt_url,omitempty"`
	GroupAileKey  []byte `protobuf:"bytes,18,opt,name=groupAileKey,proto3" json:"groupAileKey,omitempty"`
}

func (x *PTT) Reset() {
	*x = PTT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PTT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PTT) ProtoMessage() {}

func (x *PTT) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PTT.ProtoReflect.Descriptor instead.
func (*PTT) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{25}
}

func (x *PTT) GetFileType() uint32 {
	if x != nil {
		return x.FileType
	}
	return 0
}

func (x *PTT) GetSrcUin() uint64 {
	if x != nil {
		return x.SrcUin
	}
	return 0
}

func (x *PTT) GetFileUuid() []byte {
	if x != nil {
		return x.FileUuid
	}
	return nil
}

func (x *PTT) GetFileMd5() []byte {
	if x != nil {
		return x.FileMd5
	}
	return nil
}

func (x *PTT) GetFileName() []byte {
	if x != nil {
		return x.FileName
	}
	return nil
}

func (x *PTT) GetFileSize() uint32 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *PTT) GetReserveData() []byte {
	if x != nil {
		return x.ReserveData
	}
	return nil
}

func (x *PTT) GetFileId() uint32 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *PTT) GetServerIp() uint32 {
	if x != nil {
		return x.ServerIp
	}
	return 0
}

func (x *PTT) GetServerPort() uint32 {
	if x != nil {
		return x.ServerPort
	}
	return 0
}

func (x *PTT) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *PTT) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *PTT) GetShortcut() []byte {
	if x != nil {
		return x.Shortcut
	}
	return nil
}

func (x *PTT) GetFileKey() []byte {
	if x != nil {
		return x.FileKey
	}
	return nil
}

func (x *PTT) GetMagicPttIndex() uint32 {
	if x != nil {
		return x.MagicPttIndex
	}
	return 0
}

func (x *PTT) GetVoiceSwitch() uint32 {
	if x != nil {
		return x.VoiceSwitch
	}
	return 0
}

func (x *PTT) GetPttUrl() []byte {
	if x != nil {
		return x.PttUrl
	}
	return nil
}

func (x *PTT) GetGroupAileKey() []byte {
	if x != nil {
		return x.GroupAileKey
	}
	return nil
}

type PublicAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buf []byte `protobuf:"bytes,1,opt,name=buf,proto3" json:"buf,omitempty"`
}

func (x *PublicAccount) Reset() {
	*x = PublicAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicAccount) ProtoMessage() {}

func (x *PublicAccount) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicAccount.ProtoReflect.Descriptor instead.
func (*PublicAccount) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{26}
}

func (x *PublicAccount) GetBuf() []byte {
	if x != nil {
		return x.Buf
	}
	return nil
}

type PublicGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nickname []byte `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Gender   uint32 `protobuf:"varint,2,opt,name=gender,proto3" json:"gender,omitempty"`
	Age      uint32 `protobuf:"varint,3,opt,name=age,proto3" json:"age,omitempty"`
	Distance uint32 `protobuf:"varint,4,opt,name=distance,proto3" json:"distance,omitempty"`
}

func (x *PublicGroup) Reset() {
	*x = PublicGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicGroup) ProtoMessage() {}

func (x *PublicGroup) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicGroup.ProtoReflect.Descriptor instead.
func (*PublicGroup) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{27}
}

func (x *PublicGroup) GetNickname() []byte {
	if x != nil {
		return x.Nickname
	}
	return nil
}

func (x *PublicGroup) GetGender() uint32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *PublicGroup) GetAge() uint32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *PublicGroup) GetDistance() uint32 {
	if x != nil {
		return x.Distance
	}
	return 0
}

type QQLiveOld struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubCmd    uint32 `protobuf:"varint,1,opt,name=subCmd,proto3" json:"subCmd,omitempty"`
	ShowText  string `protobuf:"bytes,2,opt,name=showText,proto3" json:"showText,omitempty"`
	Param     string `protobuf:"bytes,3,opt,name=param,proto3" json:"param,omitempty"`
	Introduce string `protobuf:"bytes,4,opt,name=introduce,proto3" json:"introduce,omitempty"`
}

func (x *QQLiveOld) Reset() {
	*x = QQLiveOld{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QQLiveOld) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QQLiveOld) ProtoMessage() {}

func (x *QQLiveOld) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QQLiveOld.ProtoReflect.Descriptor instead.
func (*QQLiveOld) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{28}
}

func (x *QQLiveOld) GetSubCmd() uint32 {
	if x != nil {
		return x.SubCmd
	}
	return 0
}

func (x *QQLiveOld) GetShowText() string {
	if x != nil {
		return x.ShowText
	}
	return ""
}

func (x *QQLiveOld) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *QQLiveOld) GetIntroduce() string {
	if x != nil {
		return x.Introduce
	}
	return ""
}

type QQWalletAIOBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Senduin     uint64              `protobuf:"varint,1,opt,name=senduin,proto3" json:"senduin,omitempty"`
	Sender      *QQWalletAIOElement `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	Receiver    *QQWalletAIOElement `protobuf:"bytes,3,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Channelid   int32               `protobuf:"zigzag32,4,opt,name=channelid,proto3" json:"channelid,omitempty"`
	Templateid  int32               `protobuf:"zigzag32,5,opt,name=templateid,proto3" json:"templateid,omitempty"`
	Resend      uint32              `protobuf:"varint,6,opt,name=resend,proto3" json:"resend,omitempty"`
	MsgPriority uint32              `protobuf:"varint,7,opt,name=msg_priority,json=msgPriority,proto3" json:"msg_priority,omitempty"`
	Redtype     int32               `protobuf:"zigzag32,8,opt,name=redtype,proto3" json:"redtype,omitempty"`
	Billno      []byte              `protobuf:"bytes,9,opt,name=billno,proto3" json:"billno,omitempty"`
	Authkey     []byte              `protobuf:"bytes,10,opt,name=authkey,proto3" json:"authkey,omitempty"`
	Sessiontype int32               `protobuf:"zigzag32,11,opt,name=sessiontype,proto3" json:"sessiontype,omitempty"`
	Msgtype     int32               `protobuf:"zigzag32,12,opt,name=msgtype,proto3" json:"msgtype,omitempty"`
	Envelopeid  int32               `protobuf:"zigzag32,13,opt,name=envelopeid,proto3" json:"envelopeid,omitempty"`
	Name        []byte              `protobuf:"bytes,14,opt,name=name,proto3" json:"name,omitempty"`
	Conftype    int32               `protobuf:"zigzag32,15,opt,name=conftype,proto3" json:"conftype,omitempty"`
	MsgFrom     int32               `protobuf:"zigzag32,16,opt,name=msg_from,json=msgFrom,proto3" json:"msg_from,omitempty"`
	PcBody      []byte              `protobuf:"bytes,17,opt,name=pc_body,json=pcBody,proto3" json:"pc_body,omitempty"`
	Index       string              `protobuf:"bytes,18,opt,name=index,proto3" json:"index,omitempty"`
	Redchannel  uint32              `protobuf:"varint,19,opt,name=redchannel,proto3" json:"redchannel,omitempty"`
	GrapUin     uint64              `protobuf:"varint,20,opt,name=grap_uin,json=grapUin,proto3" json:"grap_uin,omitempty"`
	PbReserve   []byte              `protobuf:"bytes,21,opt,name=pb_reserve,json=pbReserve,proto3" json:"pb_reserve,omitempty"`
}

func (x *QQWalletAIOBody) Reset() {
	*x = QQWalletAIOBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QQWalletAIOBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QQWalletAIOBody) ProtoMessage() {}

func (x *QQWalletAIOBody) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QQWalletAIOBody.ProtoReflect.Descriptor instead.
func (*QQWalletAIOBody) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{29}
}

func (x *QQWalletAIOBody) GetSenduin() uint64 {
	if x != nil {
		return x.Senduin
	}
	return 0
}

func (x *QQWalletAIOBody) GetSender() *QQWalletAIOElement {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *QQWalletAIOBody) GetReceiver() *QQWalletAIOElement {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *QQWalletAIOBody) GetChannelid() int32 {
	if x != nil {
		return x.Channelid
	}
	return 0
}

func (x *QQWalletAIOBody) GetTemplateid() int32 {
	if x != nil {
		return x.Templateid
	}
	return 0
}

func (x *QQWalletAIOBody) GetResend() uint32 {
	if x != nil {
		return x.Resend
	}
	return 0
}

func (x *QQWalletAIOBody) GetMsgPriority() uint32 {
	if x != nil {
		return x.MsgPriority
	}
	return 0
}

func (x *QQWalletAIOBody) GetRedtype() int32 {
	if x != nil {
		return x.Redtype
	}
	return 0
}

func (x *QQWalletAIOBody) GetBillno() []byte {
	if x != nil {
		return x.Billno
	}
	return nil
}

func (x *QQWalletAIOBody) GetAuthkey() []byte {
	if x != nil {
		return x.Authkey
	}
	return nil
}

func (x *QQWalletAIOBody) GetSessiontype() int32 {
	if x != nil {
		return x.Sessiontype
	}
	return 0
}

func (x *QQWalletAIOBody) GetMsgtype() int32 {
	if x != nil {
		return x.Msgtype
	}
	return 0
}

func (x *QQWalletAIOBody) GetEnvelopeid() int32 {
	if x != nil {
		return x.Envelopeid
	}
	return 0
}

func (x *QQWalletAIOBody) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *QQWalletAIOBody) GetConftype() int32 {
	if x != nil {
		return x.Conftype
	}
	return 0
}

func (x *QQWalletAIOBody) GetMsgFrom() int32 {
	if x != nil {
		return x.MsgFrom
	}
	return 0
}

func (x *QQWalletAIOBody) GetPcBody() []byte {
	if x != nil {
		return x.PcBody
	}
	return nil
}

func (x *QQWalletAIOBody) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *QQWalletAIOBody) GetRedchannel() uint32 {
	if x != nil {
		return x.Redchannel
	}
	return 0
}

func (x *QQWalletAIOBody) GetGrapUin() uint64 {
	if x != nil {
		return x.GrapUin
	}
	return 0
}

func (x *QQWalletAIOBody) GetPbReserve() []byte {
	if x != nil {
		return x.PbReserve
	}
	return nil
}

type QQWalletAIOElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Background      uint32 `protobuf:"varint,1,opt,name=background,proto3" json:"background,omitempty"`
	Icon            uint32 `protobuf:"varint,2,opt,name=icon,proto3" json:"icon,omitempty"`
	Title           []byte `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Subtitle        []byte `protobuf:"bytes,4,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	Content         []byte `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	Linkurl         []byte `protobuf:"bytes,6,opt,name=linkurl,proto3" json:"linkurl,omitempty"`
	Blackstripe     []byte `protobuf:"bytes,7,opt,name=blackstripe,proto3" json:"blackstripe,omitempty"`
	Notice          []byte `protobuf:"bytes,8,opt,name=notice,proto3" json:"notice,omitempty"`
	TitleColor      uint32 `protobuf:"varint,9,opt,name=title_color,json=titleColor,proto3" json:"title_color,omitempty"`
	SubtitleColor   uint32 `protobuf:"varint,10,opt,name=subtitle_color,json=subtitleColor,proto3" json:"subtitle_color,omitempty"`
	ActionsPriority []byte `protobuf:"bytes,11,opt,name=actions_priority,json=actionsPriority,proto3" json:"actions_priority,omitempty"`
	JumpUrl         []byte `protobuf:"bytes,12,opt,name=jump_url,json=jumpUrl,proto3" json:"jump_url,omitempty"`
	NativeIos       []byte `protobuf:"bytes,13,opt,name=native_ios,json=nativeIos,proto3" json:"native_ios,omitempty"`
	NativeAndroid   []byte `protobuf:"bytes,14,opt,name=native_android,json=nativeAndroid,proto3" json:"native_android,omitempty"`
	Iconurl         []byte `protobuf:"bytes,15,opt,name=iconurl,proto3" json:"iconurl,omitempty"`
	ContentColor    uint32 `protobuf:"varint,16,opt,name=content_color,json=contentColor,proto3" json:"content_color,omitempty"`
	ContentBgcolor  uint32 `protobuf:"varint,17,opt,name=content_bgcolor,json=contentBgcolor,proto3" json:"content_bgcolor,omitempty"`
	AioImageLeft    []byte `protobuf:"bytes,18,opt,name=aio_image_left,json=aioImageLeft,proto3" json:"aio_image_left,omitempty"`
	AioImageRight   []byte `protobuf:"bytes,19,opt,name=aio_image_right,json=aioImageRight,proto3" json:"aio_image_right,omitempty"`
	CftImage        []byte `protobuf:"bytes,20,opt,name=cft_image,json=cftImage,proto3" json:"cft_image,omitempty"`
	PbReserve       []byte `protobuf:"bytes,21,opt,name=pb_reserve,json=pbReserve,proto3" json:"pb_reserve,omitempty"`
}

func (x *QQWalletAIOElement) Reset() {
	*x = QQWalletAIOElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QQWalletAIOElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QQWalletAIOElement) ProtoMessage() {}

func (x *QQWalletAIOElement) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QQWalletAIOElement.ProtoReflect.Descriptor instead.
func (*QQWalletAIOElement) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{30}
}

func (x *QQWalletAIOElement) GetBackground() uint32 {
	if x != nil {
		return x.Background
	}
	return 0
}

func (x *QQWalletAIOElement) GetIcon() uint32 {
	if x != nil {
		return x.Icon
	}
	return 0
}

func (x *QQWalletAIOElement) GetTitle() []byte {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *QQWalletAIOElement) GetSubtitle() []byte {
	if x != nil {
		return x.Subtitle
	}
	return nil
}

func (x *QQWalletAIOElement) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *QQWalletAIOElement) GetLinkurl() []byte {
	if x != nil {
		return x.Linkurl
	}
	return nil
}

func (x *QQWalletAIOElement) GetBlackstripe() []byte {
	if x != nil {
		return x.Blackstripe
	}
	return nil
}

func (x *QQWalletAIOElement) GetNotice() []byte {
	if x != nil {
		return x.Notice
	}
	return nil
}

func (x *QQWalletAIOElement) GetTitleColor() uint32 {
	if x != nil {
		return x.TitleColor
	}
	return 0
}

func (x *QQWalletAIOElement) GetSubtitleColor() uint32 {
	if x != nil {
		return x.SubtitleColor
	}
	return 0
}

func (x *QQWalletAIOElement) GetActionsPriority() []byte {
	if x != nil {
		return x.ActionsPriority
	}
	return nil
}

func (x *QQWalletAIOElement) GetJumpUrl() []byte {
	if x != nil {
		return x.JumpUrl
	}
	return nil
}

func (x *QQWalletAIOElement) GetNativeIos() []byte {
	if x != nil {
		return x.NativeIos
	}
	return nil
}

func (x *QQWalletAIOElement) GetNativeAndroid() []byte {
	if x != nil {
		return x.NativeAndroid
	}
	return nil
}

func (x *QQWalletAIOElement) GetIconurl() []byte {
	if x != nil {
		return x.Iconurl
	}
	return nil
}

func (x *QQWalletAIOElement) GetContentColor() uint32 {
	if x != nil {
		return x.ContentColor
	}
	return 0
}

func (x *QQWalletAIOElement) GetContentBgcolor() uint32 {
	if x != nil {
		return x.ContentBgcolor
	}
	return 0
}

func (x *QQWalletAIOElement) GetAioImageLeft() []byte {
	if x != nil {
		return x.AioImageLeft
	}
	return nil
}

func (x *QQWalletAIOElement) GetAioImageRight() []byte {
	if x != nil {
		return x.AioImageRight
	}
	return nil
}

func (x *QQWalletAIOElement) GetCftImage() []byte {
	if x != nil {
		return x.CftImage
	}
	return nil
}

func (x *QQWalletAIOElement) GetPbReserve() []byte {
	if x != nil {
		return x.PbReserve
	}
	return nil
}

type QQWalletMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body *QQWalletAIOBody `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *QQWalletMessage) Reset() {
	*x = QQWalletMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QQWalletMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QQWalletMessage) ProtoMessage() {}

func (x *QQWalletMessage) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QQWalletMessage.ProtoReflect.Descriptor instead.
func (*QQWalletMessage) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{31}
}

func (x *QQWalletMessage) GetBody() *QQWalletAIOBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type RedBagInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedBagType uint32 `protobuf:"varint,1,opt,name=red_bag_type,json=redBagType,proto3" json:"red_bag_type,omitempty"`
}

func (x *RedBagInfo) Reset() {
	*x = RedBagInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedBagInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedBagInfo) ProtoMessage() {}

func (x *RedBagInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedBagInfo.ProtoReflect.Descriptor instead.
func (*RedBagInfo) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{32}
}

func (x *RedBagInfo) GetRedBagType() uint32 {
	if x != nil {
		return x.RedBagType
	}
	return 0
}

type RichMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Template1    []byte `protobuf:"bytes,1,opt,name=template1,proto3" json:"template1,omitempty"`
	ServiceId    uint32 `protobuf:"varint,2,opt,name=serviceId,proto3" json:"serviceId,omitempty"`
	MessageResId []byte `protobuf:"bytes,3,opt,name=messageResId,proto3" json:"messageResId,omitempty"`
	Rand         uint32 `protobuf:"varint,4,opt,name=rand,proto3" json:"rand,omitempty"`
	Seq          uint32 `protobuf:"varint,5,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *RichMessage) Reset() {
	*x = RichMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RichMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RichMessage) ProtoMessage() {}

func (x *RichMessage) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RichMessage.ProtoReflect.Descriptor instead.
func (*RichMessage) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{33}
}

func (x *RichMessage) GetTemplate1() []byte {
	if x != nil {
		return x.Template1
	}
	return nil
}

func (x *RichMessage) GetServiceId() uint32 {
	if x != nil {
		return x.ServiceId
	}
	return 0
}

func (x *RichMessage) GetMessageResId() []byte {
	if x != nil {
		return x.MessageResId
	}
	return nil
}

func (x *RichMessage) GetRand() uint32 {
	if x != nil {
		return x.Rand
	}
	return 0
}

func (x *RichMessage) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

type RichText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attribute           *Attribute           `protobuf:"bytes,1,opt,name=attribute,proto3" json:"attribute,omitempty"`
	Elements            []*Element           `protobuf:"bytes,2,rep,name=elements,proto3" json:"elements,omitempty"`
	NotOnlineAile       *NotOnlineFile       `protobuf:"bytes,3,opt,name=notOnlineAile,proto3" json:"notOnlineAile,omitempty"`
	Ptt                 *PTT                 `protobuf:"bytes,4,opt,name=ptt,proto3" json:"ptt,omitempty"`
	TmpPtt              *TempPTT             `protobuf:"bytes,5,opt,name=tmpPtt,proto3" json:"tmpPtt,omitempty"`
	Trans_211TmpMessage *Trans211TempMessage `protobuf:"bytes,6,opt,name=trans_211TmpMessage,json=trans211TmpMessage,proto3" json:"trans_211TmpMessage,omitempty"`
}

func (x *RichText) Reset() {
	*x = RichText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RichText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RichText) ProtoMessage() {}

func (x *RichText) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RichText.ProtoReflect.Descriptor instead.
func (*RichText) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{34}
}

func (x *RichText) GetAttribute() *Attribute {
	if x != nil {
		return x.Attribute
	}
	return nil
}

func (x *RichText) GetElements() []*Element {
	if x != nil {
		return x.Elements
	}
	return nil
}

func (x *RichText) GetNotOnlineAile() *NotOnlineFile {
	if x != nil {
		return x.NotOnlineAile
	}
	return nil
}

func (x *RichText) GetPtt() *PTT {
	if x != nil {
		return x.Ptt
	}
	return nil
}

func (x *RichText) GetTmpPtt() *TempPTT {
	if x != nil {
		return x.TmpPtt
	}
	return nil
}

func (x *RichText) GetTrans_211TmpMessage() *Trans211TempMessage {
	if x != nil {
		return x.Trans_211TmpMessage
	}
	return nil
}

type SecretFileMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileKey              []byte          `protobuf:"bytes,1,opt,name=fileKey,proto3" json:"fileKey,omitempty"`
	FromUin              uint64          `protobuf:"varint,2,opt,name=from_uin,json=fromUin,proto3" json:"from_uin,omitempty"`
	ToUin                uint64          `protobuf:"varint,3,opt,name=to_uin,json=toUin,proto3" json:"to_uin,omitempty"`
	Status               uint32          `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	Ttl                  uint32          `protobuf:"varint,5,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Type                 uint32          `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`
	EncryptPreheadLength uint32          `protobuf:"varint,7,opt,name=encryptPreheadLength,proto3" json:"encryptPreheadLength,omitempty"`
	EncryptType          uint32          `protobuf:"varint,8,opt,name=encryptType,proto3" json:"encryptType,omitempty"`
	EncryptKey           []byte          `protobuf:"bytes,9,opt,name=encryptKey,proto3" json:"encryptKey,omitempty"`
	ReadTimes            uint32          `protobuf:"varint,10,opt,name=readTimes,proto3" json:"readTimes,omitempty"`
	LeftTime             uint32          `protobuf:"varint,11,opt,name=leftTime,proto3" json:"leftTime,omitempty"`
	NotOnlineImage       *NotOnlineImage `protobuf:"bytes,12,opt,name=notOnlineImage,proto3" json:"notOnlineImage,omitempty"`
	Flags2               *ElementFlags2  `protobuf:"bytes,13,opt,name=flags2,proto3" json:"flags2,omitempty"`
	Opertype             uint32          `protobuf:"varint,14,opt,name=opertype,proto3" json:"opertype,omitempty"`
	FromPhonenum         string          `protobuf:"bytes,15,opt,name=fromPhonenum,proto3" json:"fromPhonenum,omitempty"`
}

func (x *SecretFileMessage) Reset() {
	*x = SecretFileMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretFileMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretFileMessage) ProtoMessage() {}

func (x *SecretFileMessage) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretFileMessage.ProtoReflect.Descriptor instead.
func (*SecretFileMessage) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{35}
}

func (x *SecretFileMessage) GetFileKey() []byte {
	if x != nil {
		return x.FileKey
	}
	return nil
}

func (x *SecretFileMessage) GetFromUin() uint64 {
	if x != nil {
		return x.FromUin
	}
	return 0
}

func (x *SecretFileMessage) GetToUin() uint64 {
	if x != nil {
		return x.ToUin
	}
	return 0
}

func (x *SecretFileMessage) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SecretFileMessage) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *SecretFileMessage) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SecretFileMessage) GetEncryptPreheadLength() uint32 {
	if x != nil {
		return x.EncryptPreheadLength
	}
	return 0
}

func (x *SecretFileMessage) GetEncryptType() uint32 {
	if x != nil {
		return x.EncryptType
	}
	return 0
}

func (x *SecretFileMessage) GetEncryptKey() []byte {
	if x != nil {
		return x.EncryptKey
	}
	return nil
}

func (x *SecretFileMessage) GetReadTimes() uint32 {
	if x != nil {
		return x.ReadTimes
	}
	return 0
}

func (x *SecretFileMessage) GetLeftTime() uint32 {
	if x != nil {
		return x.LeftTime
	}
	return 0
}

func (x *SecretFileMessage) GetNotOnlineImage() *NotOnlineImage {
	if x != nil {
		return x.NotOnlineImage
	}
	return nil
}

func (x *SecretFileMessage) GetFlags2() *ElementFlags2 {
	if x != nil {
		return x.Flags2
	}
	return nil
}

func (x *SecretFileMessage) GetOpertype() uint32 {
	if x != nil {
		return x.Opertype
	}
	return 0
}

func (x *SecretFileMessage) GetFromPhonenum() string {
	if x != nil {
		return x.FromPhonenum
	}
	return ""
}

type ShakeWindow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Reserve uint32 `protobuf:"varint,2,opt,name=reserve,proto3" json:"reserve,omitempty"`
	Uin     uint64 `protobuf:"varint,3,opt,name=uin,proto3" json:"uin,omitempty"`
}

func (x *ShakeWindow) Reset() {
	*x = ShakeWindow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShakeWindow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShakeWindow) ProtoMessage() {}

func (x *ShakeWindow) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShakeWindow.ProtoReflect.Descriptor instead.
func (*ShakeWindow) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{36}
}

func (x *ShakeWindow) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ShakeWindow) GetReserve() uint32 {
	if x != nil {
		return x.Reserve
	}
	return 0
}

func (x *ShakeWindow) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

type SourceMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrigSeqs      []uint32   `protobuf:"varint,1,rep,packed,name=origSeqs,proto3" json:"origSeqs,omitempty"`
	FromUin       uint64     `protobuf:"varint,2,opt,name=from_uin,json=fromUin,proto3" json:"from_uin,omitempty"`
	Time          uint32     `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	Flag          uint32     `protobuf:"varint,4,opt,name=flag,proto3" json:"flag,omitempty"`
	Elements      []*Element `protobuf:"bytes,5,rep,name=elements,proto3" json:"elements,omitempty"`
	Type          uint32     `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`
	RichMessage   []byte     `protobuf:"bytes,7,opt,name=richMessage,proto3" json:"richMessage,omitempty"`
	Reserve       []byte     `protobuf:"bytes,8,opt,name=reserve,proto3" json:"reserve,omitempty"`
	SourceMessage []byte     `protobuf:"bytes,9,opt,name=sourceMessage,proto3" json:"sourceMessage,omitempty"`
	ToUin         uint64     `protobuf:"varint,10,opt,name=to_uin,json=toUin,proto3" json:"to_uin,omitempty"`
	GroupName     []byte     `protobuf:"bytes,11,opt,name=groupName,proto3" json:"groupName,omitempty"`
}

func (x *SourceMessage) Reset() {
	*x = SourceMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceMessage) ProtoMessage() {}

func (x *SourceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceMessage.ProtoReflect.Descriptor instead.
func (*SourceMessage) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{37}
}

func (x *SourceMessage) GetOrigSeqs() []uint32 {
	if x != nil {
		return x.OrigSeqs
	}
	return nil
}

func (x *SourceMessage) GetFromUin() uint64 {
	if x != nil {
		return x.FromUin
	}
	return 0
}

func (x *SourceMessage) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SourceMessage) GetFlag() uint32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *SourceMessage) GetElements() []*Element {
	if x != nil {
		return x.Elements
	}
	return nil
}

func (x *SourceMessage) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SourceMessage) GetRichMessage() []byte {
	if x != nil {
		return x.RichMessage
	}
	return nil
}

func (x *SourceMessage) GetReserve() []byte {
	if x != nil {
		return x.Reserve
	}
	return nil
}

func (x *SourceMessage) GetSourceMessage() []byte {
	if x != nil {
		return x.SourceMessage
	}
	return nil
}

func (x *SourceMessage) GetToUin() uint64 {
	if x != nil {
		return x.ToUin
	}
	return 0
}

func (x *SourceMessage) GetGroupName() []byte {
	if x != nil {
		return x.GroupName
	}
	return nil
}

type Text struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data        string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Link        string `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
	Attr6Buffer []byte `protobuf:"bytes,3,opt,name=attr6Buffer,proto3" json:"attr6Buffer,omitempty"`
	Attr7Buffer []byte `protobuf:"bytes,4,opt,name=attr7Buffer,proto3" json:"attr7Buffer,omitempty"`
	Buffer      []byte `protobuf:"bytes,5,opt,name=buffer,proto3" json:"buffer,omitempty"`
}

func (x *Text) Reset() {
	*x = Text{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Text) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Text) ProtoMessage() {}

func (x *Text) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Text.ProtoReflect.Descriptor instead.
func (*Text) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{38}
}

func (x *Text) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *Text) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *Text) GetAttr6Buffer() []byte {
	if x != nil {
		return x.Attr6Buffer
	}
	return nil
}

func (x *Text) GetAttr7Buffer() []byte {
	if x != nil {
		return x.Attr7Buffer
	}
	return nil
}

func (x *Text) GetBuffer() []byte {
	if x != nil {
		return x.Buffer
	}
	return nil
}

type TipsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *TipsInfo) Reset() {
	*x = TipsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TipsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TipsInfo) ProtoMessage() {}

func (x *TipsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TipsInfo.ProtoReflect.Descriptor instead.
func (*TipsInfo) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{39}
}

func (x *TipsInfo) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type TempPTT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileType     uint32 `protobuf:"varint,1,opt,name=fileType,proto3" json:"fileType,omitempty"`
	FileUuid     []byte `protobuf:"bytes,2,opt,name=file_uuid,json=fileUuid,proto3" json:"file_uuid,omitempty"`
	FileMd5      []byte `protobuf:"bytes,3,opt,name=fileMd5,proto3" json:"fileMd5,omitempty"`
	FileName     []byte `protobuf:"bytes,4,opt,name=fileName,proto3" json:"fileName,omitempty"`
	FileSize     uint32 `protobuf:"varint,5,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
	PttTimes     uint64 `protobuf:"varint,6,opt,name=pttTimes,proto3" json:"pttTimes,omitempty"`
	UserType     uint32 `protobuf:"varint,7,opt,name=userType,proto3" json:"userType,omitempty"`
	PtttransFlag uint32 `protobuf:"varint,8,opt,name=ptttransFlag,proto3" json:"ptttransFlag,omitempty"`
}

func (x *TempPTT) Reset() {
	*x = TempPTT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TempPTT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TempPTT) ProtoMessage() {}

func (x *TempPTT) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TempPTT.ProtoReflect.Descriptor instead.
func (*TempPTT) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{40}
}

func (x *TempPTT) GetFileType() uint32 {
	if x != nil {
		return x.FileType
	}
	return 0
}

func (x *TempPTT) GetFileUuid() []byte {
	if x != nil {
		return x.FileUuid
	}
	return nil
}

func (x *TempPTT) GetFileMd5() []byte {
	if x != nil {
		return x.FileMd5
	}
	return nil
}

func (x *TempPTT) GetFileName() []byte {
	if x != nil {
		return x.FileName
	}
	return nil
}

func (x *TempPTT) GetFileSize() uint32 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *TempPTT) GetPttTimes() uint64 {
	if x != nil {
		return x.PttTimes
	}
	return 0
}

func (x *TempPTT) GetUserType() uint32 {
	if x != nil {
		return x.UserType
	}
	return 0
}

func (x *TempPTT) GetPtttransFlag() uint32 {
	if x != nil {
		return x.PtttransFlag
	}
	return 0
}

type Trans211TempMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageBody []byte `protobuf:"bytes,1,opt,name=messageBody,proto3" json:"messageBody,omitempty"`
	C2CCommand  uint32 `protobuf:"varint,2,opt,name=c2cCommand,proto3" json:"c2cCommand,omitempty"`
}

func (x *Trans211TempMessage) Reset() {
	*x = Trans211TempMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trans211TempMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trans211TempMessage) ProtoMessage() {}

func (x *Trans211TempMessage) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trans211TempMessage.ProtoReflect.Descriptor instead.
func (*Trans211TempMessage) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{41}
}

func (x *Trans211TempMessage) GetMessageBody() []byte {
	if x != nil {
		return x.MessageBody
	}
	return nil
}

func (x *Trans211TempMessage) GetC2CCommand() uint32 {
	if x != nil {
		return x.C2CCommand
	}
	return 0
}

type TransferElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TransferElement) Reset() {
	*x = TransferElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferElement) ProtoMessage() {}

func (x *TransferElement) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferElement.ProtoReflect.Descriptor instead.
func (*TransferElement) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{42}
}

func (x *TransferElement) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *TransferElement) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type VideoFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileUuid     []byte `protobuf:"bytes,1,opt,name=file_uuid,json=fileUuid,proto3" json:"file_uuid,omitempty"`
	FileMd5      []byte `protobuf:"bytes,2,opt,name=fileMd5,proto3" json:"fileMd5,omitempty"`
	FileName     []byte `protobuf:"bytes,3,opt,name=fileName,proto3" json:"fileName,omitempty"`
	FileFormat   uint32 `protobuf:"varint,4,opt,name=fileFormat,proto3" json:"fileFormat,omitempty"`
	FileTime     uint32 `protobuf:"varint,5,opt,name=fileTime,proto3" json:"fileTime,omitempty"`
	FileSize     uint32 `protobuf:"varint,6,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
	ThumbWidth   uint32 `protobuf:"varint,7,opt,name=thumbWidth,proto3" json:"thumbWidth,omitempty"`
	ThumbHeight  uint32 `protobuf:"varint,8,opt,name=thumbHeight,proto3" json:"thumbHeight,omitempty"`
	ThumbFileMd5 []byte `protobuf:"bytes,9,opt,name=thumbFileMd5,proto3" json:"thumbFileMd5,omitempty"`
	Source       []byte `protobuf:"bytes,10,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *VideoFile) Reset() {
	*x = VideoFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoFile) ProtoMessage() {}

func (x *VideoFile) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoFile.ProtoReflect.Descriptor instead.
func (*VideoFile) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{43}
}

func (x *VideoFile) GetFileUuid() []byte {
	if x != nil {
		return x.FileUuid
	}
	return nil
}

func (x *VideoFile) GetFileMd5() []byte {
	if x != nil {
		return x.FileMd5
	}
	return nil
}

func (x *VideoFile) GetFileName() []byte {
	if x != nil {
		return x.FileName
	}
	return nil
}

func (x *VideoFile) GetFileFormat() uint32 {
	if x != nil {
		return x.FileFormat
	}
	return 0
}

func (x *VideoFile) GetFileTime() uint32 {
	if x != nil {
		return x.FileTime
	}
	return 0
}

func (x *VideoFile) GetFileSize() uint32 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *VideoFile) GetThumbWidth() uint32 {
	if x != nil {
		return x.ThumbWidth
	}
	return 0
}

func (x *VideoFile) GetThumbHeight() uint32 {
	if x != nil {
		return x.ThumbHeight
	}
	return 0
}

func (x *VideoFile) GetThumbFileMd5() []byte {
	if x != nil {
		return x.ThumbFileMd5
	}
	return nil
}

func (x *VideoFile) GetSource() []byte {
	if x != nil {
		return x.Source
	}
	return nil
}

type ElementFlags2_Instant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId     uint32 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	InstantId uint32 `protobuf:"varint,2,opt,name=instant_id,json=instantId,proto3" json:"instant_id,omitempty"`
}

func (x *ElementFlags2_Instant) Reset() {
	*x = ElementFlags2_Instant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementFlags2_Instant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementFlags2_Instant) ProtoMessage() {}

func (x *ElementFlags2_Instant) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementFlags2_Instant.ProtoReflect.Descriptor instead.
func (*ElementFlags2_Instant) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ElementFlags2_Instant) GetAppId() uint32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *ElementFlags2_Instant) GetInstantId() uint32 {
	if x != nil {
		return x.InstantId
	}
	return 0
}

type FunFace_Bomb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Burst bool `protobuf:"varint,1,opt,name=burst,proto3" json:"burst,omitempty"`
}

func (x *FunFace_Bomb) Reset() {
	*x = FunFace_Bomb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunFace_Bomb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunFace_Bomb) ProtoMessage() {}

func (x *FunFace_Bomb) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunFace_Bomb.ProtoReflect.Descriptor instead.
func (*FunFace_Bomb) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{10, 0}
}

func (x *FunFace_Bomb) GetBurst() bool {
	if x != nil {
		return x.Burst
	}
	return false
}

type FunFace_Turntable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UinList    []uint64 `protobuf:"varint,1,rep,packed,name=uin_list,json=uinList,proto3" json:"uin_list,omitempty"`
	HitUin     uint64   `protobuf:"varint,2,opt,name=hit_uin,json=hitUin,proto3" json:"hit_uin,omitempty"`
	HitUinNick string   `protobuf:"bytes,3,opt,name=hit_uinNick,json=hitUinNick,proto3" json:"hit_uinNick,omitempty"`
}

func (x *FunFace_Turntable) Reset() {
	*x = FunFace_Turntable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_body_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunFace_Turntable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunFace_Turntable) ProtoMessage() {}

func (x *FunFace_Turntable) ProtoReflect() protoreflect.Message {
	mi := &file_message_body_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunFace_Turntable.ProtoReflect.Descriptor instead.
func (*FunFace_Turntable) Descriptor() ([]byte, []int) {
	return file_message_body_proto_rawDescGZIP(), []int{10, 1}
}

func (x *FunFace_Turntable) GetUinList() []uint64 {
	if x != nil {
		return x.UinList
	}
	return nil
}

func (x *FunFace_Turntable) GetHitUin() uint64 {
	if x != nil {
		return x.HitUin
	}
	return 0
}

func (x *FunFace_Turntable) GetHitUinNick() string {
	if x != nil {
		return x.HitUinNick
	}
	return ""
}

var File_message_body_proto protoreflect.FileDescriptor

var file_message_body_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf9, 0x01, 0x0a, 0x15, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f,
	0x75, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x6f, 0x75, 0x73, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6e, 0x6f, 0x6e, 0x79,
	0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x4e, 0x69, 0x63, 0x6b, 0x12, 0x23,
	0x0a, 0x0d, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x22, 0x9b, 0x02, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61,
	0x72, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x72, 0x53, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x70, 0x69, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x64, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x6f,
	0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x73, 0x0a, 0x0d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x65, 0x78, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73,
	0x6f, 0x75, 0x6e, 0x64, 0x22, 0xac, 0x07, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46,
	0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x6c, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x6f, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x66, 0x75, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x66, 0x75,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x6d, 0x64, 0x35, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c,
	0x12, 0x17, 0x0a, 0x07, 0x62, 0x69, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x62, 0x69, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x69,
	0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x69,
	0x67, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x77, 0x4c, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x72, 0x6c, 0x34, 0x30, 0x30, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x72, 0x6c, 0x34, 0x30, 0x30, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x64, 0x74, 0x68, 0x34,
	0x30, 0x30, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x77, 0x69, 0x64, 0x74, 0x68, 0x34,
	0x30, 0x30, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x34, 0x30, 0x30, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x34, 0x30, 0x30,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x93, 0x13, 0x0a, 0x07, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1e, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e,
	0x54, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x04, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e,
	0x46, 0x61, 0x63, 0x65, 0x48, 0x01, 0x52, 0x04, 0x66, 0x61, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x34, 0x0a, 0x0c, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x48, 0x02, 0x52, 0x0b, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x10, 0x6e, 0x6f, 0x74, 0x5f, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x48, 0x03, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x04, 0x52, 0x08, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x46, 0x61, 0x63, 0x65, 0x48, 0x05, 0x52, 0x0a, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x46, 0x61, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x0d, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x48, 0x06, 0x52, 0x0c, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66,
	0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x46, 0x61, 0x63, 0x65, 0x48, 0x07, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x46, 0x61, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x0e, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x32, 0x48,
	0x08, 0x52, 0x0d, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x32,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x75, 0x6e, 0x46, 0x61, 0x63, 0x65, 0x48,
	0x09, 0x52, 0x07, 0x66, 0x75, 0x6e, 0x46, 0x61, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a,
	0x13, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x0a,
	0x52, 0x11, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0c, 0x72, 0x69, 0x63, 0x68, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x52,
	0x69, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x0b, 0x52, 0x0b, 0x72, 0x69,
	0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0a,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x0c, 0x52, 0x09,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0c,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x48, 0x0d, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x0e, 0x52, 0x0e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x2e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x0f, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x34, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x48, 0x10, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48,
	0x11, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46,
	0x69, 0x6c, 0x65, 0x48, 0x12, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x69, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x09, 0x74, 0x69, 0x70, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x69, 0x70, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x13, 0x52, 0x08, 0x74, 0x69, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x53, 0x0a, 0x17, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x14, 0x52, 0x15, 0x61, 0x6e, 0x6f,
	0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x0b, 0x71, 0x71, 0x5f, 0x6c, 0x69, 0x76, 0x65,
	0x5f, 0x6f, 0x6c, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x51, 0x51, 0x4c,
	0x69, 0x76, 0x65, 0x4f, 0x6c, 0x64, 0x48, 0x15, 0x52, 0x09, 0x71, 0x71, 0x4c, 0x69, 0x76, 0x65,
	0x4f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0b, 0x6c, 0x69, 0x66, 0x65, 0x5f, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4c, 0x69,
	0x66, 0x65, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48,
	0x16, 0x52, 0x0a, 0x6c, 0x69, 0x66, 0x65, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x41, 0x0a, 0x11, 0x71, 0x71, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x51, 0x51,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x17, 0x52,
	0x0f, 0x71, 0x71, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x67, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x52, 0x65, 0x64, 0x42,
	0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x18, 0x52, 0x0a, 0x72, 0x65, 0x64, 0x42, 0x61, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x10, 0x6c, 0x6f, 0x77, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x4c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x70, 0x73, 0x48, 0x19, 0x52, 0x0e, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x62, 0x61, 0x6e, 0x6b, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x1a, 0x52, 0x13, 0x62, 0x61, 0x6e, 0x6b, 0x63, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x2b, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x48, 0x1b, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a,
	0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x48, 0x1c, 0x52, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x1d,
	0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x48, 0x0a, 0x12, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x1e, 0x52, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x73, 0x67, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0a,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x73, 0x74, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x48, 0x1f, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x73, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x09, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x61, 0x70, 0x70,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x41, 0x70,
	0x70, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x20, 0x52, 0x08, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x41, 0x70, 0x70, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x21, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6e, 0x6f, 0x74, 0x5f,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x32, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x66, 0x75, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x69, 0x63, 0x68, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x68, 0x61, 0x6b,
	0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74,
	0x69, 0x70, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x61, 0x6e, 0x6f,
	0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x71, 0x71, 0x5f, 0x6c, 0x69, 0x76, 0x65,
	0x5f, 0x6f, 0x6c, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x5f, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x71, 0x71, 0x5f, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72,
	0x65, 0x64, 0x5f, 0x62, 0x61, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x6c, 0x6f, 0x77, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x70, 0x73,
	0x42, 0x18, 0x0a, 0x16, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x73,
	0x67, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x70, 0x6f, 0x73, 0x74,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x0c, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x22, 0xd5, 0x04, 0x0a, 0x0d, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x32, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x68, 0x69,
	0x73, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x74, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x70, 0x74, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x76, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x76, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x32, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x32, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x73, 0x72,
	0x63, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x32, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x6e, 0x67, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x6f, 0x6e, 0x67, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x61, 0x6f, 0x6e, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x6f, 0x6e, 0x74,
	0x12, 0x39, 0x0a, 0x11, 0x70, 0x63, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x43,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x66, 0x52, 0x0f, 0x70, 0x63, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x1a, 0x3f, 0x0a, 0x07, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xff, 0x02, 0x0a,
	0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69,
	0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x12, 0x1d,
	0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x61, 0x69, 0x6c, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x70, 0x6e, 0x73, 0x5f, 0x74, 0x69, 0x70, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x61, 0x70, 0x6e, 0x73, 0x54, 0x69, 0x70, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75,
	0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x26, 0x0a, 0x0f, 0x61, 0x70, 0x6e, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x70, 0x6e, 0x73, 0x53,
	0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x6e, 0x65, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x46,
	0x0a, 0x04, 0x46, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03,
	0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6f, 0x6c, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0xde, 0x01, 0x0a, 0x07, 0x46, 0x75, 0x6e, 0x46, 0x61,
	0x63, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x74, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x75, 0x6e, 0x46, 0x61, 0x63, 0x65, 0x2e,
	0x54, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x09, 0x74, 0x75, 0x72, 0x6e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x62, 0x6f, 0x6d, 0x62, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x46, 0x75, 0x6e, 0x46, 0x61, 0x63, 0x65, 0x2e, 0x42, 0x6f, 0x6d,
	0x62, 0x52, 0x04, 0x62, 0x6f, 0x6d, 0x62, 0x1a, 0x1c, 0x0a, 0x04, 0x42, 0x6f, 0x6d, 0x62, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x75, 0x72, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x62, 0x75, 0x72, 0x73, 0x74, 0x1a, 0x60, 0x0a, 0x09, 0x54, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x75, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x68, 0x69, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x68, 0x69, 0x74, 0x55, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x69, 0x74, 0x5f, 0x75, 0x69,
	0x6e, 0x4e, 0x69, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x69, 0x74,
	0x55, 0x69, 0x6e, 0x4e, 0x69, 0x63, 0x6b, 0x22, 0x96, 0x05, 0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x62, 0x75, 0x62, 0x62,
	0x6c, 0x65, 0x5f, 0x64, 0x69, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x79, 0x54,
	0x65, 0x78, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x4e, 0x65, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x13, 0x0a,
	0x05, 0x72, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x72, 0x70,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x70, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x72, 0x70, 0x46, 0x6f, 0x6c, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x65, 0x78, 0x74, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x6f,
	0x6e, 0x67, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x6f,
	0x5f, 0x75, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x74, 0x6f, 0x55, 0x69, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x6c,
	0x61, 0x6d, 0x6f, 0x75, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x67, 0x6c, 0x61, 0x6d, 0x6f, 0x75, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x61, 0x6e, 0x6b,
	0x5f, 0x73, 0x65, 0x71, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x69, 0x63, 0x5f, 0x74, 0x6f, 0x72, 0x63, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x54, 0x6f, 0x72, 0x63, 0x68, 0x12, 0x33, 0x0a,
	0x16, 0x62, 0x61, 0x62, 0x79, 0x71, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x62,
	0x61, 0x62, 0x79, 0x71, 0x47, 0x75, 0x69, 0x64, 0x65, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x65, 0x72, 0x74, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x74, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x75,
	0x62, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x75, 0x62, 0x62,
	0x6c, 0x65, 0x53, 0x75, 0x62, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x65, 0x6e, 0x64, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x65, 0x6e,
	0x64, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x70, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x70, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x62, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x62, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x22, 0xf2, 0x01, 0x0a, 0x14, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x68, 0x65,
	0x61, 0x64, 0x5f, 0x63, 0x6c, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x69, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x6b,
	0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x67, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x6b, 0x42, 0x67,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x94, 0x02, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x65, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x62, 0x0a, 0x10,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x73, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x9f, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x66, 0x65, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x6f, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x69,
	0x74, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x62, 0x69, 0x74, 0x6d,
	0x61, 0x70, 0x22, 0x46, 0x0a, 0x0f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x41, 0x70, 0x70, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0xa8, 0x01, 0x0a, 0x0e, 0x4c,
	0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x70, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55,
	0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x69,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0xdb, 0x02, 0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x46, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x66, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x61, 0x62, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x75,
	0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x22, 0x92, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x78, 0x6d,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x78, 0x6d, 0x6c, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x69,
	0x6e, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x5e, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x26, 0x0a, 0x09, 0x72, 0x69, 0x63, 0x68, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x52, 0x69, 0x63,
	0x68, 0x54, 0x65, 0x78, 0x74, 0x52, 0x08, 0x72, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xde, 0x03, 0x0a, 0x0d, 0x4e, 0x6f, 0x74,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x73, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d,
	0x64, 0x35, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64,
	0x35, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x5f, 0x63, 0x6d, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x75,
	0x62, 0x43, 0x6d, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x5f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x5f,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x61, 0x6e, 0x67,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x62, 0x73, 0x41, 0x69, 0x6c, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x62, 0x73, 0x41,
	0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xeb, 0x05, 0x0a, 0x0e, 0x4e, 0x6f,
	0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x69, 0x6c,
	0x65, 0x4c, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x65,
	0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x6d, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x5f,
	0x6d, 0x64, 0x35, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x69, 0x63, 0x4d, 0x64,
	0x35, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x69, 0x63, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x69, 0x63, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x69, 0x63, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x69, 0x63, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x6c,
	0x61, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x62,
	0x69, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x69,
	0x67, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x69, 0x67, 0x55, 0x72, 0x6c, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x70, 0x5f, 0x61,
	0x63, 0x65, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x6f, 0x70, 0x41, 0x63, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0b,
	0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x69, 0x63, 0x5f, 0x6d, 0x64, 0x35, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x6f, 0x6c, 0x64, 0x50, 0x69, 0x63, 0x4d, 0x64, 0x35, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x68, 0x6f,
	0x77, 0x4c, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x22, 0x5b, 0x0a, 0x0b, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x22, 0xdf, 0x01, 0x0a, 0x0c, 0x50, 0x43, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x65, 0x66, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x63, 0x5f, 0x70, 0x74, 0x6c, 0x5f,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x63, 0x50,
	0x74, 0x6c, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x0a, 0x70, 0x63, 0x5f, 0x70, 0x74,
	0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x63, 0x50,
	0x74, 0x6c, 0x45, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x63, 0x5f, 0x70, 0x74, 0x6c,
	0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61,
	0x63, 0x50, 0x74, 0x6c, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x61, 0x63,
	0x5f, 0x70, 0x74, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x6d, 0x61, 0x63, 0x50, 0x74, 0x6c, 0x45, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x74, 0x6c,
	0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0b, 0x70, 0x74, 0x6c, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x70, 0x74, 0x6c, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x74, 0x6c, 0x73, 0x4e, 0x6f, 0x74, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x8e, 0x04, 0x0a, 0x03, 0x50, 0x54, 0x54, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x72,
	0x63, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x72, 0x63,
	0x55, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65,
	0x4b, 0x65, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x50, 0x74, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x67, 0x69, 0x63,
	0x50, 0x74, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x74,
	0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x74, 0x74,
	0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x69, 0x6c, 0x65,
	0x4b, 0x65, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x21, 0x0a, 0x0d, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x75, 0x66, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x62, 0x75, 0x66, 0x22, 0x6f, 0x0a, 0x0b, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x73, 0x0a, 0x09, 0x51,
	0x51, 0x4c, 0x69, 0x76, 0x65, 0x4f, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x43,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x75, 0x62, 0x43, 0x6d, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x22, 0xfe, 0x04, 0x0a, 0x0f, 0x51, 0x51, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x49, 0x4f,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x75, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x75, 0x69, 0x6e, 0x12, 0x2b,
	0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x51, 0x51, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x49, 0x4f, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x08, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x51, 0x51, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x49, 0x4f, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0a,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x73, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x73, 0x67, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x11, 0x52, 0x07, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x69, 0x6c, 0x6c, 0x6e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x62, 0x69, 0x6c, 0x6c, 0x6e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6b,
	0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6b, 0x65,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x0a, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x73, 0x67, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x07, 0x6d, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x63, 0x5f, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x63, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x64, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x64,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x61, 0x70, 0x5f,
	0x75, 0x69, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x61, 0x70, 0x55,
	0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x62, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x62, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x22, 0xae, 0x05, 0x0a, 0x12, 0x51, 0x51, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x49,
	0x4f, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b,
	0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x75,
	0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x74, 0x72, 0x69, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x74,
	0x72, 0x69, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x19, 0x0a, 0x08, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x6a, 0x75, 0x6d, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6f, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6f, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0d, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x75, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x67, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x42, 0x67, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x69, 0x6f, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x61, 0x69, 0x6f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x61, 0x69, 0x6f, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x61, 0x69, 0x6f, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x66, 0x74, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x66, 0x74, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x62, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x62, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x22, 0x37, 0x0a, 0x0f, 0x51, 0x51, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x51, 0x51, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x49,
	0x4f, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x2e, 0x0a, 0x0a, 0x52,
	0x65, 0x64, 0x42, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x65, 0x64,
	0x5f, 0x62, 0x61, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x72, 0x65, 0x64, 0x42, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x0b,
	0x52, 0x69, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x31, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65,
	0x71, 0x22, 0x91, 0x02, 0x0a, 0x08, 0x52, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x12, 0x28,
	0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x09, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x34,
	0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x69, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4e, 0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x41, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x03, 0x70, 0x74, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x04, 0x2e, 0x50, 0x54, 0x54, 0x52, 0x03, 0x70, 0x74, 0x74, 0x12, 0x20, 0x0a, 0x06,
	0x74, 0x6d, 0x70, 0x50, 0x74, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x54,
	0x65, 0x6d, 0x70, 0x50, 0x54, 0x54, 0x52, 0x06, 0x74, 0x6d, 0x70, 0x50, 0x74, 0x74, 0x12, 0x45,
	0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x32, 0x31, 0x31, 0x54, 0x6d, 0x70, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x32, 0x31, 0x31, 0x54, 0x65, 0x6d, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x32, 0x31, 0x31, 0x54, 0x6d, 0x70, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xee, 0x03, 0x0a, 0x11, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x6e,
	0x12, 0x15, 0x0a, 0x06, 0x74, 0x6f, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x74, 0x6f, 0x55, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x74,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x50, 0x72, 0x65, 0x68, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x72, 0x65, 0x68,
	0x65, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x66,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x4e, 0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0e,
	0x6e, 0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x26,
	0x0a, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x32, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x32, 0x52, 0x06,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x6e,
	0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x6e, 0x75, 0x6d, 0x22, 0x4d, 0x0a, 0x0b, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x75, 0x69, 0x6e, 0x22, 0xbf, 0x02, 0x0a, 0x0d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x53,
	0x65, 0x71, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x53,
	0x65, 0x71, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x24, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x69, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x69, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x6f, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x55, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x72,
	0x36, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61,
	0x74, 0x74, 0x72, 0x36, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x74,
	0x74, 0x72, 0x37, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x61, 0x74, 0x74, 0x72, 0x37, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x22, 0x1e, 0x0a, 0x08, 0x54, 0x69, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x22, 0xf0, 0x01, 0x0a, 0x07, 0x54, 0x65, 0x6d, 0x70, 0x50, 0x54, 0x54,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c,
	0x65, 0x4d, 0x64, 0x35, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65,
	0x4d, 0x64, 0x35, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x74, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70,
	0x74, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x74, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x74, 0x74, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x57, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x32, 0x31, 0x31, 0x54, 0x65, 0x6d, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x32, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x32, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x22, 0x3b, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb4, 0x02,
	0x0a, 0x09, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65,
	0x4d, 0x64, 0x35, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d,
	0x64, 0x35, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_message_body_proto_rawDescOnce sync.Once
	file_message_body_proto_rawDescData = file_message_body_proto_rawDesc
)

func file_message_body_proto_rawDescGZIP() []byte {
	file_message_body_proto_rawDescOnce.Do(func() {
		file_message_body_proto_rawDescData = protoimpl.X.CompressGZIP(file_message_body_proto_rawDescData)
	})
	return file_message_body_proto_rawDescData
}

var file_message_body_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_message_body_proto_goTypes = []interface{}{
	(*AnonymousGroupMessage)(nil), // 0: AnonymousGroupMessage
	(*Attribute)(nil),             // 1: Attribute
	(*CommonElement)(nil),         // 2: CommonElement
	(*CustomElement)(nil),         // 3: CustomElement
	(*CustomFace)(nil),            // 4: CustomFace
	(*Element)(nil),               // 5: Element
	(*ElementFlags)(nil),          // 6: ElementFlags
	(*ElementFlags2)(nil),         // 7: ElementFlags2
	(*ExtraInfo)(nil),             // 8: ExtraInfo
	(*Face)(nil),                  // 9: Face
	(*FunFace)(nil),               // 10: FunFace
	(*GeneralFlags)(nil),          // 11: GeneralFlags
	(*GroupBusinessMessage)(nil),  // 12: GroupBusinessMessage
	(*GroupFile)(nil),             // 13: GroupFile
	(*GroupPostElement)(nil),      // 14: GroupPostElement
	(*LifeOnlineAccount)(nil),     // 15: LifeOnlineAccount
	(*LightAppElement)(nil),       // 16: LightAppElement
	(*LowVersionTips)(nil),        // 17: LowVersionTips
	(*MarketFace)(nil),            // 18: MarketFace
	(*MarketTransfer)(nil),        // 19: MarketTransfer
	(*MessageBody)(nil),           // 20: MessageBody
	(*NotOnlineFile)(nil),         // 21: NotOnlineFile
	(*NotOnlineImage)(nil),        // 22: NotOnlineImage
	(*OnlineImage)(nil),           // 23: OnlineImage
	(*PCSupportDef)(nil),          // 24: PCSupportDef
	(*PTT)(nil),                   // 25: PTT
	(*PublicAccount)(nil),         // 26: PublicAccount
	(*PublicGroup)(nil),           // 27: PublicGroup
	(*QQLiveOld)(nil),             // 28: QQLiveOld
	(*QQWalletAIOBody)(nil),       // 29: QQWalletAIOBody
	(*QQWalletAIOElement)(nil),    // 30: QQWalletAIOElement
	(*QQWalletMessage)(nil),       // 31: QQWalletMessage
	(*RedBagInfo)(nil),            // 32: RedBagInfo
	(*RichMessage)(nil),           // 33: RichMessage
	(*RichText)(nil),              // 34: RichText
	(*SecretFileMessage)(nil),     // 35: SecretFileMessage
	(*ShakeWindow)(nil),           // 36: ShakeWindow
	(*SourceMessage)(nil),         // 37: SourceMessage
	(*Text)(nil),                  // 38: Text
	(*TipsInfo)(nil),              // 39: TipsInfo
	(*TempPTT)(nil),               // 40: TempPTT
	(*Trans211TempMessage)(nil),   // 41: Trans211TempMessage
	(*TransferElement)(nil),       // 42: TransferElement
	(*VideoFile)(nil),             // 43: VideoFile
	(*ElementFlags2_Instant)(nil), // 44: ElementFlags2.Instant
	(*FunFace_Bomb)(nil),          // 45: FunFace.Bomb
	(*FunFace_Turntable)(nil),     // 46: FunFace.Turntable
}
var file_message_body_proto_depIdxs = []int32{
	38, // 0: Element.text:type_name -> Text
	9,  // 1: Element.face:type_name -> Face
	23, // 2: Element.online_image:type_name -> OnlineImage
	22, // 3: Element.not_online_image:type_name -> NotOnlineImage
	42, // 4: Element.transfer:type_name -> TransferElement
	18, // 5: Element.market_face:type_name -> MarketFace
	6,  // 6: Element.element_flags:type_name -> ElementFlags
	4,  // 7: Element.custom_face:type_name -> CustomFace
	7,  // 8: Element.element_flags2:type_name -> ElementFlags2
	10, // 9: Element.fun_face:type_name -> FunFace
	35, // 10: Element.secret_file_message:type_name -> SecretFileMessage
	33, // 11: Element.rich_message:type_name -> RichMessage
	13, // 12: Element.group_file:type_name -> GroupFile
	27, // 13: Element.public_group:type_name -> PublicGroup
	19, // 14: Element.market_transfer:type_name -> MarketTransfer
	8,  // 15: Element.extra_info:type_name -> ExtraInfo
	36, // 16: Element.shake_window:type_name -> ShakeWindow
	26, // 17: Element.public_account:type_name -> PublicAccount
	43, // 18: Element.video_file:type_name -> VideoFile
	39, // 19: Element.tips_info:type_name -> TipsInfo
	0,  // 20: Element.anonymous_group_message:type_name -> AnonymousGroupMessage
	28, // 21: Element.qq_live_old:type_name -> QQLiveOld
	15, // 22: Element.life_online:type_name -> LifeOnlineAccount
	31, // 23: Element.qq_wallet_message:type_name -> QQWalletMessage
	32, // 24: Element.red_bag_info:type_name -> RedBagInfo
	17, // 25: Element.low_version_tips:type_name -> LowVersionTips
	3,  // 26: Element.custom:type_name -> CustomElement
	11, // 27: Element.general_flags:type_name -> GeneralFlags
	37, // 28: Element.source_message:type_name -> SourceMessage
	12, // 29: Element.group_business_msg:type_name -> GroupBusinessMessage
	14, // 30: Element.group_post:type_name -> GroupPostElement
	16, // 31: Element.light_app:type_name -> LightAppElement
	2,  // 32: Element.common:type_name -> CommonElement
	44, // 33: ElementFlags2.instants:type_name -> ElementFlags2.Instant
	44, // 34: ElementFlags2.src_instant:type_name -> ElementFlags2.Instant
	24, // 35: ElementFlags2.pc_support_define:type_name -> PCSupportDef
	46, // 36: FunFace.turntable:type_name -> FunFace.Turntable
	45, // 37: FunFace.bomb:type_name -> FunFace.Bomb
	34, // 38: MessageBody.rich_text:type_name -> RichText
	30, // 39: QQWalletAIOBody.sender:type_name -> QQWalletAIOElement
	30, // 40: QQWalletAIOBody.receiver:type_name -> QQWalletAIOElement
	29, // 41: QQWalletMessage.body:type_name -> QQWalletAIOBody
	1,  // 42: RichText.attribute:type_name -> Attribute
	5,  // 43: RichText.elements:type_name -> Element
	21, // 44: RichText.notOnlineAile:type_name -> NotOnlineFile
	25, // 45: RichText.ptt:type_name -> PTT
	40, // 46: RichText.tmpPtt:type_name -> TempPTT
	41, // 47: RichText.trans_211TmpMessage:type_name -> Trans211TempMessage
	22, // 48: SecretFileMessage.notOnlineImage:type_name -> NotOnlineImage
	7,  // 49: SecretFileMessage.flags2:type_name -> ElementFlags2
	5,  // 50: SourceMessage.elements:type_name -> Element
	51, // [51:51] is the sub-list for method output_type
	51, // [51:51] is the sub-list for method input_type
	51, // [51:51] is the sub-list for extension type_name
	51, // [51:51] is the sub-list for extension extendee
	0,  // [0:51] is the sub-list for field type_name
}

func init() { file_message_body_proto_init() }
func file_message_body_proto_init() {
	if File_message_body_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_message_body_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnonymousGroupMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomFace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Element); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementFlags2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtraInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Face); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunFace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupBusinessMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupPostElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LifeOnlineAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LightAppElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LowVersionTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketFace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotOnlineFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotOnlineImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PCSupportDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PTT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QQLiveOld); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QQWalletAIOBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QQWalletAIOElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QQWalletMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedBagInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RichMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RichText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretFileMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShakeWindow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Text); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TipsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TempPTT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trans211TempMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementFlags2_Instant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunFace_Bomb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_body_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunFace_Turntable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_message_body_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_message_body_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_message_body_proto_goTypes,
		DependencyIndexes: file_message_body_proto_depIdxs,
		MessageInfos:      file_message_body_proto_msgTypes,
	}.Build()
	File_message_body_proto = out.File
	file_message_body_proto_rawDesc = nil
	file_message_body_proto_goTypes = nil
	file_message_body_proto_depIdxs = nil
}
