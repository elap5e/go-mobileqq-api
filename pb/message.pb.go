// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: message.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AnonymousGroupMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags        *uint32 `protobuf:"varint,1,opt,name=flags,proto3,oneof" json:"flags,omitempty"`
	AnonId       []byte  `protobuf:"bytes,2,opt,name=anonId,proto3,oneof" json:"anonId,omitempty"`
	AnonNick     []byte  `protobuf:"bytes,3,opt,name=anonNick,proto3,oneof" json:"anonNick,omitempty"`
	HeadPortrait *uint32 `protobuf:"varint,4,opt,name=headPortrait,proto3,oneof" json:"headPortrait,omitempty"`
	ExpireTime   *uint32 `protobuf:"varint,5,opt,name=expireTime,proto3,oneof" json:"expireTime,omitempty"`
	BubbleId     *uint32 `protobuf:"varint,6,opt,name=bubbleId,proto3,oneof" json:"bubbleId,omitempty"`
	RankColor    []byte  `protobuf:"bytes,7,opt,name=rankColor,proto3,oneof" json:"rankColor,omitempty"`
}

func (x *AnonymousGroupMessage) Reset() {
	*x = AnonymousGroupMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnonymousGroupMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnonymousGroupMessage) ProtoMessage() {}

func (x *AnonymousGroupMessage) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnonymousGroupMessage.ProtoReflect.Descriptor instead.
func (*AnonymousGroupMessage) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

func (x *AnonymousGroupMessage) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *AnonymousGroupMessage) GetAnonId() []byte {
	if x != nil {
		return x.AnonId
	}
	return nil
}

func (x *AnonymousGroupMessage) GetAnonNick() []byte {
	if x != nil {
		return x.AnonNick
	}
	return nil
}

func (x *AnonymousGroupMessage) GetHeadPortrait() uint32 {
	if x != nil && x.HeadPortrait != nil {
		return *x.HeadPortrait
	}
	return 0
}

func (x *AnonymousGroupMessage) GetExpireTime() uint32 {
	if x != nil && x.ExpireTime != nil {
		return *x.ExpireTime
	}
	return 0
}

func (x *AnonymousGroupMessage) GetBubbleId() uint32 {
	if x != nil && x.BubbleId != nil {
		return *x.BubbleId
	}
	return 0
}

func (x *AnonymousGroupMessage) GetRankColor() []byte {
	if x != nil {
		return x.RankColor
	}
	return nil
}

type Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodePage       *int32  `protobuf:"zigzag32,1,opt,name=codePage,proto3,oneof" json:"codePage,omitempty"`
	Time           *uint32 `protobuf:"varint,2,opt,name=time,proto3,oneof" json:"time,omitempty"`
	Random         *uint32 `protobuf:"varint,3,opt,name=random,proto3,oneof" json:"random,omitempty"`
	Color          *uint32 `protobuf:"varint,4,opt,name=color,proto3,oneof" json:"color,omitempty"`
	Size           *uint32 `protobuf:"varint,5,opt,name=size,proto3,oneof" json:"size,omitempty"`
	Effect         *uint32 `protobuf:"varint,6,opt,name=effect,proto3,oneof" json:"effect,omitempty"`
	CharSet        *uint32 `protobuf:"varint,7,opt,name=charSet,proto3,oneof" json:"charSet,omitempty"`
	PitchAndAamily *uint32 `protobuf:"varint,8,opt,name=pitchAndAamily,proto3,oneof" json:"pitchAndAamily,omitempty"`
	FontName       *string `protobuf:"bytes,9,opt,name=fontName,proto3,oneof" json:"fontName,omitempty"`
	ReserveData    []byte  `protobuf:"bytes,10,opt,name=reserveData,proto3,oneof" json:"reserveData,omitempty"`
}

func (x *Attribute) Reset() {
	*x = Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attribute) ProtoMessage() {}

func (x *Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attribute.ProtoReflect.Descriptor instead.
func (*Attribute) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{1}
}

func (x *Attribute) GetCodePage() int32 {
	if x != nil && x.CodePage != nil {
		return *x.CodePage
	}
	return 0
}

func (x *Attribute) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *Attribute) GetRandom() uint32 {
	if x != nil && x.Random != nil {
		return *x.Random
	}
	return 0
}

func (x *Attribute) GetColor() uint32 {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return 0
}

func (x *Attribute) GetSize() uint32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *Attribute) GetEffect() uint32 {
	if x != nil && x.Effect != nil {
		return *x.Effect
	}
	return 0
}

func (x *Attribute) GetCharSet() uint32 {
	if x != nil && x.CharSet != nil {
		return *x.CharSet
	}
	return 0
}

func (x *Attribute) GetPitchAndAamily() uint32 {
	if x != nil && x.PitchAndAamily != nil {
		return *x.PitchAndAamily
	}
	return 0
}

func (x *Attribute) GetFontName() string {
	if x != nil && x.FontName != nil {
		return *x.FontName
	}
	return ""
}

func (x *Attribute) GetReserveData() []byte {
	if x != nil {
		return x.ReserveData
	}
	return nil
}

type CustomFace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid        []byte `protobuf:"bytes,1,opt,name=guid,proto3" json:"guid,omitempty"`
	FilePath    string `protobuf:"bytes,2,opt,name=filePath,proto3" json:"filePath,omitempty"`
	Shortcut    string `protobuf:"bytes,3,opt,name=shortcut,proto3" json:"shortcut,omitempty"`
	Buffer      []byte `protobuf:"bytes,4,opt,name=buffer,proto3" json:"buffer,omitempty"`
	Flag        []byte `protobuf:"bytes,5,opt,name=flag,proto3" json:"flag,omitempty"`
	OldData     []byte `protobuf:"bytes,6,opt,name=oldData,proto3" json:"oldData,omitempty"`
	FileId      uint32 `protobuf:"varint,7,opt,name=fileId,proto3" json:"fileId,omitempty"`
	ServerIp    uint32 `protobuf:"varint,8,opt,name=serverIp,proto3" json:"serverIp,omitempty"`
	ServerPort  uint32 `protobuf:"varint,9,opt,name=serverPort,proto3" json:"serverPort,omitempty"`
	FileType    uint32 `protobuf:"varint,10,opt,name=fileType,proto3" json:"fileType,omitempty"`
	Signature   []byte `protobuf:"bytes,11,opt,name=signature,proto3" json:"signature,omitempty"`
	Useful      uint32 `protobuf:"varint,12,opt,name=useful,proto3" json:"useful,omitempty"`
	Md5         []byte `protobuf:"bytes,13,opt,name=md5,proto3" json:"md5,omitempty"`
	ThumbUrl    string `protobuf:"bytes,14,opt,name=thumbUrl,proto3" json:"thumbUrl,omitempty"`
	BigUrl      string `protobuf:"bytes,15,opt,name=bigUrl,proto3" json:"bigUrl,omitempty"`
	OrigUrl     string `protobuf:"bytes,16,opt,name=origUrl,proto3" json:"origUrl,omitempty"`
	BizType     uint32 `protobuf:"varint,17,opt,name=bizType,proto3" json:"bizType,omitempty"`
	RepeatIndex uint32 `protobuf:"varint,18,opt,name=repeatIndex,proto3" json:"repeatIndex,omitempty"`
	RepeatImage uint32 `protobuf:"varint,19,opt,name=repeatImage,proto3" json:"repeatImage,omitempty"`
	ImageType   uint32 `protobuf:"varint,20,opt,name=imageType,proto3" json:"imageType,omitempty"`
	Index       uint32 `protobuf:"varint,21,opt,name=index,proto3" json:"index,omitempty"`
	Width       uint32 `protobuf:"varint,22,opt,name=width,proto3" json:"width,omitempty"`
	Height      uint32 `protobuf:"varint,23,opt,name=height,proto3" json:"height,omitempty"`
	Source      uint32 `protobuf:"varint,24,opt,name=source,proto3" json:"source,omitempty"`
	Size        uint32 `protobuf:"varint,25,opt,name=size,proto3" json:"size,omitempty"`
	Origin      uint32 `protobuf:"varint,26,opt,name=origin,proto3" json:"origin,omitempty"`
	ThumbWidth  uint32 `protobuf:"varint,27,opt,name=thumbWidth,proto3" json:"thumbWidth,omitempty"`
	ThumbHeight uint32 `protobuf:"varint,28,opt,name=thumbHeight,proto3" json:"thumbHeight,omitempty"`
	ShowLen     uint32 `protobuf:"varint,29,opt,name=showLen,proto3" json:"showLen,omitempty"`
	DownloadLen uint32 `protobuf:"varint,30,opt,name=downloadLen,proto3" json:"downloadLen,omitempty"`
	Url400      string `protobuf:"bytes,31,opt,name=url400,proto3" json:"url400,omitempty"`
	Width400    uint32 `protobuf:"varint,32,opt,name=width400,proto3" json:"width400,omitempty"`
	Height400   uint32 `protobuf:"varint,33,opt,name=height400,proto3" json:"height400,omitempty"`
	ReserveData []byte `protobuf:"bytes,34,opt,name=reserveData,proto3" json:"reserveData,omitempty"`
}

func (x *CustomFace) Reset() {
	*x = CustomFace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomFace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomFace) ProtoMessage() {}

func (x *CustomFace) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomFace.ProtoReflect.Descriptor instead.
func (*CustomFace) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{2}
}

func (x *CustomFace) GetGuid() []byte {
	if x != nil {
		return x.Guid
	}
	return nil
}

func (x *CustomFace) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *CustomFace) GetShortcut() string {
	if x != nil {
		return x.Shortcut
	}
	return ""
}

func (x *CustomFace) GetBuffer() []byte {
	if x != nil {
		return x.Buffer
	}
	return nil
}

func (x *CustomFace) GetFlag() []byte {
	if x != nil {
		return x.Flag
	}
	return nil
}

func (x *CustomFace) GetOldData() []byte {
	if x != nil {
		return x.OldData
	}
	return nil
}

func (x *CustomFace) GetFileId() uint32 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *CustomFace) GetServerIp() uint32 {
	if x != nil {
		return x.ServerIp
	}
	return 0
}

func (x *CustomFace) GetServerPort() uint32 {
	if x != nil {
		return x.ServerPort
	}
	return 0
}

func (x *CustomFace) GetFileType() uint32 {
	if x != nil {
		return x.FileType
	}
	return 0
}

func (x *CustomFace) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *CustomFace) GetUseful() uint32 {
	if x != nil {
		return x.Useful
	}
	return 0
}

func (x *CustomFace) GetMd5() []byte {
	if x != nil {
		return x.Md5
	}
	return nil
}

func (x *CustomFace) GetThumbUrl() string {
	if x != nil {
		return x.ThumbUrl
	}
	return ""
}

func (x *CustomFace) GetBigUrl() string {
	if x != nil {
		return x.BigUrl
	}
	return ""
}

func (x *CustomFace) GetOrigUrl() string {
	if x != nil {
		return x.OrigUrl
	}
	return ""
}

func (x *CustomFace) GetBizType() uint32 {
	if x != nil {
		return x.BizType
	}
	return 0
}

func (x *CustomFace) GetRepeatIndex() uint32 {
	if x != nil {
		return x.RepeatIndex
	}
	return 0
}

func (x *CustomFace) GetRepeatImage() uint32 {
	if x != nil {
		return x.RepeatImage
	}
	return 0
}

func (x *CustomFace) GetImageType() uint32 {
	if x != nil {
		return x.ImageType
	}
	return 0
}

func (x *CustomFace) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CustomFace) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *CustomFace) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *CustomFace) GetSource() uint32 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *CustomFace) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CustomFace) GetOrigin() uint32 {
	if x != nil {
		return x.Origin
	}
	return 0
}

func (x *CustomFace) GetThumbWidth() uint32 {
	if x != nil {
		return x.ThumbWidth
	}
	return 0
}

func (x *CustomFace) GetThumbHeight() uint32 {
	if x != nil {
		return x.ThumbHeight
	}
	return 0
}

func (x *CustomFace) GetShowLen() uint32 {
	if x != nil {
		return x.ShowLen
	}
	return 0
}

func (x *CustomFace) GetDownloadLen() uint32 {
	if x != nil {
		return x.DownloadLen
	}
	return 0
}

func (x *CustomFace) GetUrl400() string {
	if x != nil {
		return x.Url400
	}
	return ""
}

func (x *CustomFace) GetWidth400() uint32 {
	if x != nil {
		return x.Width400
	}
	return 0
}

func (x *CustomFace) GetHeight400() uint32 {
	if x != nil {
		return x.Height400
	}
	return 0
}

func (x *CustomFace) GetReserveData() []byte {
	if x != nil {
		return x.ReserveData
	}
	return nil
}

type Element struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text                  *Text                  `protobuf:"bytes,1,opt,name=text,proto3,oneof" json:"text,omitempty"`
	Face                  *Face                  `protobuf:"bytes,2,opt,name=face,proto3,oneof" json:"face,omitempty"`
	OnlineImage           *OnlineImage           `protobuf:"bytes,3,opt,name=onlineImage,proto3,oneof" json:"onlineImage,omitempty"`
	NotOnlineImage        *NotOnlineImage        `protobuf:"bytes,4,opt,name=notOnlineImage,proto3,oneof" json:"notOnlineImage,omitempty"`
	TransElement          *TransElement          `protobuf:"bytes,5,opt,name=transElement,proto3,oneof" json:"transElement,omitempty"`
	MarketFace            *MarketFace            `protobuf:"bytes,6,opt,name=marketFace,proto3,oneof" json:"marketFace,omitempty"`
	ElementFlags          *ElementFlags          `protobuf:"bytes,7,opt,name=elementFlags,proto3,oneof" json:"elementFlags,omitempty"`
	CustomFace            *CustomFace            `protobuf:"bytes,8,opt,name=customFace,proto3,oneof" json:"customFace,omitempty"`
	ElementFlags2         *ElementFlags2         `protobuf:"bytes,9,opt,name=elementFlags2,proto3,oneof" json:"elementFlags2,omitempty"`
	FunFace               *FunFace               `protobuf:"bytes,10,opt,name=funFace,proto3,oneof" json:"funFace,omitempty"`
	SecretFileMessage     *SecretFileMessage     `protobuf:"bytes,11,opt,name=secretFileMessage,proto3,oneof" json:"secretFileMessage,omitempty"`
	RichMessage           *RichMessage           `protobuf:"bytes,12,opt,name=richMessage,proto3,oneof" json:"richMessage,omitempty"`
	GroupFile             *GroupFile             `protobuf:"bytes,13,opt,name=groupFile,proto3,oneof" json:"groupFile,omitempty"`
	PublicGroup           *PublicGroup           `protobuf:"bytes,14,opt,name=publicGroup,proto3,oneof" json:"publicGroup,omitempty"`
	MarketTrans           *MarketTrans           `protobuf:"bytes,15,opt,name=marketTrans,proto3,oneof" json:"marketTrans,omitempty"`
	ExtraInfo             *ExtraInfo             `protobuf:"bytes,16,opt,name=extraInfo,proto3,oneof" json:"extraInfo,omitempty"`
	ShakeWindow           *ShakeWindow           `protobuf:"bytes,17,opt,name=shakeWindow,proto3,oneof" json:"shakeWindow,omitempty"`
	PublicAccount         *PublicAccount         `protobuf:"bytes,18,opt,name=publicAccount,proto3,oneof" json:"publicAccount,omitempty"`
	VideoFile             *VideoFile             `protobuf:"bytes,19,opt,name=videoFile,proto3,oneof" json:"videoFile,omitempty"`
	TipsInfo              *TipsInfo              `protobuf:"bytes,20,opt,name=tipsInfo,proto3,oneof" json:"tipsInfo,omitempty"`
	AnonymousGroupMessage *AnonymousGroupMessage `protobuf:"bytes,21,opt,name=anonymousGroupMessage,proto3,oneof" json:"anonymousGroupMessage,omitempty"`
	QqLiveOld             *QQLiveOld             `protobuf:"bytes,22,opt,name=qqLiveOld,proto3,oneof" json:"qqLiveOld,omitempty"`
	LifeOnline            *LifeOnlineAccount     `protobuf:"bytes,23,opt,name=lifeOnline,proto3,oneof" json:"lifeOnline,omitempty"`
	// optional QQWalletMessage qqWalletMessage = 24;
	// optional string crm_elem = 25;
	// optional string conference_tips_info = 26;
	// optional string redbag_info = 27;
	// optional string low_version_tips = 28;
	BankcodeCtrlInfo []byte `protobuf:"bytes,29,opt,name=bankcode_ctrl_info,json=bankcodeCtrlInfo,proto3,oneof" json:"bankcode_ctrl_info,omitempty"`
	// optional string near_by_msg = 30;
	// optional string custom_elem = 31;
	// optional string location_info = 32;
	// optional string pub_acc_info = 33;
	// optional string small_emoji = 34;
	// optional string fsj_msg_elem = 35;
	// optional string ark_app = 36;
	// optional string general_flags = 37;
	// optional string hc_flash_pic = 38;
	// optional string deliver_gift_msg = 39;
	// optional string bitapp_msg = 40;
	// optional string open_qq_data = 41;
	// optional string apollo_msg = 42;
	// optional string group_pub_acc_info = 43;
	// optional string bless_msg = 44;
	SourceMessage *SourceMessage `protobuf:"bytes,45,opt,name=sourceMessage,proto3,oneof" json:"sourceMessage,omitempty"`
}

func (x *Element) Reset() {
	*x = Element{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Element) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Element) ProtoMessage() {}

func (x *Element) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Element.ProtoReflect.Descriptor instead.
func (*Element) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{3}
}

func (x *Element) GetText() *Text {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Element) GetFace() *Face {
	if x != nil {
		return x.Face
	}
	return nil
}

func (x *Element) GetOnlineImage() *OnlineImage {
	if x != nil {
		return x.OnlineImage
	}
	return nil
}

func (x *Element) GetNotOnlineImage() *NotOnlineImage {
	if x != nil {
		return x.NotOnlineImage
	}
	return nil
}

func (x *Element) GetTransElement() *TransElement {
	if x != nil {
		return x.TransElement
	}
	return nil
}

func (x *Element) GetMarketFace() *MarketFace {
	if x != nil {
		return x.MarketFace
	}
	return nil
}

func (x *Element) GetElementFlags() *ElementFlags {
	if x != nil {
		return x.ElementFlags
	}
	return nil
}

func (x *Element) GetCustomFace() *CustomFace {
	if x != nil {
		return x.CustomFace
	}
	return nil
}

func (x *Element) GetElementFlags2() *ElementFlags2 {
	if x != nil {
		return x.ElementFlags2
	}
	return nil
}

func (x *Element) GetFunFace() *FunFace {
	if x != nil {
		return x.FunFace
	}
	return nil
}

func (x *Element) GetSecretFileMessage() *SecretFileMessage {
	if x != nil {
		return x.SecretFileMessage
	}
	return nil
}

func (x *Element) GetRichMessage() *RichMessage {
	if x != nil {
		return x.RichMessage
	}
	return nil
}

func (x *Element) GetGroupFile() *GroupFile {
	if x != nil {
		return x.GroupFile
	}
	return nil
}

func (x *Element) GetPublicGroup() *PublicGroup {
	if x != nil {
		return x.PublicGroup
	}
	return nil
}

func (x *Element) GetMarketTrans() *MarketTrans {
	if x != nil {
		return x.MarketTrans
	}
	return nil
}

func (x *Element) GetExtraInfo() *ExtraInfo {
	if x != nil {
		return x.ExtraInfo
	}
	return nil
}

func (x *Element) GetShakeWindow() *ShakeWindow {
	if x != nil {
		return x.ShakeWindow
	}
	return nil
}

func (x *Element) GetPublicAccount() *PublicAccount {
	if x != nil {
		return x.PublicAccount
	}
	return nil
}

func (x *Element) GetVideoFile() *VideoFile {
	if x != nil {
		return x.VideoFile
	}
	return nil
}

func (x *Element) GetTipsInfo() *TipsInfo {
	if x != nil {
		return x.TipsInfo
	}
	return nil
}

func (x *Element) GetAnonymousGroupMessage() *AnonymousGroupMessage {
	if x != nil {
		return x.AnonymousGroupMessage
	}
	return nil
}

func (x *Element) GetQqLiveOld() *QQLiveOld {
	if x != nil {
		return x.QqLiveOld
	}
	return nil
}

func (x *Element) GetLifeOnline() *LifeOnlineAccount {
	if x != nil {
		return x.LifeOnline
	}
	return nil
}

func (x *Element) GetBankcodeCtrlInfo() []byte {
	if x != nil {
		return x.BankcodeCtrlInfo
	}
	return nil
}

func (x *Element) GetSourceMessage() *SourceMessage {
	if x != nil {
		return x.SourceMessage
	}
	return nil
}

type ElementFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags        []byte `protobuf:"bytes,1,opt,name=flags,proto3,oneof" json:"flags,omitempty"`
	BusinessData []byte `protobuf:"bytes,2,opt,name=businessData,proto3,oneof" json:"businessData,omitempty"`
}

func (x *ElementFlags) Reset() {
	*x = ElementFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementFlags) ProtoMessage() {}

func (x *ElementFlags) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementFlags.ProtoReflect.Descriptor instead.
func (*ElementFlags) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{4}
}

func (x *ElementFlags) GetFlags() []byte {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *ElementFlags) GetBusinessData() []byte {
	if x != nil {
		return x.BusinessData
	}
	return nil
}

type ElementFlags2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColorTextId      *uint32                  `protobuf:"varint,1,opt,name=colorTextId,proto3,oneof" json:"colorTextId,omitempty"`
	MessageId        *uint64                  `protobuf:"varint,2,opt,name=messageId,proto3,oneof" json:"messageId,omitempty"`
	WhisperSessionId *uint32                  `protobuf:"varint,3,opt,name=whisperSessionId,proto3,oneof" json:"whisperSessionId,omitempty"`
	PttChangeBit     *uint32                  `protobuf:"varint,4,opt,name=pttChangeBit,proto3,oneof" json:"pttChangeBit,omitempty"`
	VipStatus        *uint32                  `protobuf:"varint,5,opt,name=vipStatus,proto3,oneof" json:"vipStatus,omitempty"`
	CompatibleId     *uint32                  `protobuf:"varint,6,opt,name=compatibleId,proto3,oneof" json:"compatibleId,omitempty"`
	Instants         []*ElementFlags2_Instant `protobuf:"bytes,7,rep,name=Instants,proto3" json:"Instants,omitempty"`
	MessageCount     *uint32                  `protobuf:"varint,8,opt,name=messageCount,proto3,oneof" json:"messageCount,omitempty"`
	SrcInstant       *ElementFlags2_Instant   `protobuf:"bytes,9,opt,name=srcInstant,proto3,oneof" json:"srcInstant,omitempty"`
	Longtitude       *uint32                  `protobuf:"varint,10,opt,name=longtitude,proto3,oneof" json:"longtitude,omitempty"`
	Latitude         *uint32                  `protobuf:"varint,11,opt,name=latitude,proto3,oneof" json:"latitude,omitempty"`
	CustomAont       *uint32                  `protobuf:"varint,12,opt,name=customAont,proto3,oneof" json:"customAont,omitempty"`
	PcSupportDef     *PCSupportDef            `protobuf:"bytes,13,opt,name=pcSupportDef,proto3,oneof" json:"pcSupportDef,omitempty"`
}

func (x *ElementFlags2) Reset() {
	*x = ElementFlags2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementFlags2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementFlags2) ProtoMessage() {}

func (x *ElementFlags2) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementFlags2.ProtoReflect.Descriptor instead.
func (*ElementFlags2) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{5}
}

func (x *ElementFlags2) GetColorTextId() uint32 {
	if x != nil && x.ColorTextId != nil {
		return *x.ColorTextId
	}
	return 0
}

func (x *ElementFlags2) GetMessageId() uint64 {
	if x != nil && x.MessageId != nil {
		return *x.MessageId
	}
	return 0
}

func (x *ElementFlags2) GetWhisperSessionId() uint32 {
	if x != nil && x.WhisperSessionId != nil {
		return *x.WhisperSessionId
	}
	return 0
}

func (x *ElementFlags2) GetPttChangeBit() uint32 {
	if x != nil && x.PttChangeBit != nil {
		return *x.PttChangeBit
	}
	return 0
}

func (x *ElementFlags2) GetVipStatus() uint32 {
	if x != nil && x.VipStatus != nil {
		return *x.VipStatus
	}
	return 0
}

func (x *ElementFlags2) GetCompatibleId() uint32 {
	if x != nil && x.CompatibleId != nil {
		return *x.CompatibleId
	}
	return 0
}

func (x *ElementFlags2) GetInstants() []*ElementFlags2_Instant {
	if x != nil {
		return x.Instants
	}
	return nil
}

func (x *ElementFlags2) GetMessageCount() uint32 {
	if x != nil && x.MessageCount != nil {
		return *x.MessageCount
	}
	return 0
}

func (x *ElementFlags2) GetSrcInstant() *ElementFlags2_Instant {
	if x != nil {
		return x.SrcInstant
	}
	return nil
}

func (x *ElementFlags2) GetLongtitude() uint32 {
	if x != nil && x.Longtitude != nil {
		return *x.Longtitude
	}
	return 0
}

func (x *ElementFlags2) GetLatitude() uint32 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *ElementFlags2) GetCustomAont() uint32 {
	if x != nil && x.CustomAont != nil {
		return *x.CustomAont
	}
	return 0
}

func (x *ElementFlags2) GetPcSupportDef() *PCSupportDef {
	if x != nil {
		return x.PcSupportDef
	}
	return nil
}

type ExtraInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nick             []byte  `protobuf:"bytes,1,opt,name=nick,proto3,oneof" json:"nick,omitempty"`
	GroupCard        []byte  `protobuf:"bytes,2,opt,name=groupCard,proto3,oneof" json:"groupCard,omitempty"`
	Level            *uint32 `protobuf:"varint,3,opt,name=level,proto3,oneof" json:"level,omitempty"`
	Flags            *uint32 `protobuf:"varint,4,opt,name=flags,proto3,oneof" json:"flags,omitempty"`
	GroupMask        *uint32 `protobuf:"varint,5,opt,name=groupMask,proto3,oneof" json:"groupMask,omitempty"`
	MessageTailId    *uint32 `protobuf:"varint,6,opt,name=messageTailId,proto3,oneof" json:"messageTailId,omitempty"`
	SenderTitle      []byte  `protobuf:"bytes,7,opt,name=senderTitle,proto3,oneof" json:"senderTitle,omitempty"`
	ApnsTips         []byte  `protobuf:"bytes,8,opt,name=apnsTips,proto3,oneof" json:"apnsTips,omitempty"`
	Uin              *uint64 `protobuf:"varint,9,opt,name=uin,proto3,oneof" json:"uin,omitempty"`
	MessageStateFlag *uint32 `protobuf:"varint,10,opt,name=messageStateFlag,proto3,oneof" json:"messageStateFlag,omitempty"`
	ApnsSoundType    *uint32 `protobuf:"varint,11,opt,name=apnsSoundType,proto3,oneof" json:"apnsSoundType,omitempty"`
	NewGroupFlag     *uint32 `protobuf:"varint,12,opt,name=newGroupFlag,proto3,oneof" json:"newGroupFlag,omitempty"`
}

func (x *ExtraInfo) Reset() {
	*x = ExtraInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraInfo) ProtoMessage() {}

func (x *ExtraInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraInfo.ProtoReflect.Descriptor instead.
func (*ExtraInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{6}
}

func (x *ExtraInfo) GetNick() []byte {
	if x != nil {
		return x.Nick
	}
	return nil
}

func (x *ExtraInfo) GetGroupCard() []byte {
	if x != nil {
		return x.GroupCard
	}
	return nil
}

func (x *ExtraInfo) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *ExtraInfo) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *ExtraInfo) GetGroupMask() uint32 {
	if x != nil && x.GroupMask != nil {
		return *x.GroupMask
	}
	return 0
}

func (x *ExtraInfo) GetMessageTailId() uint32 {
	if x != nil && x.MessageTailId != nil {
		return *x.MessageTailId
	}
	return 0
}

func (x *ExtraInfo) GetSenderTitle() []byte {
	if x != nil {
		return x.SenderTitle
	}
	return nil
}

func (x *ExtraInfo) GetApnsTips() []byte {
	if x != nil {
		return x.ApnsTips
	}
	return nil
}

func (x *ExtraInfo) GetUin() uint64 {
	if x != nil && x.Uin != nil {
		return *x.Uin
	}
	return 0
}

func (x *ExtraInfo) GetMessageStateFlag() uint32 {
	if x != nil && x.MessageStateFlag != nil {
		return *x.MessageStateFlag
	}
	return 0
}

func (x *ExtraInfo) GetApnsSoundType() uint32 {
	if x != nil && x.ApnsSoundType != nil {
		return *x.ApnsSoundType
	}
	return 0
}

func (x *ExtraInfo) GetNewGroupFlag() uint32 {
	if x != nil && x.NewGroupFlag != nil {
		return *x.NewGroupFlag
	}
	return 0
}

type Face struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index  uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Old    []byte `protobuf:"bytes,2,opt,name=old,proto3" json:"old,omitempty"`
	Buffer []byte `protobuf:"bytes,3,opt,name=buffer,proto3" json:"buffer,omitempty"`
}

func (x *Face) Reset() {
	*x = Face{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Face) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Face) ProtoMessage() {}

func (x *Face) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Face.ProtoReflect.Descriptor instead.
func (*Face) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{7}
}

func (x *Face) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Face) GetOld() []byte {
	if x != nil {
		return x.Old
	}
	return nil
}

func (x *Face) GetBuffer() []byte {
	if x != nil {
		return x.Buffer
	}
	return nil
}

type FunFace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Turntable *FunFace_Turntable `protobuf:"bytes,1,opt,name=turntable,proto3,oneof" json:"turntable,omitempty"`
	Bomb      *FunFace_Bomb      `protobuf:"bytes,2,opt,name=bomb,proto3,oneof" json:"bomb,omitempty"`
}

func (x *FunFace) Reset() {
	*x = FunFace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunFace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunFace) ProtoMessage() {}

func (x *FunFace) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunFace.ProtoReflect.Descriptor instead.
func (*FunFace) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{8}
}

func (x *FunFace) GetTurntable() *FunFace_Turntable {
	if x != nil {
		return x.Turntable
	}
	return nil
}

func (x *FunFace) GetBomb() *FunFace_Bomb {
	if x != nil {
		return x.Bomb
	}
	return nil
}

type GroupFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename        []byte  `protobuf:"bytes,1,opt,name=filename,proto3,oneof" json:"filename,omitempty"`
	FileSize        *uint64 `protobuf:"varint,2,opt,name=fileSize,proto3,oneof" json:"fileSize,omitempty"`
	FileId          []byte  `protobuf:"bytes,3,opt,name=fileId,proto3,oneof" json:"fileId,omitempty"`
	BatchId         []byte  `protobuf:"bytes,4,opt,name=batchId,proto3,oneof" json:"batchId,omitempty"`
	FileKey         []byte  `protobuf:"bytes,5,opt,name=fileKey,proto3,oneof" json:"fileKey,omitempty"`
	Mark            []byte  `protobuf:"bytes,6,opt,name=mark,proto3,oneof" json:"mark,omitempty"`
	Sequence        *uint64 `protobuf:"varint,7,opt,name=sequence,proto3,oneof" json:"sequence,omitempty"`
	BatchItemId     []byte  `protobuf:"bytes,8,opt,name=batchItemId,proto3,oneof" json:"batchItemId,omitempty"`
	FeedMessageTime *uint32 `protobuf:"varint,9,opt,name=feedMessageTime,proto3,oneof" json:"feedMessageTime,omitempty"`
}

func (x *GroupFile) Reset() {
	*x = GroupFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupFile) ProtoMessage() {}

func (x *GroupFile) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupFile.ProtoReflect.Descriptor instead.
func (*GroupFile) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{9}
}

func (x *GroupFile) GetFilename() []byte {
	if x != nil {
		return x.Filename
	}
	return nil
}

func (x *GroupFile) GetFileSize() uint64 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *GroupFile) GetFileId() []byte {
	if x != nil {
		return x.FileId
	}
	return nil
}

func (x *GroupFile) GetBatchId() []byte {
	if x != nil {
		return x.BatchId
	}
	return nil
}

func (x *GroupFile) GetFileKey() []byte {
	if x != nil {
		return x.FileKey
	}
	return nil
}

func (x *GroupFile) GetMark() []byte {
	if x != nil {
		return x.Mark
	}
	return nil
}

func (x *GroupFile) GetSequence() uint64 {
	if x != nil && x.Sequence != nil {
		return *x.Sequence
	}
	return 0
}

func (x *GroupFile) GetBatchItemId() []byte {
	if x != nil {
		return x.BatchItemId
	}
	return nil
}

func (x *GroupFile) GetFeedMessageTime() uint32 {
	if x != nil && x.FeedMessageTime != nil {
		return *x.FeedMessageTime
	}
	return 0
}

type LifeOnlineAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniqueId *uint64 `protobuf:"varint,1,opt,name=uniqueId,proto3,oneof" json:"uniqueId,omitempty"`
	Op       *uint32 `protobuf:"varint,2,opt,name=op,proto3,oneof" json:"op,omitempty"`
	ShowTime *uint32 `protobuf:"varint,3,opt,name=showTime,proto3,oneof" json:"showTime,omitempty"`
	Report   *uint32 `protobuf:"varint,4,opt,name=report,proto3,oneof" json:"report,omitempty"`
	Ack      *uint32 `protobuf:"varint,5,opt,name=ack,proto3,oneof" json:"ack,omitempty"`
	Bitmap   *uint64 `protobuf:"varint,6,opt,name=bitmap,proto3,oneof" json:"bitmap,omitempty"`
}

func (x *LifeOnlineAccount) Reset() {
	*x = LifeOnlineAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LifeOnlineAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifeOnlineAccount) ProtoMessage() {}

func (x *LifeOnlineAccount) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifeOnlineAccount.ProtoReflect.Descriptor instead.
func (*LifeOnlineAccount) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{10}
}

func (x *LifeOnlineAccount) GetUniqueId() uint64 {
	if x != nil && x.UniqueId != nil {
		return *x.UniqueId
	}
	return 0
}

func (x *LifeOnlineAccount) GetOp() uint32 {
	if x != nil && x.Op != nil {
		return *x.Op
	}
	return 0
}

func (x *LifeOnlineAccount) GetShowTime() uint32 {
	if x != nil && x.ShowTime != nil {
		return *x.ShowTime
	}
	return 0
}

func (x *LifeOnlineAccount) GetReport() uint32 {
	if x != nil && x.Report != nil {
		return *x.Report
	}
	return 0
}

func (x *LifeOnlineAccount) GetAck() uint32 {
	if x != nil && x.Ack != nil {
		return *x.Ack
	}
	return 0
}

func (x *LifeOnlineAccount) GetBitmap() uint64 {
	if x != nil && x.Bitmap != nil {
		return *x.Bitmap
	}
	return 0
}

type MarketFace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaceName    []byte `protobuf:"bytes,1,opt,name=faceName,proto3" json:"faceName,omitempty"`
	ItemType    uint32 `protobuf:"varint,2,opt,name=itemType,proto3" json:"itemType,omitempty"`
	FaceInfo    uint32 `protobuf:"varint,3,opt,name=faceInfo,proto3" json:"faceInfo,omitempty"`
	FaceId      []byte `protobuf:"bytes,4,opt,name=faceId,proto3" json:"faceId,omitempty"`
	TabId       uint32 `protobuf:"varint,5,opt,name=tabId,proto3" json:"tabId,omitempty"`
	SubType     uint32 `protobuf:"varint,6,opt,name=subType,proto3" json:"subType,omitempty"`
	Key         []byte `protobuf:"bytes,7,opt,name=key,proto3" json:"key,omitempty"`
	Param       []byte `protobuf:"bytes,8,opt,name=param,proto3" json:"param,omitempty"`
	MediaType   uint32 `protobuf:"varint,9,opt,name=mediaType,proto3" json:"mediaType,omitempty"`
	ImageWidth  uint32 `protobuf:"varint,10,opt,name=imageWidth,proto3" json:"imageWidth,omitempty"`
	ImageHeight uint32 `protobuf:"varint,11,opt,name=imageHeight,proto3" json:"imageHeight,omitempty"`
	Mobileparam []byte `protobuf:"bytes,12,opt,name=mobileparam,proto3" json:"mobileparam,omitempty"`
}

func (x *MarketFace) Reset() {
	*x = MarketFace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketFace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketFace) ProtoMessage() {}

func (x *MarketFace) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketFace.ProtoReflect.Descriptor instead.
func (*MarketFace) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{11}
}

func (x *MarketFace) GetFaceName() []byte {
	if x != nil {
		return x.FaceName
	}
	return nil
}

func (x *MarketFace) GetItemType() uint32 {
	if x != nil {
		return x.ItemType
	}
	return 0
}

func (x *MarketFace) GetFaceInfo() uint32 {
	if x != nil {
		return x.FaceInfo
	}
	return 0
}

func (x *MarketFace) GetFaceId() []byte {
	if x != nil {
		return x.FaceId
	}
	return nil
}

func (x *MarketFace) GetTabId() uint32 {
	if x != nil {
		return x.TabId
	}
	return 0
}

func (x *MarketFace) GetSubType() uint32 {
	if x != nil {
		return x.SubType
	}
	return 0
}

func (x *MarketFace) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *MarketFace) GetParam() []byte {
	if x != nil {
		return x.Param
	}
	return nil
}

func (x *MarketFace) GetMediaType() uint32 {
	if x != nil {
		return x.MediaType
	}
	return 0
}

func (x *MarketFace) GetImageWidth() uint32 {
	if x != nil {
		return x.ImageWidth
	}
	return 0
}

func (x *MarketFace) GetImageHeight() uint32 {
	if x != nil {
		return x.ImageHeight
	}
	return 0
}

func (x *MarketFace) GetMobileparam() []byte {
	if x != nil {
		return x.Mobileparam
	}
	return nil
}

type MarketTrans struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flag         int32  `protobuf:"varint,1,opt,name=flag,proto3" json:"flag,omitempty"`
	Xml          []byte `protobuf:"bytes,2,opt,name=xml,proto3" json:"xml,omitempty"`
	MessageResId []byte `protobuf:"bytes,3,opt,name=messageResId,proto3" json:"messageResId,omitempty"`
	Ability      uint32 `protobuf:"varint,4,opt,name=ability,proto3" json:"ability,omitempty"`
	MinAbility   uint32 `protobuf:"varint,5,opt,name=minAbility,proto3" json:"minAbility,omitempty"`
}

func (x *MarketTrans) Reset() {
	*x = MarketTrans{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketTrans) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketTrans) ProtoMessage() {}

func (x *MarketTrans) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketTrans.ProtoReflect.Descriptor instead.
func (*MarketTrans) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{12}
}

func (x *MarketTrans) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *MarketTrans) GetXml() []byte {
	if x != nil {
		return x.Xml
	}
	return nil
}

func (x *MarketTrans) GetMessageResId() []byte {
	if x != nil {
		return x.MessageResId
	}
	return nil
}

func (x *MarketTrans) GetAbility() uint32 {
	if x != nil {
		return x.Ability
	}
	return 0
}

func (x *MarketTrans) GetMinAbility() uint32 {
	if x != nil {
		return x.MinAbility
	}
	return 0
}

type MessageBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RichText       *RichText `protobuf:"bytes,1,opt,name=richText,proto3,oneof" json:"richText,omitempty"`
	MessageContent []byte    `protobuf:"bytes,2,opt,name=messageContent,proto3,oneof" json:"messageContent,omitempty"`
}

func (x *MessageBody) Reset() {
	*x = MessageBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageBody) ProtoMessage() {}

func (x *MessageBody) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageBody.ProtoReflect.Descriptor instead.
func (*MessageBody) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{13}
}

func (x *MessageBody) GetRichText() *RichText {
	if x != nil {
		return x.RichText
	}
	return nil
}

func (x *MessageBody) GetMessageContent() []byte {
	if x != nil {
		return x.MessageContent
	}
	return nil
}

type NotOnlineFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileType    *uint32 `protobuf:"varint,1,opt,name=fileType,proto3,oneof" json:"fileType,omitempty"`
	Sig         []byte  `protobuf:"bytes,2,opt,name=sig,proto3,oneof" json:"sig,omitempty"`
	FileUuid    []byte  `protobuf:"bytes,3,opt,name=fileUuid,proto3,oneof" json:"fileUuid,omitempty"`
	FileMd5     []byte  `protobuf:"bytes,4,opt,name=fileMd5,proto3,oneof" json:"fileMd5,omitempty"`
	FileName    []byte  `protobuf:"bytes,5,opt,name=fileName,proto3,oneof" json:"fileName,omitempty"`
	FileSize    *uint64 `protobuf:"varint,6,opt,name=fileSize,proto3,oneof" json:"fileSize,omitempty"`
	Note        []byte  `protobuf:"bytes,7,opt,name=note,proto3,oneof" json:"note,omitempty"`
	Reserved    *uint32 `protobuf:"varint,8,opt,name=reserved,proto3,oneof" json:"reserved,omitempty"`
	Subcmd      *uint32 `protobuf:"varint,9,opt,name=subcmd,proto3,oneof" json:"subcmd,omitempty"`
	MicroCloud  *uint32 `protobuf:"varint,10,opt,name=microCloud,proto3,oneof" json:"microCloud,omitempty"`
	DangerEvel  *uint32 `protobuf:"varint,11,opt,name=dangerEvel,proto3,oneof" json:"dangerEvel,omitempty"`
	LifeTime    *uint32 `protobuf:"varint,12,opt,name=lifeTime,proto3,oneof" json:"lifeTime,omitempty"`
	UploadTime  *uint32 `protobuf:"varint,13,opt,name=uploadTime,proto3,oneof" json:"uploadTime,omitempty"`
	AbsAileType *uint32 `protobuf:"varint,14,opt,name=absAileType,proto3,oneof" json:"absAileType,omitempty"`
	ClientType  *uint32 `protobuf:"varint,15,opt,name=clientType,proto3,oneof" json:"clientType,omitempty"`
	ExpireTime  *uint32 `protobuf:"varint,16,opt,name=expireTime,proto3,oneof" json:"expireTime,omitempty"`
}

func (x *NotOnlineFile) Reset() {
	*x = NotOnlineFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotOnlineFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotOnlineFile) ProtoMessage() {}

func (x *NotOnlineFile) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotOnlineFile.ProtoReflect.Descriptor instead.
func (*NotOnlineFile) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{14}
}

func (x *NotOnlineFile) GetFileType() uint32 {
	if x != nil && x.FileType != nil {
		return *x.FileType
	}
	return 0
}

func (x *NotOnlineFile) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

func (x *NotOnlineFile) GetFileUuid() []byte {
	if x != nil {
		return x.FileUuid
	}
	return nil
}

func (x *NotOnlineFile) GetFileMd5() []byte {
	if x != nil {
		return x.FileMd5
	}
	return nil
}

func (x *NotOnlineFile) GetFileName() []byte {
	if x != nil {
		return x.FileName
	}
	return nil
}

func (x *NotOnlineFile) GetFileSize() uint64 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *NotOnlineFile) GetNote() []byte {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *NotOnlineFile) GetReserved() uint32 {
	if x != nil && x.Reserved != nil {
		return *x.Reserved
	}
	return 0
}

func (x *NotOnlineFile) GetSubcmd() uint32 {
	if x != nil && x.Subcmd != nil {
		return *x.Subcmd
	}
	return 0
}

func (x *NotOnlineFile) GetMicroCloud() uint32 {
	if x != nil && x.MicroCloud != nil {
		return *x.MicroCloud
	}
	return 0
}

func (x *NotOnlineFile) GetDangerEvel() uint32 {
	if x != nil && x.DangerEvel != nil {
		return *x.DangerEvel
	}
	return 0
}

func (x *NotOnlineFile) GetLifeTime() uint32 {
	if x != nil && x.LifeTime != nil {
		return *x.LifeTime
	}
	return 0
}

func (x *NotOnlineFile) GetUploadTime() uint32 {
	if x != nil && x.UploadTime != nil {
		return *x.UploadTime
	}
	return 0
}

func (x *NotOnlineFile) GetAbsAileType() uint32 {
	if x != nil && x.AbsAileType != nil {
		return *x.AbsAileType
	}
	return 0
}

func (x *NotOnlineFile) GetClientType() uint32 {
	if x != nil && x.ClientType != nil {
		return *x.ClientType
	}
	return 0
}

func (x *NotOnlineFile) GetExpireTime() uint32 {
	if x != nil && x.ExpireTime != nil {
		return *x.ExpireTime
	}
	return 0
}

type NotOnlineImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath      []byte `protobuf:"bytes,1,opt,name=filePath,proto3" json:"filePath,omitempty"`
	FileLen       uint32 `protobuf:"varint,2,opt,name=fileLen,proto3" json:"fileLen,omitempty"`
	DownloadPath  []byte `protobuf:"bytes,3,opt,name=downloadPath,proto3" json:"downloadPath,omitempty"`
	SendFile      []byte `protobuf:"bytes,4,opt,name=sendFile,proto3" json:"sendFile,omitempty"`
	ImgType       uint32 `protobuf:"varint,5,opt,name=imgType,proto3" json:"imgType,omitempty"`
	PreviewsImage []byte `protobuf:"bytes,6,opt,name=previewsImage,proto3" json:"previewsImage,omitempty"`
	PicMd5        []byte `protobuf:"bytes,7,opt,name=picMd5,proto3" json:"picMd5,omitempty"`
	PicHeight     uint32 `protobuf:"varint,8,opt,name=picHeight,proto3" json:"picHeight,omitempty"`
	PicWidth      uint32 `protobuf:"varint,9,opt,name=picWidth,proto3" json:"picWidth,omitempty"`
	ResId         []byte `protobuf:"bytes,10,opt,name=resId,proto3" json:"resId,omitempty"`
	Flag          []byte `protobuf:"bytes,11,opt,name=flag,proto3" json:"flag,omitempty"`
	ThumbUrl      string `protobuf:"bytes,12,opt,name=thumbUrl,proto3" json:"thumbUrl,omitempty"`
	Original      uint32 `protobuf:"varint,13,opt,name=original,proto3" json:"original,omitempty"`
	BigUrl        string `protobuf:"bytes,14,opt,name=bigUrl,proto3" json:"bigUrl,omitempty"`
	OrigUrl       string `protobuf:"bytes,15,opt,name=origUrl,proto3" json:"origUrl,omitempty"`
	BizType       uint32 `protobuf:"varint,16,opt,name=bizType,proto3" json:"bizType,omitempty"`
	Result        uint32 `protobuf:"varint,17,opt,name=result,proto3" json:"result,omitempty"`
	Index         uint32 `protobuf:"varint,18,opt,name=index,proto3" json:"index,omitempty"`
	OpAaceBuf     []byte `protobuf:"bytes,19,opt,name=opAaceBuf,proto3" json:"opAaceBuf,omitempty"`
	OldPicMd5     bool   `protobuf:"varint,20,opt,name=oldPicMd5,proto3" json:"oldPicMd5,omitempty"`
	ThumbWidth    uint32 `protobuf:"varint,21,opt,name=thumbWidth,proto3" json:"thumbWidth,omitempty"`
	ThumbHeight   uint32 `protobuf:"varint,22,opt,name=thumbHeight,proto3" json:"thumbHeight,omitempty"`
	FileId        uint32 `protobuf:"varint,23,opt,name=fileId,proto3" json:"fileId,omitempty"`
	ShowLen       uint32 `protobuf:"varint,24,opt,name=showLen,proto3" json:"showLen,omitempty"`
	DownloadLen   uint32 `protobuf:"varint,25,opt,name=downloadLen,proto3" json:"downloadLen,omitempty"`
}

func (x *NotOnlineImage) Reset() {
	*x = NotOnlineImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotOnlineImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotOnlineImage) ProtoMessage() {}

func (x *NotOnlineImage) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotOnlineImage.ProtoReflect.Descriptor instead.
func (*NotOnlineImage) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{15}
}

func (x *NotOnlineImage) GetFilePath() []byte {
	if x != nil {
		return x.FilePath
	}
	return nil
}

func (x *NotOnlineImage) GetFileLen() uint32 {
	if x != nil {
		return x.FileLen
	}
	return 0
}

func (x *NotOnlineImage) GetDownloadPath() []byte {
	if x != nil {
		return x.DownloadPath
	}
	return nil
}

func (x *NotOnlineImage) GetSendFile() []byte {
	if x != nil {
		return x.SendFile
	}
	return nil
}

func (x *NotOnlineImage) GetImgType() uint32 {
	if x != nil {
		return x.ImgType
	}
	return 0
}

func (x *NotOnlineImage) GetPreviewsImage() []byte {
	if x != nil {
		return x.PreviewsImage
	}
	return nil
}

func (x *NotOnlineImage) GetPicMd5() []byte {
	if x != nil {
		return x.PicMd5
	}
	return nil
}

func (x *NotOnlineImage) GetPicHeight() uint32 {
	if x != nil {
		return x.PicHeight
	}
	return 0
}

func (x *NotOnlineImage) GetPicWidth() uint32 {
	if x != nil {
		return x.PicWidth
	}
	return 0
}

func (x *NotOnlineImage) GetResId() []byte {
	if x != nil {
		return x.ResId
	}
	return nil
}

func (x *NotOnlineImage) GetFlag() []byte {
	if x != nil {
		return x.Flag
	}
	return nil
}

func (x *NotOnlineImage) GetThumbUrl() string {
	if x != nil {
		return x.ThumbUrl
	}
	return ""
}

func (x *NotOnlineImage) GetOriginal() uint32 {
	if x != nil {
		return x.Original
	}
	return 0
}

func (x *NotOnlineImage) GetBigUrl() string {
	if x != nil {
		return x.BigUrl
	}
	return ""
}

func (x *NotOnlineImage) GetOrigUrl() string {
	if x != nil {
		return x.OrigUrl
	}
	return ""
}

func (x *NotOnlineImage) GetBizType() uint32 {
	if x != nil {
		return x.BizType
	}
	return 0
}

func (x *NotOnlineImage) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *NotOnlineImage) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *NotOnlineImage) GetOpAaceBuf() []byte {
	if x != nil {
		return x.OpAaceBuf
	}
	return nil
}

func (x *NotOnlineImage) GetOldPicMd5() bool {
	if x != nil {
		return x.OldPicMd5
	}
	return false
}

func (x *NotOnlineImage) GetThumbWidth() uint32 {
	if x != nil {
		return x.ThumbWidth
	}
	return 0
}

func (x *NotOnlineImage) GetThumbHeight() uint32 {
	if x != nil {
		return x.ThumbHeight
	}
	return 0
}

func (x *NotOnlineImage) GetFileId() uint32 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *NotOnlineImage) GetShowLen() uint32 {
	if x != nil {
		return x.ShowLen
	}
	return 0
}

func (x *NotOnlineImage) GetDownloadLen() uint32 {
	if x != nil {
		return x.DownloadLen
	}
	return 0
}

type OnlineImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid     []byte `protobuf:"bytes,1,opt,name=guid,proto3,oneof" json:"guid,omitempty"`
	FilePath []byte `protobuf:"bytes,2,opt,name=filePath,proto3,oneof" json:"filePath,omitempty"`
	SendFile []byte `protobuf:"bytes,3,opt,name=sendFile,proto3,oneof" json:"sendFile,omitempty"`
}

func (x *OnlineImage) Reset() {
	*x = OnlineImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineImage) ProtoMessage() {}

func (x *OnlineImage) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineImage.ProtoReflect.Descriptor instead.
func (*OnlineImage) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{16}
}

func (x *OnlineImage) GetGuid() []byte {
	if x != nil {
		return x.Guid
	}
	return nil
}

func (x *OnlineImage) GetFilePath() []byte {
	if x != nil {
		return x.FilePath
	}
	return nil
}

func (x *OnlineImage) GetSendFile() []byte {
	if x != nil {
		return x.SendFile
	}
	return nil
}

type PCSupportDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PcPtlBegin     *uint32  `protobuf:"varint,1,opt,name=pcPtlBegin,proto3,oneof" json:"pcPtlBegin,omitempty"`
	PcPtlEnd       *uint32  `protobuf:"varint,2,opt,name=pcPtlEnd,proto3,oneof" json:"pcPtlEnd,omitempty"`
	MacPtlBegin    *uint32  `protobuf:"varint,3,opt,name=macPtlBegin,proto3,oneof" json:"macPtlBegin,omitempty"`
	MacPtlEnd      *uint32  `protobuf:"varint,4,opt,name=macPtlEnd,proto3,oneof" json:"macPtlEnd,omitempty"`
	PtlsSupport    []uint32 `protobuf:"varint,5,rep,packed,name=ptlsSupport,proto3" json:"ptlsSupport,omitempty"`
	PtlsNotSupport []uint32 `protobuf:"varint,6,rep,packed,name=ptlsNotSupport,proto3" json:"ptlsNotSupport,omitempty"`
}

func (x *PCSupportDef) Reset() {
	*x = PCSupportDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PCSupportDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PCSupportDef) ProtoMessage() {}

func (x *PCSupportDef) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PCSupportDef.ProtoReflect.Descriptor instead.
func (*PCSupportDef) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{17}
}

func (x *PCSupportDef) GetPcPtlBegin() uint32 {
	if x != nil && x.PcPtlBegin != nil {
		return *x.PcPtlBegin
	}
	return 0
}

func (x *PCSupportDef) GetPcPtlEnd() uint32 {
	if x != nil && x.PcPtlEnd != nil {
		return *x.PcPtlEnd
	}
	return 0
}

func (x *PCSupportDef) GetMacPtlBegin() uint32 {
	if x != nil && x.MacPtlBegin != nil {
		return *x.MacPtlBegin
	}
	return 0
}

func (x *PCSupportDef) GetMacPtlEnd() uint32 {
	if x != nil && x.MacPtlEnd != nil {
		return *x.MacPtlEnd
	}
	return 0
}

func (x *PCSupportDef) GetPtlsSupport() []uint32 {
	if x != nil {
		return x.PtlsSupport
	}
	return nil
}

func (x *PCSupportDef) GetPtlsNotSupport() []uint32 {
	if x != nil {
		return x.PtlsNotSupport
	}
	return nil
}

type PTT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileType      *uint32 `protobuf:"varint,1,opt,name=fileType,proto3,oneof" json:"fileType,omitempty"`
	SrcUin        *uint64 `protobuf:"varint,2,opt,name=srcUin,proto3,oneof" json:"srcUin,omitempty"`
	FileUuid      []byte  `protobuf:"bytes,3,opt,name=fileUuid,proto3,oneof" json:"fileUuid,omitempty"`
	FileMd5       []byte  `protobuf:"bytes,4,opt,name=fileMd5,proto3,oneof" json:"fileMd5,omitempty"`
	FileName      []byte  `protobuf:"bytes,5,opt,name=fileName,proto3,oneof" json:"fileName,omitempty"`
	FileSize      *uint32 `protobuf:"varint,6,opt,name=fileSize,proto3,oneof" json:"fileSize,omitempty"`
	ReserveData   []byte  `protobuf:"bytes,7,opt,name=reserveData,proto3,oneof" json:"reserveData,omitempty"`
	FileId        *uint32 `protobuf:"varint,8,opt,name=fileId,proto3,oneof" json:"fileId,omitempty"`
	ServerIp      *uint32 `protobuf:"varint,9,opt,name=serverIp,proto3,oneof" json:"serverIp,omitempty"`
	ServerPort    *uint32 `protobuf:"varint,10,opt,name=serverPort,proto3,oneof" json:"serverPort,omitempty"`
	Valid         *bool   `protobuf:"varint,11,opt,name=valid,proto3,oneof" json:"valid,omitempty"`
	Signature     []byte  `protobuf:"bytes,12,opt,name=signature,proto3,oneof" json:"signature,omitempty"`
	Shortcut      []byte  `protobuf:"bytes,13,opt,name=shortcut,proto3,oneof" json:"shortcut,omitempty"`
	FileKey       []byte  `protobuf:"bytes,14,opt,name=fileKey,proto3,oneof" json:"fileKey,omitempty"`
	MagicPttIndex *uint32 `protobuf:"varint,15,opt,name=magicPttIndex,proto3,oneof" json:"magicPttIndex,omitempty"`
	VoiceSwitch   *uint32 `protobuf:"varint,16,opt,name=voiceSwitch,proto3,oneof" json:"voiceSwitch,omitempty"`
	PttUrl        []byte  `protobuf:"bytes,17,opt,name=pttUrl,proto3,oneof" json:"pttUrl,omitempty"`
	GroupAileKey  []byte  `protobuf:"bytes,18,opt,name=groupAileKey,proto3,oneof" json:"groupAileKey,omitempty"`
}

func (x *PTT) Reset() {
	*x = PTT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PTT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PTT) ProtoMessage() {}

func (x *PTT) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PTT.ProtoReflect.Descriptor instead.
func (*PTT) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{18}
}

func (x *PTT) GetFileType() uint32 {
	if x != nil && x.FileType != nil {
		return *x.FileType
	}
	return 0
}

func (x *PTT) GetSrcUin() uint64 {
	if x != nil && x.SrcUin != nil {
		return *x.SrcUin
	}
	return 0
}

func (x *PTT) GetFileUuid() []byte {
	if x != nil {
		return x.FileUuid
	}
	return nil
}

func (x *PTT) GetFileMd5() []byte {
	if x != nil {
		return x.FileMd5
	}
	return nil
}

func (x *PTT) GetFileName() []byte {
	if x != nil {
		return x.FileName
	}
	return nil
}

func (x *PTT) GetFileSize() uint32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *PTT) GetReserveData() []byte {
	if x != nil {
		return x.ReserveData
	}
	return nil
}

func (x *PTT) GetFileId() uint32 {
	if x != nil && x.FileId != nil {
		return *x.FileId
	}
	return 0
}

func (x *PTT) GetServerIp() uint32 {
	if x != nil && x.ServerIp != nil {
		return *x.ServerIp
	}
	return 0
}

func (x *PTT) GetServerPort() uint32 {
	if x != nil && x.ServerPort != nil {
		return *x.ServerPort
	}
	return 0
}

func (x *PTT) GetValid() bool {
	if x != nil && x.Valid != nil {
		return *x.Valid
	}
	return false
}

func (x *PTT) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *PTT) GetShortcut() []byte {
	if x != nil {
		return x.Shortcut
	}
	return nil
}

func (x *PTT) GetFileKey() []byte {
	if x != nil {
		return x.FileKey
	}
	return nil
}

func (x *PTT) GetMagicPttIndex() uint32 {
	if x != nil && x.MagicPttIndex != nil {
		return *x.MagicPttIndex
	}
	return 0
}

func (x *PTT) GetVoiceSwitch() uint32 {
	if x != nil && x.VoiceSwitch != nil {
		return *x.VoiceSwitch
	}
	return 0
}

func (x *PTT) GetPttUrl() []byte {
	if x != nil {
		return x.PttUrl
	}
	return nil
}

func (x *PTT) GetGroupAileKey() []byte {
	if x != nil {
		return x.GroupAileKey
	}
	return nil
}

type PublicAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buf []byte `protobuf:"bytes,1,opt,name=buf,proto3,oneof" json:"buf,omitempty"`
}

func (x *PublicAccount) Reset() {
	*x = PublicAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicAccount) ProtoMessage() {}

func (x *PublicAccount) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicAccount.ProtoReflect.Descriptor instead.
func (*PublicAccount) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{19}
}

func (x *PublicAccount) GetBuf() []byte {
	if x != nil {
		return x.Buf
	}
	return nil
}

type PublicGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nickname []byte  `protobuf:"bytes,1,opt,name=nickname,proto3,oneof" json:"nickname,omitempty"`
	Gender   *uint32 `protobuf:"varint,2,opt,name=gender,proto3,oneof" json:"gender,omitempty"`
	Age      *uint32 `protobuf:"varint,3,opt,name=age,proto3,oneof" json:"age,omitempty"`
	Distance *uint32 `protobuf:"varint,4,opt,name=distance,proto3,oneof" json:"distance,omitempty"`
}

func (x *PublicGroup) Reset() {
	*x = PublicGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicGroup) ProtoMessage() {}

func (x *PublicGroup) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicGroup.ProtoReflect.Descriptor instead.
func (*PublicGroup) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{20}
}

func (x *PublicGroup) GetNickname() []byte {
	if x != nil {
		return x.Nickname
	}
	return nil
}

func (x *PublicGroup) GetGender() uint32 {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return 0
}

func (x *PublicGroup) GetAge() uint32 {
	if x != nil && x.Age != nil {
		return *x.Age
	}
	return 0
}

func (x *PublicGroup) GetDistance() uint32 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

type QQLiveOld struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubCmd    *uint32 `protobuf:"varint,1,opt,name=subCmd,proto3,oneof" json:"subCmd,omitempty"`
	ShowText  *string `protobuf:"bytes,2,opt,name=showText,proto3,oneof" json:"showText,omitempty"`
	Param     *string `protobuf:"bytes,3,opt,name=param,proto3,oneof" json:"param,omitempty"`
	Introduce *string `protobuf:"bytes,4,opt,name=introduce,proto3,oneof" json:"introduce,omitempty"`
}

func (x *QQLiveOld) Reset() {
	*x = QQLiveOld{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QQLiveOld) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QQLiveOld) ProtoMessage() {}

func (x *QQLiveOld) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QQLiveOld.ProtoReflect.Descriptor instead.
func (*QQLiveOld) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{21}
}

func (x *QQLiveOld) GetSubCmd() uint32 {
	if x != nil && x.SubCmd != nil {
		return *x.SubCmd
	}
	return 0
}

func (x *QQLiveOld) GetShowText() string {
	if x != nil && x.ShowText != nil {
		return *x.ShowText
	}
	return ""
}

func (x *QQLiveOld) GetParam() string {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return ""
}

func (x *QQLiveOld) GetIntroduce() string {
	if x != nil && x.Introduce != nil {
		return *x.Introduce
	}
	return ""
}

type RichMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Template1    []byte  `protobuf:"bytes,1,opt,name=template1,proto3,oneof" json:"template1,omitempty"`
	ServiceId    *uint32 `protobuf:"varint,2,opt,name=serviceId,proto3,oneof" json:"serviceId,omitempty"`
	MessageResId []byte  `protobuf:"bytes,3,opt,name=messageResId,proto3,oneof" json:"messageResId,omitempty"`
	Rand         *uint32 `protobuf:"varint,4,opt,name=rand,proto3,oneof" json:"rand,omitempty"`
	Seq          *uint32 `protobuf:"varint,5,opt,name=seq,proto3,oneof" json:"seq,omitempty"`
}

func (x *RichMessage) Reset() {
	*x = RichMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RichMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RichMessage) ProtoMessage() {}

func (x *RichMessage) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RichMessage.ProtoReflect.Descriptor instead.
func (*RichMessage) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{22}
}

func (x *RichMessage) GetTemplate1() []byte {
	if x != nil {
		return x.Template1
	}
	return nil
}

func (x *RichMessage) GetServiceId() uint32 {
	if x != nil && x.ServiceId != nil {
		return *x.ServiceId
	}
	return 0
}

func (x *RichMessage) GetMessageResId() []byte {
	if x != nil {
		return x.MessageResId
	}
	return nil
}

func (x *RichMessage) GetRand() uint32 {
	if x != nil && x.Rand != nil {
		return *x.Rand
	}
	return 0
}

func (x *RichMessage) GetSeq() uint32 {
	if x != nil && x.Seq != nil {
		return *x.Seq
	}
	return 0
}

type RichText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attribute           *Attribute           `protobuf:"bytes,1,opt,name=attribute,proto3,oneof" json:"attribute,omitempty"`
	Elements            []*Element           `protobuf:"bytes,2,rep,name=elements,proto3" json:"elements,omitempty"`
	NotOnlineAile       *NotOnlineFile       `protobuf:"bytes,3,opt,name=notOnlineAile,proto3,oneof" json:"notOnlineAile,omitempty"`
	Ptt                 *PTT                 `protobuf:"bytes,4,opt,name=ptt,proto3,oneof" json:"ptt,omitempty"`
	TmpPtt              *TempPTT             `protobuf:"bytes,5,opt,name=tmpPtt,proto3,oneof" json:"tmpPtt,omitempty"`
	Trans_211TmpMessage *Trans211TempMessage `protobuf:"bytes,6,opt,name=trans_211TmpMessage,json=trans211TmpMessage,proto3,oneof" json:"trans_211TmpMessage,omitempty"`
}

func (x *RichText) Reset() {
	*x = RichText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RichText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RichText) ProtoMessage() {}

func (x *RichText) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RichText.ProtoReflect.Descriptor instead.
func (*RichText) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{23}
}

func (x *RichText) GetAttribute() *Attribute {
	if x != nil {
		return x.Attribute
	}
	return nil
}

func (x *RichText) GetElements() []*Element {
	if x != nil {
		return x.Elements
	}
	return nil
}

func (x *RichText) GetNotOnlineAile() *NotOnlineFile {
	if x != nil {
		return x.NotOnlineAile
	}
	return nil
}

func (x *RichText) GetPtt() *PTT {
	if x != nil {
		return x.Ptt
	}
	return nil
}

func (x *RichText) GetTmpPtt() *TempPTT {
	if x != nil {
		return x.TmpPtt
	}
	return nil
}

func (x *RichText) GetTrans_211TmpMessage() *Trans211TempMessage {
	if x != nil {
		return x.Trans_211TmpMessage
	}
	return nil
}

type SecretFileMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileKey              []byte          `protobuf:"bytes,1,opt,name=fileKey,proto3,oneof" json:"fileKey,omitempty"`
	FromUin              *uint64         `protobuf:"varint,2,opt,name=fromUin,proto3,oneof" json:"fromUin,omitempty"`
	ToUin                *uint64         `protobuf:"varint,3,opt,name=toUin,proto3,oneof" json:"toUin,omitempty"`
	Status               *uint32         `protobuf:"varint,4,opt,name=status,proto3,oneof" json:"status,omitempty"`
	Ttl                  *uint32         `protobuf:"varint,5,opt,name=ttl,proto3,oneof" json:"ttl,omitempty"`
	Type                 *uint32         `protobuf:"varint,6,opt,name=type,proto3,oneof" json:"type,omitempty"`
	EncryptPreheadLength *uint32         `protobuf:"varint,7,opt,name=encryptPreheadLength,proto3,oneof" json:"encryptPreheadLength,omitempty"`
	EncryptType          *uint32         `protobuf:"varint,8,opt,name=encryptType,proto3,oneof" json:"encryptType,omitempty"`
	EncryptKey           []byte          `protobuf:"bytes,9,opt,name=encryptKey,proto3,oneof" json:"encryptKey,omitempty"`
	ReadTimes            *uint32         `protobuf:"varint,10,opt,name=readTimes,proto3,oneof" json:"readTimes,omitempty"`
	LeftTime             *uint32         `protobuf:"varint,11,opt,name=leftTime,proto3,oneof" json:"leftTime,omitempty"`
	NotOnlineImage       *NotOnlineImage `protobuf:"bytes,12,opt,name=notOnlineImage,proto3,oneof" json:"notOnlineImage,omitempty"`
	Flags2               *ElementFlags2  `protobuf:"bytes,13,opt,name=flags2,proto3,oneof" json:"flags2,omitempty"`
	Opertype             *uint32         `protobuf:"varint,14,opt,name=opertype,proto3,oneof" json:"opertype,omitempty"`
	FromPhonenum         *string         `protobuf:"bytes,15,opt,name=fromPhonenum,proto3,oneof" json:"fromPhonenum,omitempty"`
}

func (x *SecretFileMessage) Reset() {
	*x = SecretFileMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretFileMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretFileMessage) ProtoMessage() {}

func (x *SecretFileMessage) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretFileMessage.ProtoReflect.Descriptor instead.
func (*SecretFileMessage) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{24}
}

func (x *SecretFileMessage) GetFileKey() []byte {
	if x != nil {
		return x.FileKey
	}
	return nil
}

func (x *SecretFileMessage) GetFromUin() uint64 {
	if x != nil && x.FromUin != nil {
		return *x.FromUin
	}
	return 0
}

func (x *SecretFileMessage) GetToUin() uint64 {
	if x != nil && x.ToUin != nil {
		return *x.ToUin
	}
	return 0
}

func (x *SecretFileMessage) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *SecretFileMessage) GetTtl() uint32 {
	if x != nil && x.Ttl != nil {
		return *x.Ttl
	}
	return 0
}

func (x *SecretFileMessage) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *SecretFileMessage) GetEncryptPreheadLength() uint32 {
	if x != nil && x.EncryptPreheadLength != nil {
		return *x.EncryptPreheadLength
	}
	return 0
}

func (x *SecretFileMessage) GetEncryptType() uint32 {
	if x != nil && x.EncryptType != nil {
		return *x.EncryptType
	}
	return 0
}

func (x *SecretFileMessage) GetEncryptKey() []byte {
	if x != nil {
		return x.EncryptKey
	}
	return nil
}

func (x *SecretFileMessage) GetReadTimes() uint32 {
	if x != nil && x.ReadTimes != nil {
		return *x.ReadTimes
	}
	return 0
}

func (x *SecretFileMessage) GetLeftTime() uint32 {
	if x != nil && x.LeftTime != nil {
		return *x.LeftTime
	}
	return 0
}

func (x *SecretFileMessage) GetNotOnlineImage() *NotOnlineImage {
	if x != nil {
		return x.NotOnlineImage
	}
	return nil
}

func (x *SecretFileMessage) GetFlags2() *ElementFlags2 {
	if x != nil {
		return x.Flags2
	}
	return nil
}

func (x *SecretFileMessage) GetOpertype() uint32 {
	if x != nil && x.Opertype != nil {
		return *x.Opertype
	}
	return 0
}

func (x *SecretFileMessage) GetFromPhonenum() string {
	if x != nil && x.FromPhonenum != nil {
		return *x.FromPhonenum
	}
	return ""
}

type ShakeWindow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Reserve uint32 `protobuf:"varint,2,opt,name=reserve,proto3" json:"reserve,omitempty"`
	Uin     uint64 `protobuf:"varint,3,opt,name=uin,proto3" json:"uin,omitempty"`
}

func (x *ShakeWindow) Reset() {
	*x = ShakeWindow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShakeWindow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShakeWindow) ProtoMessage() {}

func (x *ShakeWindow) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShakeWindow.ProtoReflect.Descriptor instead.
func (*ShakeWindow) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{25}
}

func (x *ShakeWindow) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ShakeWindow) GetReserve() uint32 {
	if x != nil {
		return x.Reserve
	}
	return 0
}

func (x *ShakeWindow) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

type SourceMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrigSeqs      []uint32   `protobuf:"varint,1,rep,packed,name=origSeqs,proto3" json:"origSeqs,omitempty"`
	FromUin       uint64     `protobuf:"varint,2,opt,name=fromUin,proto3" json:"fromUin,omitempty"`
	Time          uint32     `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	Flag          uint32     `protobuf:"varint,4,opt,name=flag,proto3" json:"flag,omitempty"`
	Elements      []*Element `protobuf:"bytes,5,rep,name=elements,proto3" json:"elements,omitempty"`
	Type          uint32     `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`
	RichMessage   []byte     `protobuf:"bytes,7,opt,name=richMessage,proto3" json:"richMessage,omitempty"`
	Reserve       []byte     `protobuf:"bytes,8,opt,name=reserve,proto3" json:"reserve,omitempty"`
	SourceMessage []byte     `protobuf:"bytes,9,opt,name=sourceMessage,proto3" json:"sourceMessage,omitempty"`
	ToUin         uint64     `protobuf:"varint,10,opt,name=toUin,proto3" json:"toUin,omitempty"`
	GroupName     []byte     `protobuf:"bytes,11,opt,name=groupName,proto3" json:"groupName,omitempty"`
}

func (x *SourceMessage) Reset() {
	*x = SourceMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceMessage) ProtoMessage() {}

func (x *SourceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceMessage.ProtoReflect.Descriptor instead.
func (*SourceMessage) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{26}
}

func (x *SourceMessage) GetOrigSeqs() []uint32 {
	if x != nil {
		return x.OrigSeqs
	}
	return nil
}

func (x *SourceMessage) GetFromUin() uint64 {
	if x != nil {
		return x.FromUin
	}
	return 0
}

func (x *SourceMessage) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SourceMessage) GetFlag() uint32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *SourceMessage) GetElements() []*Element {
	if x != nil {
		return x.Elements
	}
	return nil
}

func (x *SourceMessage) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SourceMessage) GetRichMessage() []byte {
	if x != nil {
		return x.RichMessage
	}
	return nil
}

func (x *SourceMessage) GetReserve() []byte {
	if x != nil {
		return x.Reserve
	}
	return nil
}

func (x *SourceMessage) GetSourceMessage() []byte {
	if x != nil {
		return x.SourceMessage
	}
	return nil
}

func (x *SourceMessage) GetToUin() uint64 {
	if x != nil {
		return x.ToUin
	}
	return 0
}

func (x *SourceMessage) GetGroupName() []byte {
	if x != nil {
		return x.GroupName
	}
	return nil
}

type Text struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data        string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Link        string `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
	Attr6Buffer []byte `protobuf:"bytes,3,opt,name=attr6Buffer,proto3" json:"attr6Buffer,omitempty"`
	Attr7Buffer []byte `protobuf:"bytes,4,opt,name=attr7Buffer,proto3" json:"attr7Buffer,omitempty"`
	Buffer      []byte `protobuf:"bytes,5,opt,name=buffer,proto3" json:"buffer,omitempty"`
}

func (x *Text) Reset() {
	*x = Text{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Text) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Text) ProtoMessage() {}

func (x *Text) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Text.ProtoReflect.Descriptor instead.
func (*Text) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{27}
}

func (x *Text) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *Text) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *Text) GetAttr6Buffer() []byte {
	if x != nil {
		return x.Attr6Buffer
	}
	return nil
}

func (x *Text) GetAttr7Buffer() []byte {
	if x != nil {
		return x.Attr7Buffer
	}
	return nil
}

func (x *Text) GetBuffer() []byte {
	if x != nil {
		return x.Buffer
	}
	return nil
}

type TipsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text *string `protobuf:"bytes,1,opt,name=text,proto3,oneof" json:"text,omitempty"`
}

func (x *TipsInfo) Reset() {
	*x = TipsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TipsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TipsInfo) ProtoMessage() {}

func (x *TipsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TipsInfo.ProtoReflect.Descriptor instead.
func (*TipsInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{28}
}

func (x *TipsInfo) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type TempPTT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileType     *uint32 `protobuf:"varint,1,opt,name=fileType,proto3,oneof" json:"fileType,omitempty"`
	FileUuid     []byte  `protobuf:"bytes,2,opt,name=fileUuid,proto3,oneof" json:"fileUuid,omitempty"`
	FileMd5      []byte  `protobuf:"bytes,3,opt,name=fileMd5,proto3,oneof" json:"fileMd5,omitempty"`
	FileName     []byte  `protobuf:"bytes,4,opt,name=fileName,proto3,oneof" json:"fileName,omitempty"`
	FileSize     *uint32 `protobuf:"varint,5,opt,name=fileSize,proto3,oneof" json:"fileSize,omitempty"`
	PttTimes     *uint64 `protobuf:"varint,6,opt,name=pttTimes,proto3,oneof" json:"pttTimes,omitempty"`
	UserType     *uint32 `protobuf:"varint,7,opt,name=userType,proto3,oneof" json:"userType,omitempty"`
	PtttransFlag *uint32 `protobuf:"varint,8,opt,name=ptttransFlag,proto3,oneof" json:"ptttransFlag,omitempty"`
}

func (x *TempPTT) Reset() {
	*x = TempPTT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TempPTT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TempPTT) ProtoMessage() {}

func (x *TempPTT) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TempPTT.ProtoReflect.Descriptor instead.
func (*TempPTT) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{29}
}

func (x *TempPTT) GetFileType() uint32 {
	if x != nil && x.FileType != nil {
		return *x.FileType
	}
	return 0
}

func (x *TempPTT) GetFileUuid() []byte {
	if x != nil {
		return x.FileUuid
	}
	return nil
}

func (x *TempPTT) GetFileMd5() []byte {
	if x != nil {
		return x.FileMd5
	}
	return nil
}

func (x *TempPTT) GetFileName() []byte {
	if x != nil {
		return x.FileName
	}
	return nil
}

func (x *TempPTT) GetFileSize() uint32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *TempPTT) GetPttTimes() uint64 {
	if x != nil && x.PttTimes != nil {
		return *x.PttTimes
	}
	return 0
}

func (x *TempPTT) GetUserType() uint32 {
	if x != nil && x.UserType != nil {
		return *x.UserType
	}
	return 0
}

func (x *TempPTT) GetPtttransFlag() uint32 {
	if x != nil && x.PtttransFlag != nil {
		return *x.PtttransFlag
	}
	return 0
}

type Trans211TempMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageBody []byte  `protobuf:"bytes,1,opt,name=messageBody,proto3,oneof" json:"messageBody,omitempty"`
	C2CCommand  *uint32 `protobuf:"varint,2,opt,name=c2cCommand,proto3,oneof" json:"c2cCommand,omitempty"`
}

func (x *Trans211TempMessage) Reset() {
	*x = Trans211TempMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trans211TempMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trans211TempMessage) ProtoMessage() {}

func (x *Trans211TempMessage) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trans211TempMessage.ProtoReflect.Descriptor instead.
func (*Trans211TempMessage) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{30}
}

func (x *Trans211TempMessage) GetMessageBody() []byte {
	if x != nil {
		return x.MessageBody
	}
	return nil
}

func (x *Trans211TempMessage) GetC2CCommand() uint32 {
	if x != nil && x.C2CCommand != nil {
		return *x.C2CCommand
	}
	return 0
}

type TransElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *uint32 `protobuf:"varint,1,opt,name=type,proto3,oneof" json:"type,omitempty"`
	Value []byte  `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *TransElement) Reset() {
	*x = TransElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransElement) ProtoMessage() {}

func (x *TransElement) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransElement.ProtoReflect.Descriptor instead.
func (*TransElement) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{31}
}

func (x *TransElement) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *TransElement) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type VideoFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileUuid     []byte  `protobuf:"bytes,1,opt,name=fileUuid,proto3,oneof" json:"fileUuid,omitempty"`
	FileMd5      []byte  `protobuf:"bytes,2,opt,name=fileMd5,proto3,oneof" json:"fileMd5,omitempty"`
	FileName     []byte  `protobuf:"bytes,3,opt,name=fileName,proto3,oneof" json:"fileName,omitempty"`
	FileFormat   *uint32 `protobuf:"varint,4,opt,name=fileFormat,proto3,oneof" json:"fileFormat,omitempty"`
	FileTime     *uint32 `protobuf:"varint,5,opt,name=fileTime,proto3,oneof" json:"fileTime,omitempty"`
	FileSize     *uint32 `protobuf:"varint,6,opt,name=fileSize,proto3,oneof" json:"fileSize,omitempty"`
	ThumbWidth   *uint32 `protobuf:"varint,7,opt,name=thumbWidth,proto3,oneof" json:"thumbWidth,omitempty"`
	ThumbHeight  *uint32 `protobuf:"varint,8,opt,name=thumbHeight,proto3,oneof" json:"thumbHeight,omitempty"`
	ThumbFileMd5 []byte  `protobuf:"bytes,9,opt,name=thumbFileMd5,proto3,oneof" json:"thumbFileMd5,omitempty"`
	Source       []byte  `protobuf:"bytes,10,opt,name=source,proto3,oneof" json:"source,omitempty"`
}

func (x *VideoFile) Reset() {
	*x = VideoFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoFile) ProtoMessage() {}

func (x *VideoFile) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoFile.ProtoReflect.Descriptor instead.
func (*VideoFile) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{32}
}

func (x *VideoFile) GetFileUuid() []byte {
	if x != nil {
		return x.FileUuid
	}
	return nil
}

func (x *VideoFile) GetFileMd5() []byte {
	if x != nil {
		return x.FileMd5
	}
	return nil
}

func (x *VideoFile) GetFileName() []byte {
	if x != nil {
		return x.FileName
	}
	return nil
}

func (x *VideoFile) GetFileFormat() uint32 {
	if x != nil && x.FileFormat != nil {
		return *x.FileFormat
	}
	return 0
}

func (x *VideoFile) GetFileTime() uint32 {
	if x != nil && x.FileTime != nil {
		return *x.FileTime
	}
	return 0
}

func (x *VideoFile) GetFileSize() uint32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *VideoFile) GetThumbWidth() uint32 {
	if x != nil && x.ThumbWidth != nil {
		return *x.ThumbWidth
	}
	return 0
}

func (x *VideoFile) GetThumbHeight() uint32 {
	if x != nil && x.ThumbHeight != nil {
		return *x.ThumbHeight
	}
	return 0
}

func (x *VideoFile) GetThumbFileMd5() []byte {
	if x != nil {
		return x.ThumbFileMd5
	}
	return nil
}

func (x *VideoFile) GetSource() []byte {
	if x != nil {
		return x.Source
	}
	return nil
}

type AppShareInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *uint32     `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Cookie   []byte      `protobuf:"bytes,2,opt,name=cookie,proto3,oneof" json:"cookie,omitempty"`
	Resource *PluginInfo `protobuf:"bytes,3,opt,name=resource,proto3,oneof" json:"resource,omitempty"`
}

func (x *AppShareInfo) Reset() {
	*x = AppShareInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppShareInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppShareInfo) ProtoMessage() {}

func (x *AppShareInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppShareInfo.ProtoReflect.Descriptor instead.
func (*AppShareInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{33}
}

func (x *AppShareInfo) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *AppShareInfo) GetCookie() []byte {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *AppShareInfo) GetResource() *PluginInfo {
	if x != nil {
		return x.Resource
	}
	return nil
}

type C2CTempMessageHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	C2CType       *uint32 `protobuf:"varint,1,opt,name=c2cType,proto3,oneof" json:"c2cType,omitempty"`
	ServiceType   *uint32 `protobuf:"varint,2,opt,name=serviceType,proto3,oneof" json:"serviceType,omitempty"`
	GroupUin      *uint64 `protobuf:"varint,3,opt,name=groupUin,proto3,oneof" json:"groupUin,omitempty"`
	GroupCode     *uint64 `protobuf:"varint,4,opt,name=groupCode,proto3,oneof" json:"groupCode,omitempty"`
	Sig           []byte  `protobuf:"bytes,5,opt,name=sig,proto3,oneof" json:"sig,omitempty"`
	SigType       *uint32 `protobuf:"varint,6,opt,name=sigType,proto3,oneof" json:"sigType,omitempty"`
	FromPhone     *string `protobuf:"bytes,7,opt,name=fromPhone,proto3,oneof" json:"fromPhone,omitempty"`
	ToPhone       *string `protobuf:"bytes,8,opt,name=toPhone,proto3,oneof" json:"toPhone,omitempty"`
	LockDisplay   *uint32 `protobuf:"varint,9,opt,name=lockDisplay,proto3,oneof" json:"lockDisplay,omitempty"`
	DirectionFlag *uint32 `protobuf:"varint,10,opt,name=directionFlag,proto3,oneof" json:"directionFlag,omitempty"`
}

func (x *C2CTempMessageHead) Reset() {
	*x = C2CTempMessageHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2CTempMessageHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2CTempMessageHead) ProtoMessage() {}

func (x *C2CTempMessageHead) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2CTempMessageHead.ProtoReflect.Descriptor instead.
func (*C2CTempMessageHead) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{34}
}

func (x *C2CTempMessageHead) GetC2CType() uint32 {
	if x != nil && x.C2CType != nil {
		return *x.C2CType
	}
	return 0
}

func (x *C2CTempMessageHead) GetServiceType() uint32 {
	if x != nil && x.ServiceType != nil {
		return *x.ServiceType
	}
	return 0
}

func (x *C2CTempMessageHead) GetGroupUin() uint64 {
	if x != nil && x.GroupUin != nil {
		return *x.GroupUin
	}
	return 0
}

func (x *C2CTempMessageHead) GetGroupCode() uint64 {
	if x != nil && x.GroupCode != nil {
		return *x.GroupCode
	}
	return 0
}

func (x *C2CTempMessageHead) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

func (x *C2CTempMessageHead) GetSigType() uint32 {
	if x != nil && x.SigType != nil {
		return *x.SigType
	}
	return 0
}

func (x *C2CTempMessageHead) GetFromPhone() string {
	if x != nil && x.FromPhone != nil {
		return *x.FromPhone
	}
	return ""
}

func (x *C2CTempMessageHead) GetToPhone() string {
	if x != nil && x.ToPhone != nil {
		return *x.ToPhone
	}
	return ""
}

func (x *C2CTempMessageHead) GetLockDisplay() uint32 {
	if x != nil && x.LockDisplay != nil {
		return *x.LockDisplay
	}
	return 0
}

func (x *C2CTempMessageHead) GetDirectionFlag() uint32 {
	if x != nil && x.DirectionFlag != nil {
		return *x.DirectionFlag
	}
	return 0
}

type ContentHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PkgNum    *uint32 `protobuf:"varint,1,opt,name=pkgNum,proto3,oneof" json:"pkgNum,omitempty"`
	PkgIndex  *uint32 `protobuf:"varint,2,opt,name=pkgIndex,proto3,oneof" json:"pkgIndex,omitempty"`
	DivSeq    *uint32 `protobuf:"varint,3,opt,name=divSeq,proto3,oneof" json:"divSeq,omitempty"`
	AutoReply *uint32 `protobuf:"varint,4,opt,name=autoReply,proto3,oneof" json:"autoReply,omitempty"`
}

func (x *ContentHead) Reset() {
	*x = ContentHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentHead) ProtoMessage() {}

func (x *ContentHead) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentHead.ProtoReflect.Descriptor instead.
func (*ContentHead) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{35}
}

func (x *ContentHead) GetPkgNum() uint32 {
	if x != nil && x.PkgNum != nil {
		return *x.PkgNum
	}
	return 0
}

func (x *ContentHead) GetPkgIndex() uint32 {
	if x != nil && x.PkgIndex != nil {
		return *x.PkgIndex
	}
	return 0
}

func (x *ContentHead) GetDivSeq() uint32 {
	if x != nil && x.DivSeq != nil {
		return *x.DivSeq
	}
	return 0
}

func (x *ContentHead) GetAutoReply() uint32 {
	if x != nil && x.AutoReply != nil {
		return *x.AutoReply
	}
	return 0
}

type DiscussInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiscussUin     *uint64 `protobuf:"varint,1,opt,name=discussUin,proto3,oneof" json:"discussUin,omitempty"`
	DiscussType    *uint32 `protobuf:"varint,2,opt,name=discussType,proto3,oneof" json:"discussType,omitempty"`
	DiscussInfoSeq *uint64 `protobuf:"varint,3,opt,name=discussInfoSeq,proto3,oneof" json:"discussInfoSeq,omitempty"`
	DiscussRemark  []byte  `protobuf:"bytes,4,opt,name=discussRemark,proto3,oneof" json:"discussRemark,omitempty"`
}

func (x *DiscussInfo) Reset() {
	*x = DiscussInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscussInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscussInfo) ProtoMessage() {}

func (x *DiscussInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscussInfo.ProtoReflect.Descriptor instead.
func (*DiscussInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{36}
}

func (x *DiscussInfo) GetDiscussUin() uint64 {
	if x != nil && x.DiscussUin != nil {
		return *x.DiscussUin
	}
	return 0
}

func (x *DiscussInfo) GetDiscussType() uint32 {
	if x != nil && x.DiscussType != nil {
		return *x.DiscussType
	}
	return 0
}

func (x *DiscussInfo) GetDiscussInfoSeq() uint64 {
	if x != nil && x.DiscussInfoSeq != nil {
		return *x.DiscussInfoSeq
	}
	return 0
}

func (x *DiscussInfo) GetDiscussRemark() []byte {
	if x != nil {
		return x.DiscussRemark
	}
	return nil
}

type GroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupCode    *uint64 `protobuf:"varint,1,opt,name=groupCode,proto3,oneof" json:"groupCode,omitempty"`
	GroupType    *uint32 `protobuf:"varint,2,opt,name=groupType,proto3,oneof" json:"groupType,omitempty"`
	GroupInfoSeq *uint64 `protobuf:"varint,3,opt,name=groupInfoSeq,proto3,oneof" json:"groupInfoSeq,omitempty"`
	GroupCard    []byte  `protobuf:"bytes,4,opt,name=groupCard,proto3,oneof" json:"groupCard,omitempty"`
	GroupRank    []byte  `protobuf:"bytes,5,opt,name=groupRank,proto3,oneof" json:"groupRank,omitempty"`
	GroupLevel   *uint32 `protobuf:"varint,6,opt,name=groupLevel,proto3,oneof" json:"groupLevel,omitempty"`
}

func (x *GroupInfo) Reset() {
	*x = GroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfo) ProtoMessage() {}

func (x *GroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfo.ProtoReflect.Descriptor instead.
func (*GroupInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{37}
}

func (x *GroupInfo) GetGroupCode() uint64 {
	if x != nil && x.GroupCode != nil {
		return *x.GroupCode
	}
	return 0
}

func (x *GroupInfo) GetGroupType() uint32 {
	if x != nil && x.GroupType != nil {
		return *x.GroupType
	}
	return 0
}

func (x *GroupInfo) GetGroupInfoSeq() uint64 {
	if x != nil && x.GroupInfoSeq != nil {
		return *x.GroupInfoSeq
	}
	return 0
}

func (x *GroupInfo) GetGroupCard() []byte {
	if x != nil {
		return x.GroupCard
	}
	return nil
}

func (x *GroupInfo) GetGroupRank() []byte {
	if x != nil {
		return x.GroupRank
	}
	return nil
}

func (x *GroupInfo) GetGroupLevel() uint32 {
	if x != nil && x.GroupLevel != nil {
		return *x.GroupLevel
	}
	return 0
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageHead  *MessageHead  `protobuf:"bytes,1,opt,name=messageHead,proto3,oneof" json:"messageHead,omitempty"`
	ContentHead  *ContentHead  `protobuf:"bytes,2,opt,name=contentHead,proto3,oneof" json:"contentHead,omitempty"`
	MessageBody  *MessageBody  `protobuf:"bytes,3,opt,name=messageBody,proto3,oneof" json:"messageBody,omitempty"`
	AppShareInfo *AppShareInfo `protobuf:"bytes,4,opt,name=appShareInfo,proto3,oneof" json:"appShareInfo,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{38}
}

func (x *Message) GetMessageHead() *MessageHead {
	if x != nil {
		return x.MessageHead
	}
	return nil
}

func (x *Message) GetContentHead() *ContentHead {
	if x != nil {
		return x.ContentHead
	}
	return nil
}

func (x *Message) GetMessageBody() *MessageBody {
	if x != nil {
		return x.MessageBody
	}
	return nil
}

func (x *Message) GetAppShareInfo() *AppShareInfo {
	if x != nil {
		return x.AppShareInfo
	}
	return nil
}

type MessageHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUin            *uint64             `protobuf:"varint,1,opt,name=fromUin,proto3,oneof" json:"fromUin,omitempty"`
	ToUin              *uint64             `protobuf:"varint,2,opt,name=toUin,proto3,oneof" json:"toUin,omitempty"`
	MessageType        *uint32             `protobuf:"varint,3,opt,name=messageType,proto3,oneof" json:"messageType,omitempty"`
	C2CCmd             *uint32             `protobuf:"varint,4,opt,name=c2cCmd,proto3,oneof" json:"c2cCmd,omitempty"`
	MessageSeq         *uint32             `protobuf:"varint,5,opt,name=messageSeq,proto3,oneof" json:"messageSeq,omitempty"`
	MessageTime        *uint32             `protobuf:"varint,6,opt,name=messageTime,proto3,oneof" json:"messageTime,omitempty"`
	MessageUid         *uint64             `protobuf:"varint,7,opt,name=messageUid,proto3,oneof" json:"messageUid,omitempty"`
	C2CTempMessageHead *C2CTempMessageHead `protobuf:"bytes,8,opt,name=c2cTempMessageHead,proto3,oneof" json:"c2cTempMessageHead,omitempty"`
	GroupInfo          *GroupInfo          `protobuf:"bytes,9,opt,name=groupInfo,proto3,oneof" json:"groupInfo,omitempty"`
	FromAppId          *uint32             `protobuf:"varint,10,opt,name=fromAppId,proto3,oneof" json:"fromAppId,omitempty"`
	FromInstId         *uint32             `protobuf:"varint,11,opt,name=fromInstId,proto3,oneof" json:"fromInstId,omitempty"`
	UserActive         *uint32             `protobuf:"varint,12,opt,name=userActive,proto3,oneof" json:"userActive,omitempty"`
	DiscussInfo        *DiscussInfo        `protobuf:"bytes,13,opt,name=discussInfo,proto3,oneof" json:"discussInfo,omitempty"`
	FromNick           *string             `protobuf:"bytes,14,opt,name=fromNick,proto3,oneof" json:"fromNick,omitempty"`
	AuthUin            *uint64             `protobuf:"varint,15,opt,name=authUin,proto3,oneof" json:"authUin,omitempty"`
	AuthNick           *string             `protobuf:"bytes,16,opt,name=authNick,proto3,oneof" json:"authNick,omitempty"`
	MessageFlag        *uint32             `protobuf:"varint,17,opt,name=messageFlag,proto3,oneof" json:"messageFlag,omitempty"`
	AuthRemark         *string             `protobuf:"bytes,18,opt,name=authRemark,proto3,oneof" json:"authRemark,omitempty"`
	GroupName          *string             `protobuf:"bytes,19,opt,name=groupName,proto3,oneof" json:"groupName,omitempty"`
	MutilTransHead     *MutilTransHead     `protobuf:"bytes,20,opt,name=mutilTransHead,proto3,oneof" json:"mutilTransHead,omitempty"`
}

func (x *MessageHead) Reset() {
	*x = MessageHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageHead) ProtoMessage() {}

func (x *MessageHead) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageHead.ProtoReflect.Descriptor instead.
func (*MessageHead) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{39}
}

func (x *MessageHead) GetFromUin() uint64 {
	if x != nil && x.FromUin != nil {
		return *x.FromUin
	}
	return 0
}

func (x *MessageHead) GetToUin() uint64 {
	if x != nil && x.ToUin != nil {
		return *x.ToUin
	}
	return 0
}

func (x *MessageHead) GetMessageType() uint32 {
	if x != nil && x.MessageType != nil {
		return *x.MessageType
	}
	return 0
}

func (x *MessageHead) GetC2CCmd() uint32 {
	if x != nil && x.C2CCmd != nil {
		return *x.C2CCmd
	}
	return 0
}

func (x *MessageHead) GetMessageSeq() uint32 {
	if x != nil && x.MessageSeq != nil {
		return *x.MessageSeq
	}
	return 0
}

func (x *MessageHead) GetMessageTime() uint32 {
	if x != nil && x.MessageTime != nil {
		return *x.MessageTime
	}
	return 0
}

func (x *MessageHead) GetMessageUid() uint64 {
	if x != nil && x.MessageUid != nil {
		return *x.MessageUid
	}
	return 0
}

func (x *MessageHead) GetC2CTempMessageHead() *C2CTempMessageHead {
	if x != nil {
		return x.C2CTempMessageHead
	}
	return nil
}

func (x *MessageHead) GetGroupInfo() *GroupInfo {
	if x != nil {
		return x.GroupInfo
	}
	return nil
}

func (x *MessageHead) GetFromAppId() uint32 {
	if x != nil && x.FromAppId != nil {
		return *x.FromAppId
	}
	return 0
}

func (x *MessageHead) GetFromInstId() uint32 {
	if x != nil && x.FromInstId != nil {
		return *x.FromInstId
	}
	return 0
}

func (x *MessageHead) GetUserActive() uint32 {
	if x != nil && x.UserActive != nil {
		return *x.UserActive
	}
	return 0
}

func (x *MessageHead) GetDiscussInfo() *DiscussInfo {
	if x != nil {
		return x.DiscussInfo
	}
	return nil
}

func (x *MessageHead) GetFromNick() string {
	if x != nil && x.FromNick != nil {
		return *x.FromNick
	}
	return ""
}

func (x *MessageHead) GetAuthUin() uint64 {
	if x != nil && x.AuthUin != nil {
		return *x.AuthUin
	}
	return 0
}

func (x *MessageHead) GetAuthNick() string {
	if x != nil && x.AuthNick != nil {
		return *x.AuthNick
	}
	return ""
}

func (x *MessageHead) GetMessageFlag() uint32 {
	if x != nil && x.MessageFlag != nil {
		return *x.MessageFlag
	}
	return 0
}

func (x *MessageHead) GetAuthRemark() string {
	if x != nil && x.AuthRemark != nil {
		return *x.AuthRemark
	}
	return ""
}

func (x *MessageHead) GetGroupName() string {
	if x != nil && x.GroupName != nil {
		return *x.GroupName
	}
	return ""
}

func (x *MessageHead) GetMutilTransHead() *MutilTransHead {
	if x != nil {
		return x.MutilTransHead
	}
	return nil
}

type MutilTransHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *uint32 `protobuf:"varint,1,opt,name=status,proto3,oneof" json:"status,omitempty"`
}

func (x *MutilTransHead) Reset() {
	*x = MutilTransHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutilTransHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutilTransHead) ProtoMessage() {}

func (x *MutilTransHead) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutilTransHead.ProtoReflect.Descriptor instead.
func (*MutilTransHead) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{40}
}

func (x *MutilTransHead) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

type PluginInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *uint32 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	PkgName  *string `protobuf:"bytes,2,opt,name=pkgName,proto3,oneof" json:"pkgName,omitempty"`
	NewVer   *uint32 `protobuf:"varint,3,opt,name=newVer,proto3,oneof" json:"newVer,omitempty"`
	Type     *uint32 `protobuf:"varint,4,opt,name=type,proto3,oneof" json:"type,omitempty"`
	LanType  *uint32 `protobuf:"varint,5,opt,name=lanType,proto3,oneof" json:"lanType,omitempty"`
	Priority *uint32 `protobuf:"varint,6,opt,name=priority,proto3,oneof" json:"priority,omitempty"`
	Name     *string `protobuf:"bytes,7,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Desc     *string `protobuf:"bytes,8,opt,name=desc,proto3,oneof" json:"desc,omitempty"`
	UrlBig   *string `protobuf:"bytes,9,opt,name=urlBig,proto3,oneof" json:"urlBig,omitempty"`
	UrlSmall *string `protobuf:"bytes,10,opt,name=urlSmall,proto3,oneof" json:"urlSmall,omitempty"`
	Config   *string `protobuf:"bytes,11,opt,name=config,proto3,oneof" json:"config,omitempty"`
}

func (x *PluginInfo) Reset() {
	*x = PluginInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginInfo) ProtoMessage() {}

func (x *PluginInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginInfo.ProtoReflect.Descriptor instead.
func (*PluginInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{41}
}

func (x *PluginInfo) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *PluginInfo) GetPkgName() string {
	if x != nil && x.PkgName != nil {
		return *x.PkgName
	}
	return ""
}

func (x *PluginInfo) GetNewVer() uint32 {
	if x != nil && x.NewVer != nil {
		return *x.NewVer
	}
	return 0
}

func (x *PluginInfo) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *PluginInfo) GetLanType() uint32 {
	if x != nil && x.LanType != nil {
		return *x.LanType
	}
	return 0
}

func (x *PluginInfo) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *PluginInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PluginInfo) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *PluginInfo) GetUrlBig() string {
	if x != nil && x.UrlBig != nil {
		return *x.UrlBig
	}
	return ""
}

func (x *PluginInfo) GetUrlSmall() string {
	if x != nil && x.UrlSmall != nil {
		return *x.UrlSmall
	}
	return ""
}

func (x *PluginInfo) GetConfig() string {
	if x != nil && x.Config != nil {
		return *x.Config
	}
	return ""
}

type UinPairMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastReadTime     *uint32    `protobuf:"varint,1,opt,name=lastReadTime,proto3,oneof" json:"lastReadTime,omitempty"`
	PeerUin          *uint32    `protobuf:"varint,2,opt,name=peerUin,proto3,oneof" json:"peerUin,omitempty"`
	MessageCompleted *uint32    `protobuf:"varint,3,opt,name=messageCompleted,proto3,oneof" json:"messageCompleted,omitempty"`
	Messages         []*Message `protobuf:"bytes,4,rep,name=messages,proto3" json:"messages,omitempty"`
	UnreadMessageNum *uint32    `protobuf:"varint,5,opt,name=unreadMessageNum,proto3,oneof" json:"unreadMessageNum,omitempty"`
}

func (x *UinPairMessage) Reset() {
	*x = UinPairMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UinPairMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UinPairMessage) ProtoMessage() {}

func (x *UinPairMessage) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UinPairMessage.ProtoReflect.Descriptor instead.
func (*UinPairMessage) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{42}
}

func (x *UinPairMessage) GetLastReadTime() uint32 {
	if x != nil && x.LastReadTime != nil {
		return *x.LastReadTime
	}
	return 0
}

func (x *UinPairMessage) GetPeerUin() uint32 {
	if x != nil && x.PeerUin != nil {
		return *x.PeerUin
	}
	return 0
}

func (x *UinPairMessage) GetMessageCompleted() uint32 {
	if x != nil && x.MessageCompleted != nil {
		return *x.MessageCompleted
	}
	return 0
}

func (x *UinPairMessage) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *UinPairMessage) GetUnreadMessageNum() uint32 {
	if x != nil && x.UnreadMessageNum != nil {
		return *x.UnreadMessageNum
	}
	return 0
}

type C2C struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uin uint64 `protobuf:"varint,1,opt,name=uin,proto3" json:"uin,omitempty"`
}

func (x *C2C) Reset() {
	*x = C2C{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2C) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2C) ProtoMessage() {}

func (x *C2C) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2C.ProtoReflect.Descriptor instead.
func (*C2C) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{43}
}

func (x *C2C) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

type MessageDeleteMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageItems []*MessageDeleteMessageRequest_MessageItem `protobuf:"bytes,1,rep,name=messageItems,proto3" json:"messageItems,omitempty"`
}

func (x *MessageDeleteMessageRequest) Reset() {
	*x = MessageDeleteMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageDeleteMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageDeleteMessageRequest) ProtoMessage() {}

func (x *MessageDeleteMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageDeleteMessageRequest.ProtoReflect.Descriptor instead.
func (*MessageDeleteMessageRequest) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{44}
}

func (x *MessageDeleteMessageRequest) GetMessageItems() []*MessageDeleteMessageRequest_MessageItem {
	if x != nil {
		return x.MessageItems
	}
	return nil
}

type MessageDeleteMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result       *uint32 `protobuf:"varint,1,opt,name=result,proto3,oneof" json:"result,omitempty"`
	ErrorMessage *string `protobuf:"bytes,2,opt,name=errorMessage,proto3,oneof" json:"errorMessage,omitempty"`
}

func (x *MessageDeleteMessageResponse) Reset() {
	*x = MessageDeleteMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageDeleteMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageDeleteMessageResponse) ProtoMessage() {}

func (x *MessageDeleteMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageDeleteMessageResponse.ProtoReflect.Descriptor instead.
func (*MessageDeleteMessageResponse) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{45}
}

func (x *MessageDeleteMessageResponse) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *MessageDeleteMessageResponse) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

type Discussion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *Discussion) Reset() {
	*x = Discussion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Discussion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Discussion) ProtoMessage() {}

func (x *Discussion) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Discussion.ProtoReflect.Descriptor instead.
func (*Discussion) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{46}
}

func (x *Discussion) GetCode() uint64 {
	if x != nil {
		return x.Code
	}
	return 0
}

type DiscussionTemp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	ToUin uint64 `protobuf:"varint,2,opt,name=toUin,proto3" json:"toUin,omitempty"`
}

func (x *DiscussionTemp) Reset() {
	*x = DiscussionTemp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscussionTemp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscussionTemp) ProtoMessage() {}

func (x *DiscussionTemp) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscussionTemp.ProtoReflect.Descriptor instead.
func (*DiscussionTemp) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{47}
}

func (x *DiscussionTemp) GetCode() uint64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DiscussionTemp) GetToUin() uint64 {
	if x != nil {
		return x.ToUin
	}
	return 0
}

type MessageGetMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SyncFlag            uint32 `protobuf:"varint,1,opt,name=syncFlag,proto3" json:"syncFlag,omitempty"`
	SyncCookie          []byte `protobuf:"bytes,2,opt,name=syncCookie,proto3" json:"syncCookie,omitempty"`
	RambleFlag          uint32 `protobuf:"varint,3,opt,name=rambleFlag,proto3" json:"rambleFlag,omitempty"`
	LatestRambleNumber  uint32 `protobuf:"varint,4,opt,name=latestRambleNumber,proto3" json:"latestRambleNumber,omitempty"`
	OtherRambleNumber   uint32 `protobuf:"varint,5,opt,name=otherRambleNumber,proto3" json:"otherRambleNumber,omitempty"`
	OnlineSyncFlag      uint32 `protobuf:"varint,6,opt,name=onlineSyncFlag,proto3" json:"onlineSyncFlag,omitempty"`
	ContextFlag         uint32 `protobuf:"varint,7,opt,name=contextFlag,proto3" json:"contextFlag,omitempty"`
	WhisperSessionId    uint32 `protobuf:"varint,8,opt,name=whisperSessionId,proto3" json:"whisperSessionId,omitempty"`
	RequestType         uint32 `protobuf:"varint,9,opt,name=requestType,proto3" json:"requestType,omitempty"`
	PublicAccountCookie []byte `protobuf:"bytes,10,opt,name=publicAccountCookie,proto3" json:"publicAccountCookie,omitempty"`
	ControlBuffer       []byte `protobuf:"bytes,11,opt,name=controlBuffer,proto3" json:"controlBuffer,omitempty"`
	ServerBuffer        []byte `protobuf:"bytes,12,opt,name=serverBuffer,proto3" json:"serverBuffer,omitempty"`
}

func (x *MessageGetMessageRequest) Reset() {
	*x = MessageGetMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageGetMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageGetMessageRequest) ProtoMessage() {}

func (x *MessageGetMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageGetMessageRequest.ProtoReflect.Descriptor instead.
func (*MessageGetMessageRequest) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{48}
}

func (x *MessageGetMessageRequest) GetSyncFlag() uint32 {
	if x != nil {
		return x.SyncFlag
	}
	return 0
}

func (x *MessageGetMessageRequest) GetSyncCookie() []byte {
	if x != nil {
		return x.SyncCookie
	}
	return nil
}

func (x *MessageGetMessageRequest) GetRambleFlag() uint32 {
	if x != nil {
		return x.RambleFlag
	}
	return 0
}

func (x *MessageGetMessageRequest) GetLatestRambleNumber() uint32 {
	if x != nil {
		return x.LatestRambleNumber
	}
	return 0
}

func (x *MessageGetMessageRequest) GetOtherRambleNumber() uint32 {
	if x != nil {
		return x.OtherRambleNumber
	}
	return 0
}

func (x *MessageGetMessageRequest) GetOnlineSyncFlag() uint32 {
	if x != nil {
		return x.OnlineSyncFlag
	}
	return 0
}

func (x *MessageGetMessageRequest) GetContextFlag() uint32 {
	if x != nil {
		return x.ContextFlag
	}
	return 0
}

func (x *MessageGetMessageRequest) GetWhisperSessionId() uint32 {
	if x != nil {
		return x.WhisperSessionId
	}
	return 0
}

func (x *MessageGetMessageRequest) GetRequestType() uint32 {
	if x != nil {
		return x.RequestType
	}
	return 0
}

func (x *MessageGetMessageRequest) GetPublicAccountCookie() []byte {
	if x != nil {
		return x.PublicAccountCookie
	}
	return nil
}

func (x *MessageGetMessageRequest) GetControlBuffer() []byte {
	if x != nil {
		return x.ControlBuffer
	}
	return nil
}

func (x *MessageGetMessageRequest) GetServerBuffer() []byte {
	if x != nil {
		return x.ServerBuffer
	}
	return nil
}

type MessageGetMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result          *uint32           `protobuf:"varint,1,opt,name=result,proto3,oneof" json:"result,omitempty"`
	ErrorMessage    *string           `protobuf:"bytes,2,opt,name=errorMessage,proto3,oneof" json:"errorMessage,omitempty"`
	SyncCookie      []byte            `protobuf:"bytes,3,opt,name=syncCookie,proto3,oneof" json:"syncCookie,omitempty"`
	SyncFlag        *uint32           `protobuf:"varint,4,opt,name=syncFlag,proto3,oneof" json:"syncFlag,omitempty"`
	UinPairMessages []*UinPairMessage `protobuf:"bytes,5,rep,name=uinPairMessages,proto3" json:"uinPairMessages,omitempty"`
	BindUin         *uint64           `protobuf:"varint,6,opt,name=bindUin,proto3,oneof" json:"bindUin,omitempty"`
}

func (x *MessageGetMessageResponse) Reset() {
	*x = MessageGetMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageGetMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageGetMessageResponse) ProtoMessage() {}

func (x *MessageGetMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageGetMessageResponse.ProtoReflect.Descriptor instead.
func (*MessageGetMessageResponse) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{49}
}

func (x *MessageGetMessageResponse) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *MessageGetMessageResponse) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *MessageGetMessageResponse) GetSyncCookie() []byte {
	if x != nil {
		return x.SyncCookie
	}
	return nil
}

func (x *MessageGetMessageResponse) GetSyncFlag() uint32 {
	if x != nil && x.SyncFlag != nil {
		return *x.SyncFlag
	}
	return 0
}

func (x *MessageGetMessageResponse) GetUinPairMessages() []*UinPairMessage {
	if x != nil {
		return x.UinPairMessages
	}
	return nil
}

func (x *MessageGetMessageResponse) GetBindUin() uint64 {
	if x != nil && x.BindUin != nil {
		return *x.BindUin
	}
	return 0
}

type Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *Group) Reset() {
	*x = Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group) ProtoMessage() {}

func (x *Group) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group.ProtoReflect.Descriptor instead.
func (*Group) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{50}
}

func (x *Group) GetCode() uint64 {
	if x != nil {
		return x.Code
	}
	return 0
}

type GroupTemp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	ToUin uint64 `protobuf:"varint,2,opt,name=toUin,proto3" json:"toUin,omitempty"`
}

func (x *GroupTemp) Reset() {
	*x = GroupTemp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupTemp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupTemp) ProtoMessage() {}

func (x *GroupTemp) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupTemp.ProtoReflect.Descriptor instead.
func (*GroupTemp) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{51}
}

func (x *GroupTemp) GetCode() uint64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GroupTemp) GetToUin() uint64 {
	if x != nil {
		return x.ToUin
	}
	return 0
}

type RoutingHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	C2C            *C2C            `protobuf:"bytes,1,opt,name=c2c,proto3" json:"c2c,omitempty"`
	Group          *Group          `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	GroupTemp      *GroupTemp      `protobuf:"bytes,3,opt,name=groupTemp,proto3" json:"groupTemp,omitempty"`
	Discussion     *Discussion     `protobuf:"bytes,4,opt,name=discussion,proto3" json:"discussion,omitempty"`
	DiscussionTemp *DiscussionTemp `protobuf:"bytes,5,opt,name=discussionTemp,proto3" json:"discussionTemp,omitempty"`
}

func (x *RoutingHead) Reset() {
	*x = RoutingHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingHead) ProtoMessage() {}

func (x *RoutingHead) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingHead.ProtoReflect.Descriptor instead.
func (*RoutingHead) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{52}
}

func (x *RoutingHead) GetC2C() *C2C {
	if x != nil {
		return x.C2C
	}
	return nil
}

func (x *RoutingHead) GetGroup() *Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *RoutingHead) GetGroupTemp() *GroupTemp {
	if x != nil {
		return x.GroupTemp
	}
	return nil
}

func (x *RoutingHead) GetDiscussion() *Discussion {
	if x != nil {
		return x.Discussion
	}
	return nil
}

func (x *RoutingHead) GetDiscussionTemp() *DiscussionTemp {
	if x != nil {
		return x.DiscussionTemp
	}
	return nil
}

type MessageSendMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoutingHead *RoutingHead  `protobuf:"bytes,1,opt,name=routingHead,proto3" json:"routingHead,omitempty"`
	ContentHead *ContentHead  `protobuf:"bytes,2,opt,name=contentHead,proto3" json:"contentHead,omitempty"`
	MessageBody *MessageBody  `protobuf:"bytes,3,opt,name=messageBody,proto3" json:"messageBody,omitempty"`
	MessageSeq  uint32        `protobuf:"varint,4,opt,name=messageSeq,proto3" json:"messageSeq,omitempty"`
	MessageRand uint32        `protobuf:"varint,5,opt,name=messageRand,proto3" json:"messageRand,omitempty"`
	SyncCookie  []byte        `protobuf:"bytes,6,opt,name=syncCookie,proto3" json:"syncCookie,omitempty"`
	AppShare    *AppShareInfo `protobuf:"bytes,7,opt,name=appShare,proto3" json:"appShare,omitempty"`
	MessageVia  uint32        `protobuf:"varint,8,opt,name=messageVia,proto3" json:"messageVia,omitempty"`
}

func (x *MessageSendMessageRequest) Reset() {
	*x = MessageSendMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageSendMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSendMessageRequest) ProtoMessage() {}

func (x *MessageSendMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSendMessageRequest.ProtoReflect.Descriptor instead.
func (*MessageSendMessageRequest) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{53}
}

func (x *MessageSendMessageRequest) GetRoutingHead() *RoutingHead {
	if x != nil {
		return x.RoutingHead
	}
	return nil
}

func (x *MessageSendMessageRequest) GetContentHead() *ContentHead {
	if x != nil {
		return x.ContentHead
	}
	return nil
}

func (x *MessageSendMessageRequest) GetMessageBody() *MessageBody {
	if x != nil {
		return x.MessageBody
	}
	return nil
}

func (x *MessageSendMessageRequest) GetMessageSeq() uint32 {
	if x != nil {
		return x.MessageSeq
	}
	return 0
}

func (x *MessageSendMessageRequest) GetMessageRand() uint32 {
	if x != nil {
		return x.MessageRand
	}
	return 0
}

func (x *MessageSendMessageRequest) GetSyncCookie() []byte {
	if x != nil {
		return x.SyncCookie
	}
	return nil
}

func (x *MessageSendMessageRequest) GetAppShare() *AppShareInfo {
	if x != nil {
		return x.AppShare
	}
	return nil
}

func (x *MessageSendMessageRequest) GetMessageVia() uint32 {
	if x != nil {
		return x.MessageVia
	}
	return 0
}

type MessageSendMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result       *uint32 `protobuf:"varint,1,opt,name=result,proto3,oneof" json:"result,omitempty"`
	ErrorMessage *string `protobuf:"bytes,2,opt,name=errorMessage,proto3,oneof" json:"errorMessage,omitempty"`
	SendTime     *uint32 `protobuf:"varint,3,opt,name=sendTime,proto3,oneof" json:"sendTime,omitempty"`
}

func (x *MessageSendMessageResponse) Reset() {
	*x = MessageSendMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageSendMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSendMessageResponse) ProtoMessage() {}

func (x *MessageSendMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSendMessageResponse.ProtoReflect.Descriptor instead.
func (*MessageSendMessageResponse) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{54}
}

func (x *MessageSendMessageResponse) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *MessageSendMessageResponse) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *MessageSendMessageResponse) GetSendTime() uint32 {
	if x != nil && x.SendTime != nil {
		return *x.SendTime
	}
	return 0
}

type OnlinePushMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message     *Message `protobuf:"bytes,1,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Svrip       *int32   `protobuf:"varint,2,opt,name=svrip,proto3,oneof" json:"svrip,omitempty"`
	PushToken   []byte   `protobuf:"bytes,3,opt,name=pushToken,proto3,oneof" json:"pushToken,omitempty"`
	PingFlag    *uint32  `protobuf:"varint,4,opt,name=pingFlag,proto3,oneof" json:"pingFlag,omitempty"`
	GeneralFlag *uint32  `protobuf:"varint,5,opt,name=generalFlag,proto3,oneof" json:"generalFlag,omitempty"`
	BindUin     *uint64  `protobuf:"varint,6,opt,name=bindUin,proto3,oneof" json:"bindUin,omitempty"`
}

func (x *OnlinePushMessage) Reset() {
	*x = OnlinePushMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlinePushMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlinePushMessage) ProtoMessage() {}

func (x *OnlinePushMessage) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlinePushMessage.ProtoReflect.Descriptor instead.
func (*OnlinePushMessage) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{55}
}

func (x *OnlinePushMessage) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *OnlinePushMessage) GetSvrip() int32 {
	if x != nil && x.Svrip != nil {
		return *x.Svrip
	}
	return 0
}

func (x *OnlinePushMessage) GetPushToken() []byte {
	if x != nil {
		return x.PushToken
	}
	return nil
}

func (x *OnlinePushMessage) GetPingFlag() uint32 {
	if x != nil && x.PingFlag != nil {
		return *x.PingFlag
	}
	return 0
}

func (x *OnlinePushMessage) GetGeneralFlag() uint32 {
	if x != nil && x.GeneralFlag != nil {
		return *x.GeneralFlag
	}
	return 0
}

func (x *OnlinePushMessage) GetBindUin() uint64 {
	if x != nil && x.BindUin != nil {
		return *x.BindUin
	}
	return 0
}

type ElementFlags2_Instant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId  *uint32 `protobuf:"varint,1,opt,name=appId,proto3,oneof" json:"appId,omitempty"`
	InstId *uint32 `protobuf:"varint,2,opt,name=instId,proto3,oneof" json:"instId,omitempty"`
}

func (x *ElementFlags2_Instant) Reset() {
	*x = ElementFlags2_Instant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementFlags2_Instant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementFlags2_Instant) ProtoMessage() {}

func (x *ElementFlags2_Instant) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementFlags2_Instant.ProtoReflect.Descriptor instead.
func (*ElementFlags2_Instant) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ElementFlags2_Instant) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *ElementFlags2_Instant) GetInstId() uint32 {
	if x != nil && x.InstId != nil {
		return *x.InstId
	}
	return 0
}

type FunFace_Bomb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Burst *bool `protobuf:"varint,1,opt,name=burst,proto3,oneof" json:"burst,omitempty"`
}

func (x *FunFace_Bomb) Reset() {
	*x = FunFace_Bomb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunFace_Bomb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunFace_Bomb) ProtoMessage() {}

func (x *FunFace_Bomb) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunFace_Bomb.ProtoReflect.Descriptor instead.
func (*FunFace_Bomb) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{8, 0}
}

func (x *FunFace_Bomb) GetBurst() bool {
	if x != nil && x.Burst != nil {
		return *x.Burst
	}
	return false
}

type FunFace_Turntable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UinList    []uint64 `protobuf:"varint,1,rep,packed,name=uinList,proto3" json:"uinList,omitempty"`
	HitUin     *uint64  `protobuf:"varint,2,opt,name=hitUin,proto3,oneof" json:"hitUin,omitempty"`
	HitUinNick *string  `protobuf:"bytes,3,opt,name=hitUinNick,proto3,oneof" json:"hitUinNick,omitempty"`
}

func (x *FunFace_Turntable) Reset() {
	*x = FunFace_Turntable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunFace_Turntable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunFace_Turntable) ProtoMessage() {}

func (x *FunFace_Turntable) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunFace_Turntable.ProtoReflect.Descriptor instead.
func (*FunFace_Turntable) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{8, 1}
}

func (x *FunFace_Turntable) GetUinList() []uint64 {
	if x != nil {
		return x.UinList
	}
	return nil
}

func (x *FunFace_Turntable) GetHitUin() uint64 {
	if x != nil && x.HitUin != nil {
		return *x.HitUin
	}
	return 0
}

func (x *FunFace_Turntable) GetHitUinNick() string {
	if x != nil && x.HitUinNick != nil {
		return *x.HitUinNick
	}
	return ""
}

type MessageDeleteMessageRequest_MessageItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUin     uint64 `protobuf:"varint,1,opt,name=fromUin,proto3" json:"fromUin,omitempty"`
	ToUin       uint64 `protobuf:"varint,2,opt,name=toUin,proto3" json:"toUin,omitempty"`
	MessageType uint32 `protobuf:"varint,3,opt,name=messageType,proto3" json:"messageType,omitempty"`
	MessageSeq  uint32 `protobuf:"varint,4,opt,name=messageSeq,proto3" json:"messageSeq,omitempty"`
	MessageUid  uint64 `protobuf:"varint,5,opt,name=messageUid,proto3" json:"messageUid,omitempty"`
}

func (x *MessageDeleteMessageRequest_MessageItem) Reset() {
	*x = MessageDeleteMessageRequest_MessageItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageDeleteMessageRequest_MessageItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageDeleteMessageRequest_MessageItem) ProtoMessage() {}

func (x *MessageDeleteMessageRequest_MessageItem) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageDeleteMessageRequest_MessageItem.ProtoReflect.Descriptor instead.
func (*MessageDeleteMessageRequest_MessageItem) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{44, 0}
}

func (x *MessageDeleteMessageRequest_MessageItem) GetFromUin() uint64 {
	if x != nil {
		return x.FromUin
	}
	return 0
}

func (x *MessageDeleteMessageRequest_MessageItem) GetToUin() uint64 {
	if x != nil {
		return x.ToUin
	}
	return 0
}

func (x *MessageDeleteMessageRequest_MessageItem) GetMessageType() uint32 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *MessageDeleteMessageRequest_MessageItem) GetMessageSeq() uint32 {
	if x != nil {
		return x.MessageSeq
	}
	return 0
}

func (x *MessageDeleteMessageRequest_MessageItem) GetMessageUid() uint64 {
	if x != nil {
		return x.MessageUid
	}
	return 0
}

var File_message_proto protoreflect.FileDescriptor

var file_message_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xdf, 0x02, 0x0a, 0x15, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x6e, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x06, 0x61, 0x6e, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x61, 0x6e, 0x6f, 0x6e, 0x4e, 0x69, 0x63, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x08, 0x61, 0x6e, 0x6f, 0x6e, 0x4e, 0x69, 0x63, 0x6b, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x64,
	0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x04, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x05, 0x52, 0x08, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x06, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x6e,
	0x6f, 0x6e, 0x4e, 0x69, 0x63, 0x6b, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x50,
	0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x75, 0x62, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x22, 0xc2, 0x03, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x1f, 0x0a, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x11, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x06, 0x72, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x06, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x72, 0x53,
	0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x06, 0x52, 0x07, 0x63, 0x68, 0x61, 0x72,
	0x53, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x70, 0x69, 0x74, 0x63, 0x68, 0x41,
	0x6e, 0x64, 0x41, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x07,
	0x52, 0x0e, 0x70, 0x69, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x64, 0x41, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x67, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63,
	0x68, 0x61, 0x72, 0x53, 0x65, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x69, 0x74, 0x63, 0x68,
	0x41, 0x6e, 0x64, 0x41, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x6f,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x9a, 0x07, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x46, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x6f, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x6f, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x64, 0x35, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x69, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x69, 0x67,
	0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x69, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x69, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x77, 0x4c, 0x65, 0x6e, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x77, 0x4c, 0x65, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x72, 0x6c, 0x34, 0x30, 0x30, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x72, 0x6c, 0x34, 0x30, 0x30, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x34, 0x30, 0x30, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x34, 0x30, 0x30, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x34, 0x30, 0x30,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x34, 0x30,
	0x30, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x22, 0xbe, 0x0d, 0x0a, 0x07, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1e, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e,
	0x54, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x04, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e,
	0x46, 0x61, 0x63, 0x65, 0x48, 0x01, 0x52, 0x04, 0x66, 0x61, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x0b, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x48, 0x02, 0x52, 0x0b, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4e,
	0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x03, 0x52,
	0x0e, 0x6e, 0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x36, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x04, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x0a, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x46, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x46, 0x61, 0x63, 0x65, 0x48, 0x05, 0x52, 0x0a, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x46, 0x61, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0c,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x48, 0x06, 0x52, 0x0c, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x61,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x46, 0x61, 0x63, 0x65, 0x48, 0x07, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46,
	0x61, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0d, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x32, 0x48, 0x08, 0x52,
	0x0d, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x32, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x07, 0x66, 0x75, 0x6e, 0x46, 0x61, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x75, 0x6e, 0x46, 0x61, 0x63, 0x65, 0x48, 0x09, 0x52, 0x07,
	0x66, 0x75, 0x6e, 0x46, 0x61, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x11, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x0a, 0x52, 0x11, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x33, 0x0a, 0x0b, 0x72, 0x69, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x52, 0x69, 0x63, 0x68, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x0b, 0x52, 0x0b, 0x72, 0x69, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x46,
	0x69, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x0c, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x0d, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0b, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x48, 0x0e, 0x52,
	0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x2d, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x0f,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x0b, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x48, 0x10, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x11, 0x52, 0x0d, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x12, 0x52,
	0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x08, 0x74, 0x69, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x54, 0x69, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x13, 0x52, 0x08, 0x74, 0x69,
	0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x15, 0x61, 0x6e, 0x6f,
	0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41, 0x6e, 0x6f, 0x6e, 0x79,
	0x6d, 0x6f, 0x75, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x14, 0x52, 0x15, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x09,
	0x71, 0x71, 0x4c, 0x69, 0x76, 0x65, 0x4f, 0x6c, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x51, 0x51, 0x4c, 0x69, 0x76, 0x65, 0x4f, 0x6c, 0x64, 0x48, 0x15, 0x52, 0x09, 0x71,
	0x71, 0x4c, 0x69, 0x76, 0x65, 0x4f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x0a, 0x6c,
	0x69, 0x66, 0x65, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x48, 0x16, 0x52, 0x0a, 0x6c, 0x69, 0x66, 0x65, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x62, 0x61, 0x6e, 0x6b, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x63, 0x74, 0x72, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x17, 0x52, 0x10, 0x62, 0x61, 0x6e, 0x6b, 0x63, 0x6f, 0x64, 0x65, 0x43, 0x74, 0x72, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x18,
	0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x66, 0x61, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6e, 0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x46, 0x61, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x46, 0x61, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x32, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x75,
	0x6e, 0x46, 0x61, 0x63, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x72, 0x69, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x68, 0x61, 0x6b,
	0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x70, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f,
	0x75, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x71, 0x71, 0x4c, 0x69, 0x76, 0x65, 0x4f, 0x6c, 0x64, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x6c, 0x69, 0x66, 0x65, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x62, 0x61, 0x6e, 0x6b, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x6d, 0x0a, 0x0c, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x22, 0xd3, 0x06, 0x0a, 0x0d, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x32, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x65,
	0x78, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x01, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x2f, 0x0a, 0x10, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x10, 0x77, 0x68, 0x69,
	0x73, 0x70, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x0c, 0x70, 0x74, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x0c, 0x70, 0x74, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x42, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x76, 0x69, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x09,
	0x76, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x08, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x32, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52,
	0x08, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0c, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x06, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x32, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x07,
	0x52, 0x0a, 0x73, 0x72, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0a, 0x6c, 0x6f, 0x6e, 0x67, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x08, 0x52, 0x0a, 0x6c, 0x6f, 0x6e, 0x67, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41,
	0x6f, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0a, 0x52, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x41, 0x6f, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0c, 0x70, 0x63,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x66, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x50, 0x43, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x66, 0x48,
	0x0b, 0x52, 0x0c, 0x70, 0x63, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x66, 0x88,
	0x01, 0x01, 0x1a, 0x56, 0x0a, 0x07, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x19, 0x0a,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x69, 0x6e, 0x73, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x06, 0x69, 0x6e, 0x73, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x70, 0x70, 0x49, 0x64, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x77, 0x68, 0x69,
	0x73, 0x70, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x70, 0x74, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x74, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x76, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x73, 0x72, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x41, 0x6f, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x63, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x66, 0x22, 0xd7, 0x04, 0x0a, 0x09, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x72, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x02, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x09,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x61,
	0x69, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x06, 0x52, 0x0b,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x61, 0x70, 0x6e, 0x73, 0x54, 0x69, 0x70, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x07, 0x52, 0x08, 0x61, 0x70, 0x6e, 0x73, 0x54, 0x69, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x48, 0x08, 0x52, 0x03,
	0x75, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x61, 0x70, 0x6e, 0x73, 0x53,
	0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0a,
	0x52, 0x0d, 0x61, 0x70, 0x6e, 0x73, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0b, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x6e, 0x69, 0x63, 0x6b, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61,
	0x72, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x61, 0x73, 0x6b, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x70, 0x6e, 0x73, 0x54,
	0x69, 0x70, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x69, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x70, 0x6e, 0x73, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6e, 0x65, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46,
	0x6c, 0x61, 0x67, 0x22, 0x46, 0x0a, 0x04, 0x46, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x6f, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0xb0, 0x02, 0x0a, 0x07,
	0x46, 0x75, 0x6e, 0x46, 0x61, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x74, 0x75, 0x72, 0x6e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x75, 0x6e,
	0x46, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00,
	0x52, 0x09, 0x74, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x04, 0x62, 0x6f, 0x6d, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x46,
	0x75, 0x6e, 0x46, 0x61, 0x63, 0x65, 0x2e, 0x42, 0x6f, 0x6d, 0x62, 0x48, 0x01, 0x52, 0x04, 0x62,
	0x6f, 0x6d, 0x62, 0x88, 0x01, 0x01, 0x1a, 0x2b, 0x0a, 0x04, 0x42, 0x6f, 0x6d, 0x62, 0x12, 0x19,
	0x0a, 0x05, 0x62, 0x75, 0x72, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x05, 0x62, 0x75, 0x72, 0x73, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x75,
	0x72, 0x73, 0x74, 0x1a, 0x81, 0x01, 0x0a, 0x09, 0x54, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x07, 0x75, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x68,
	0x69, 0x74, 0x55, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x06, 0x68,
	0x69, 0x74, 0x55, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x68, 0x69, 0x74, 0x55,
	0x69, 0x6e, 0x4e, 0x69, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a,
	0x68, 0x69, 0x74, 0x55, 0x69, 0x6e, 0x4e, 0x69, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x68, 0x69, 0x74, 0x55, 0x69, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x68, 0x69, 0x74,
	0x55, 0x69, 0x6e, 0x4e, 0x69, 0x63, 0x6b, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x75, 0x72, 0x6e,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62, 0x6f, 0x6d, 0x62, 0x22, 0xaf,
	0x03, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x01, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x03, 0x52, 0x07,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x04, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x05, 0x52, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x06, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x07, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x66, 0x65,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x08, 0x52, 0x0f, 0x66, 0x65, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x66, 0x65, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xfa, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x66, 0x65, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x02, 0x6f, 0x70, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x73, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02,
	0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52,
	0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x61, 0x63,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x05, 0x52, 0x06, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x6f, 0x70, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x61,
	0x63, 0x6b, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x22, 0xd2, 0x02,
	0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x46, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x61, 0x62, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x22, 0x91, 0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x78, 0x6d, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x78, 0x6d, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x41, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x41,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x86, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x2a, 0x0a, 0x08, 0x72, 0x69, 0x63, 0x68, 0x54, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x52, 0x69, 0x63, 0x68, 0x54,
	0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x08, 0x72, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x0e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22,
	0xf2, 0x05, 0x0a, 0x0d, 0x4e, 0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x73, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x01, 0x52, 0x03, 0x73, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x03, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x04, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x05, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e,
	0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x06, 0x52, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x07, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x63, 0x6d, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x08, 0x52, 0x06, 0x73, 0x75, 0x62, 0x63, 0x6d, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x09, 0x52, 0x0a, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x64, 0x61, 0x6e, 0x67, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0a, 0x52, 0x0a, 0x64,
	0x61, 0x6e, 0x67, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x6c, 0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0b,
	0x52, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x0c, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x61, 0x62, 0x73, 0x41, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0d, 0x52, 0x0b, 0x61, 0x62, 0x73, 0x41, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0e, 0x52,
	0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x0f, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x73, 0x69, 0x67, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x55, 0x75, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64,
	0x35, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x6e, 0x6f, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x75, 0x62, 0x63, 0x6d, 0x64, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x64, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c,
	0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x62, 0x73, 0x41, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xc6, 0x05, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x6d, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x69, 0x6d, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x69, 0x63, 0x4d, 0x64, 0x35, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70,
	0x69, 0x63, 0x4d, 0x64, 0x35, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x69, 0x63, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x69, 0x63, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x69, 0x63, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x69, 0x63, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x65, 0x73, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x72, 0x65, 0x73, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x55, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x69, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x62, 0x69, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x69,
	0x67, 0x55, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x69, 0x67,
	0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x6f,
	0x70, 0x41, 0x61, 0x63, 0x65, 0x42, 0x75, 0x66, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x6f, 0x70, 0x41, 0x61, 0x63, 0x65, 0x42, 0x75, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x6c, 0x64,
	0x50, 0x69, 0x63, 0x4d, 0x64, 0x35, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x6c,
	0x64, 0x50, 0x69, 0x63, 0x4d, 0x64, 0x35, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x68,
	0x75, 0x6d, 0x62, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x77, 0x4c, 0x65, 0x6e, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x77, 0x4c, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x22, 0x8b, 0x01,
	0x0a, 0x0b, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a,
	0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x67,
	0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x08, 0x73, 0x65, 0x6e,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x67, 0x75, 0x69,
	0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x22, 0xa2, 0x02, 0x0a, 0x0c,
	0x50, 0x43, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x66, 0x12, 0x23, 0x0a, 0x0a,
	0x70, 0x63, 0x50, 0x74, 0x6c, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x0a, 0x70, 0x63, 0x50, 0x74, 0x6c, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x63, 0x50, 0x74, 0x6c, 0x45, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x08, 0x70, 0x63, 0x50, 0x74, 0x6c, 0x45, 0x6e, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x50, 0x74, 0x6c, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x50, 0x74,
	0x6c, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x6d, 0x61, 0x63,
	0x50, 0x74, 0x6c, 0x45, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x09,
	0x6d, 0x61, 0x63, 0x50, 0x74, 0x6c, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x74, 0x6c, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0b, 0x70, 0x74, 0x6c, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x70, 0x74, 0x6c, 0x73, 0x4e, 0x6f, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x74, 0x6c, 0x73, 0x4e, 0x6f, 0x74, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x63, 0x50, 0x74, 0x6c,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x63, 0x50, 0x74, 0x6c, 0x45,
	0x6e, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x61, 0x63, 0x50, 0x74, 0x6c, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x61, 0x63, 0x50, 0x74, 0x6c, 0x45, 0x6e, 0x64,
	0x22, 0xd6, 0x06, 0x0a, 0x03, 0x50, 0x54, 0x54, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x72, 0x63,
	0x55, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x06, 0x73, 0x72, 0x63,
	0x55, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x55, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d,
	0x64, 0x35, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x03, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65,
	0x4d, 0x64, 0x35, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x04, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x06, 0x52,
	0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x07, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x08,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x0a, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x0b, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x0c, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x0d, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x29, 0x0a, 0x0d, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x50, 0x74, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0e, 0x52, 0x0d, 0x6d, 0x61, 0x67, 0x69, 0x63,
	0x50, 0x74, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x0f, 0x52, 0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x74, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x10, 0x52, 0x06, 0x70, 0x74, 0x74, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x11, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x69,
	0x6c, 0x65, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x72, 0x63, 0x55, 0x69, 0x6e,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x6d, 0x61, 0x67, 0x69, 0x63, 0x50, 0x74, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x70, 0x74, 0x74, 0x55, 0x72, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x2e, 0x0a, 0x0d, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x03, 0x62, 0x75,
	0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x03, 0x62, 0x75, 0x66, 0x88, 0x01,
	0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x62, 0x75, 0x66, 0x22, 0xb0, 0x01, 0x0a, 0x0b, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1f, 0x0a, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x03, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x03, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x61, 0x67, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xb7, 0x01, 0x0a,
	0x09, 0x51, 0x51, 0x4c, 0x69, 0x76, 0x65, 0x4f, 0x6c, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x75,
	0x62, 0x43, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x73, 0x75,
	0x62, 0x43, 0x6d, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x54,
	0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x73, 0x68, 0x6f,
	0x77, 0x54, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x75, 0x62, 0x43, 0x6d,
	0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x65, 0x78, 0x74, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x74,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x22, 0xea, 0x01, 0x0a, 0x0b, 0x52, 0x69, 0x63, 0x68, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x09,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x02, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15,
	0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x03, 0x73,
	0x65, 0x71, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x31, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x49, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x73, 0x65, 0x71, 0x22, 0xf5, 0x02, 0x0a, 0x08, 0x52, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x2d, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x41, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4e,
	0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x01, 0x52, 0x0d,
	0x6e, 0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x03, 0x70, 0x74, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x04, 0x2e,
	0x50, 0x54, 0x54, 0x48, 0x02, 0x52, 0x03, 0x70, 0x74, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x06, 0x74, 0x6d, 0x70, 0x50, 0x74, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x54, 0x65, 0x6d, 0x70, 0x50, 0x54, 0x54, 0x48, 0x03, 0x52, 0x06, 0x74, 0x6d, 0x70, 0x50, 0x74,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x32, 0x31,
	0x31, 0x54, 0x6d, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x32, 0x31, 0x31, 0x54, 0x65, 0x6d, 0x70,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x04, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x32, 0x31, 0x31, 0x54, 0x6d, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x6e, 0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x69, 0x6c, 0x65,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x74, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x6d, 0x70,
	0x50, 0x74, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x32, 0x31,
	0x31, 0x54, 0x6d, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x84, 0x06, 0x0a, 0x11,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1d, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x01, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x74, 0x6f, 0x55, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02,
	0x52, 0x05, 0x74, 0x6f, 0x55, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x50, 0x72, 0x65, 0x68, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x06, 0x52, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x50, 0x72, 0x65, 0x68, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0b, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x07, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x08, 0x52, 0x0a, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09,
	0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x0a, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x3c, 0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x0b, 0x52, 0x0e, 0x6e, 0x6f, 0x74,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x32, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x32, 0x48, 0x0c,
	0x52, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x32, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0d, 0x52,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c,
	0x66, 0x72, 0x6f, 0x6d, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0e, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x6e,
	0x75, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x4b, 0x65,
	0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x6e, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x74, 0x6f, 0x55, 0x69, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x74, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x50,
	0x72, 0x65, 0x68, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x65,
	0x66, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6e, 0x6f, 0x74, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x32, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x6e,
	0x75, 0x6d, 0x22, 0x4d, 0x0a, 0x0b, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69,
	0x6e, 0x22, 0xbd, 0x02, 0x0a, 0x0d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x53, 0x65, 0x71, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x53, 0x65, 0x71, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x6c, 0x61,
	0x67, 0x12, 0x24, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72,
	0x69, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x72, 0x69, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x55, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f,
	0x55, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x8a, 0x01, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69,
	0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x36, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x36, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x37, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x37,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0x2c,
	0x0a, 0x08, 0x54, 0x69, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x22, 0x82, 0x03, 0x0a,
	0x07, 0x54, 0x65, 0x6d, 0x70, 0x50, 0x54, 0x54, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x03, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70,
	0x74, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x05, 0x52,
	0x08, 0x70, 0x74, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x06,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0c, 0x70, 0x74, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x07, 0x52, 0x0c, 0x70, 0x74, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x46,
	0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x74, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x74, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x46, 0x6c, 0x61,
	0x67, 0x22, 0x80, 0x01, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x32, 0x31, 0x31, 0x54, 0x65,
	0x6d, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0a, 0x63, 0x32, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x32, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x32, 0x63, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x22, 0x55, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xef, 0x03, 0x0a, 0x09,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x66, 0x69,
	0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03,
	0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x04, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x05, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0a, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x06, 0x52, 0x0a, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x57, 0x69,
	0x64, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x07, 0x52, 0x0b, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x08, 0x52, 0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x46, 0x69, 0x6c, 0x65,
	0x4d, 0x64, 0x35, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x4d,
	0x64, 0x35, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x8d, 0x01,
	0x0a, 0x0c, 0x41, 0x70, 0x70, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x02, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05,
	0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xef, 0x03,
	0x0a, 0x12, 0x43, 0x32, 0x43, 0x54, 0x65, 0x6d, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x32, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x63, 0x32, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x55, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03,
	0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15,
	0x0a, 0x03, 0x73, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x04, 0x52, 0x03, 0x73,
	0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x07, 0x73, 0x69, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x74, 0x6f, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x07, 0x74, 0x6f, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x08, 0x52, 0x0b, 0x6c,
	0x6f, 0x63, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x0d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x32, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x69,
	0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x73, 0x69, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x69, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x6f, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x22,
	0xbc, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x64, 0x12,
	0x1b, 0x0a, 0x06, 0x70, 0x6b, 0x67, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x06, 0x70, 0x6b, 0x67, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x70, 0x6b, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01,
	0x52, 0x08, 0x70, 0x6b, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x64, 0x69, 0x76, 0x53, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52,
	0x06, 0x64, 0x69, 0x76, 0x53, 0x65, 0x71, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x61, 0x75,
	0x74, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52,
	0x09, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x70, 0x6b, 0x67, 0x4e, 0x75, 0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6b, 0x67,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x69, 0x76, 0x53, 0x65, 0x71,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xf5,
	0x01, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23,
	0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x55, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x55, 0x69, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x63,
	0x75, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x64, 0x69,
	0x73, 0x63, 0x75, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x02, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x53, 0x65, 0x71, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x75,
	0x73, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x03,
	0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88,
	0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x55, 0x69,
	0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x53, 0x65, 0x71, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xbd, 0x02, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x02, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x71,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x72, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x03, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x61, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x04, 0x52, 0x09, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52,
	0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x71, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x72, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xa1, 0x02, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x48, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x64, 0x48, 0x01, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0b,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x48,
	0x02, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x36, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x03, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x70,
	0x70, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xcb, 0x08, 0x0a, 0x0b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x66, 0x72,
	0x6f, 0x6d, 0x55, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x07, 0x66,
	0x72, 0x6f, 0x6d, 0x55, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x55,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x55, 0x69,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x63,
	0x32, 0x63, 0x43, 0x6d, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x06, 0x63,
	0x32, 0x63, 0x43, 0x6d, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x0a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x71, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x48, 0x06, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x55, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x12, 0x63, 0x32, 0x63,
	0x54, 0x65, 0x6d, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x32, 0x43, 0x54, 0x65, 0x6d, 0x70, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x48, 0x07, 0x52, 0x12, 0x63, 0x32,
	0x63, 0x54, 0x65, 0x6d, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x08, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x49, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x09, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x70, 0x70,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x73,
	0x74, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0a, 0x52, 0x0a, 0x66, 0x72, 0x6f,
	0x6d, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0b,
	0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x0c, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x69, 0x63, 0x6b,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x69,
	0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x68, 0x55, 0x69, 0x6e,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x48, 0x0e, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x55, 0x69,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x4e, 0x69, 0x63, 0x6b,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x4e, 0x69,
	0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x10, 0x52, 0x0b, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a,
	0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x11, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0e, 0x6d, 0x75, 0x74, 0x69, 0x6c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x48, 0x65, 0x61, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d,
	0x75, 0x74, 0x69, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x48, 0x65, 0x61, 0x64, 0x48, 0x13, 0x52,
	0x0e, 0x6d, 0x75, 0x74, 0x69, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x48, 0x65, 0x61, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x6e, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x55, 0x69, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x32, 0x63,
	0x43, 0x6d, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x71, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x69,
	0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x63, 0x32, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x73,
	0x74, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x69, 0x63, 0x6b, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x55, 0x69, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x4e, 0x69, 0x63, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x75, 0x74, 0x69, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x48, 0x65, 0x61, 0x64, 0x22, 0x38, 0x0a, 0x0e, 0x4d, 0x75, 0x74, 0x69,
	0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x48, 0x65, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xb8, 0x03, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x6b, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x70, 0x6b, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6e, 0x65, 0x77, 0x56, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x56, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6c,
	0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x07,
	0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x07, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x75, 0x72, 0x6c, 0x42, 0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52,
	0x06, 0x75, 0x72, 0x6c, 0x42, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x75, 0x72,
	0x6c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08,
	0x75, 0x72, 0x6c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x6b, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x6e, 0x65, 0x77, 0x56, 0x65, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75,
	0x72, 0x6c, 0x42, 0x69, 0x67, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75, 0x72, 0x6c, 0x53, 0x6d, 0x61,
	0x6c, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xa7, 0x02,
	0x0a, 0x0e, 0x55, 0x69, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x27, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x65, 0x65,
	0x72, 0x55, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x07, 0x70, 0x65,
	0x65, 0x72, 0x55, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x02, 0x52, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x08, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x2f, 0x0a, 0x10, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x10, 0x75, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x55, 0x69, 0x6e, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0x17, 0x0a, 0x03, 0x43, 0x32, 0x43, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x6e,
	0x22, 0x8d, 0x02, 0x0a, 0x1b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4c, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x9f,
	0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x55, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x55, 0x69, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x71, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x71,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x69, 0x64,
	0x22, 0x80, 0x01, 0x0a, 0x1c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x27,
	0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x20, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x55, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x55, 0x69,
	0x6e, 0x22, 0xe8, 0x03, 0x0a, 0x18, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x79,
	0x6e, 0x63, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x61,
	0x6d, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x72, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x52, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x61,
	0x6d, 0x62, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x52, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x52, 0x61, 0x6d, 0x62,
	0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x77, 0x68,
	0x69, 0x73, 0x70, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x30, 0x0a, 0x13, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0xc5, 0x02, 0x0a,
	0x19, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0a, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x0a, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x46,
	0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0f, 0x75, 0x69, 0x6e, 0x50, 0x61, 0x69,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x55, 0x69, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x0f, 0x75, 0x69, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x1d, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x55, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x04, 0x52, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x55, 0x69, 0x6e, 0x88, 0x01, 0x01,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x73, 0x79, 0x6e, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x69, 0x6e,
	0x64, 0x55, 0x69, 0x6e, 0x22, 0x1b, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x35, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x55, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x74, 0x6f, 0x55, 0x69, 0x6e, 0x22, 0xd3, 0x01, 0x0a, 0x0b, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x03, 0x63, 0x32, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x43, 0x32, 0x43, 0x52, 0x03, 0x63, 0x32, 0x63,
	0x12, 0x1c, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x28,
	0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x65, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x65, 0x6d, 0x70, 0x52, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x2b, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63,
	0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44,
	0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x75,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x52, 0x0e,
	0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x22, 0xd8,
	0x02, 0x0a, 0x19, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x64, 0x52,
	0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x64, 0x12, 0x2e, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x64, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x64, 0x12, 0x2e, 0x0a, 0x0b,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52,
	0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x29,
	0x0a, 0x08, 0x61, 0x70, 0x70, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x61, 0x70, 0x70, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x56, 0x69, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x69, 0x61, 0x22, 0xac, 0x01, 0x0a, 0x1a, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x02, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xae, 0x02, 0x0a, 0x11, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x76, 0x72, 0x69, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x73, 0x76, 0x72, 0x69, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x09, 0x70, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x08, 0x70, 0x69, 0x6e, 0x67, 0x46,
	0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x0b, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x62, 0x69, 0x6e, 0x64, 0x55, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x05,
	0x52, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x55, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x76, 0x72,
	0x69, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x55, 0x69, 0x6e, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x3b,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_message_proto_rawDescOnce sync.Once
	file_message_proto_rawDescData = file_message_proto_rawDesc
)

func file_message_proto_rawDescGZIP() []byte {
	file_message_proto_rawDescOnce.Do(func() {
		file_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_message_proto_rawDescData)
	})
	return file_message_proto_rawDescData
}

var file_message_proto_msgTypes = make([]protoimpl.MessageInfo, 60)
var file_message_proto_goTypes = []interface{}{
	(*AnonymousGroupMessage)(nil),                   // 0: AnonymousGroupMessage
	(*Attribute)(nil),                               // 1: Attribute
	(*CustomFace)(nil),                              // 2: CustomFace
	(*Element)(nil),                                 // 3: Element
	(*ElementFlags)(nil),                            // 4: ElementFlags
	(*ElementFlags2)(nil),                           // 5: ElementFlags2
	(*ExtraInfo)(nil),                               // 6: ExtraInfo
	(*Face)(nil),                                    // 7: Face
	(*FunFace)(nil),                                 // 8: FunFace
	(*GroupFile)(nil),                               // 9: GroupFile
	(*LifeOnlineAccount)(nil),                       // 10: LifeOnlineAccount
	(*MarketFace)(nil),                              // 11: MarketFace
	(*MarketTrans)(nil),                             // 12: MarketTrans
	(*MessageBody)(nil),                             // 13: MessageBody
	(*NotOnlineFile)(nil),                           // 14: NotOnlineFile
	(*NotOnlineImage)(nil),                          // 15: NotOnlineImage
	(*OnlineImage)(nil),                             // 16: OnlineImage
	(*PCSupportDef)(nil),                            // 17: PCSupportDef
	(*PTT)(nil),                                     // 18: PTT
	(*PublicAccount)(nil),                           // 19: PublicAccount
	(*PublicGroup)(nil),                             // 20: PublicGroup
	(*QQLiveOld)(nil),                               // 21: QQLiveOld
	(*RichMessage)(nil),                             // 22: RichMessage
	(*RichText)(nil),                                // 23: RichText
	(*SecretFileMessage)(nil),                       // 24: SecretFileMessage
	(*ShakeWindow)(nil),                             // 25: ShakeWindow
	(*SourceMessage)(nil),                           // 26: SourceMessage
	(*Text)(nil),                                    // 27: Text
	(*TipsInfo)(nil),                                // 28: TipsInfo
	(*TempPTT)(nil),                                 // 29: TempPTT
	(*Trans211TempMessage)(nil),                     // 30: Trans211TempMessage
	(*TransElement)(nil),                            // 31: TransElement
	(*VideoFile)(nil),                               // 32: VideoFile
	(*AppShareInfo)(nil),                            // 33: AppShareInfo
	(*C2CTempMessageHead)(nil),                      // 34: C2CTempMessageHead
	(*ContentHead)(nil),                             // 35: ContentHead
	(*DiscussInfo)(nil),                             // 36: DiscussInfo
	(*GroupInfo)(nil),                               // 37: GroupInfo
	(*Message)(nil),                                 // 38: Message
	(*MessageHead)(nil),                             // 39: MessageHead
	(*MutilTransHead)(nil),                          // 40: MutilTransHead
	(*PluginInfo)(nil),                              // 41: PluginInfo
	(*UinPairMessage)(nil),                          // 42: UinPairMessage
	(*C2C)(nil),                                     // 43: C2C
	(*MessageDeleteMessageRequest)(nil),             // 44: MessageDeleteMessageRequest
	(*MessageDeleteMessageResponse)(nil),            // 45: MessageDeleteMessageResponse
	(*Discussion)(nil),                              // 46: Discussion
	(*DiscussionTemp)(nil),                          // 47: DiscussionTemp
	(*MessageGetMessageRequest)(nil),                // 48: MessageGetMessageRequest
	(*MessageGetMessageResponse)(nil),               // 49: MessageGetMessageResponse
	(*Group)(nil),                                   // 50: Group
	(*GroupTemp)(nil),                               // 51: GroupTemp
	(*RoutingHead)(nil),                             // 52: RoutingHead
	(*MessageSendMessageRequest)(nil),               // 53: MessageSendMessageRequest
	(*MessageSendMessageResponse)(nil),              // 54: MessageSendMessageResponse
	(*OnlinePushMessage)(nil),                       // 55: OnlinePushMessage
	(*ElementFlags2_Instant)(nil),                   // 56: ElementFlags2.Instant
	(*FunFace_Bomb)(nil),                            // 57: FunFace.Bomb
	(*FunFace_Turntable)(nil),                       // 58: FunFace.Turntable
	(*MessageDeleteMessageRequest_MessageItem)(nil), // 59: MessageDeleteMessageRequest.MessageItem
}
var file_message_proto_depIdxs = []int32{
	27, // 0: Element.text:type_name -> Text
	7,  // 1: Element.face:type_name -> Face
	16, // 2: Element.onlineImage:type_name -> OnlineImage
	15, // 3: Element.notOnlineImage:type_name -> NotOnlineImage
	31, // 4: Element.transElement:type_name -> TransElement
	11, // 5: Element.marketFace:type_name -> MarketFace
	4,  // 6: Element.elementFlags:type_name -> ElementFlags
	2,  // 7: Element.customFace:type_name -> CustomFace
	5,  // 8: Element.elementFlags2:type_name -> ElementFlags2
	8,  // 9: Element.funFace:type_name -> FunFace
	24, // 10: Element.secretFileMessage:type_name -> SecretFileMessage
	22, // 11: Element.richMessage:type_name -> RichMessage
	9,  // 12: Element.groupFile:type_name -> GroupFile
	20, // 13: Element.publicGroup:type_name -> PublicGroup
	12, // 14: Element.marketTrans:type_name -> MarketTrans
	6,  // 15: Element.extraInfo:type_name -> ExtraInfo
	25, // 16: Element.shakeWindow:type_name -> ShakeWindow
	19, // 17: Element.publicAccount:type_name -> PublicAccount
	32, // 18: Element.videoFile:type_name -> VideoFile
	28, // 19: Element.tipsInfo:type_name -> TipsInfo
	0,  // 20: Element.anonymousGroupMessage:type_name -> AnonymousGroupMessage
	21, // 21: Element.qqLiveOld:type_name -> QQLiveOld
	10, // 22: Element.lifeOnline:type_name -> LifeOnlineAccount
	26, // 23: Element.sourceMessage:type_name -> SourceMessage
	56, // 24: ElementFlags2.Instants:type_name -> ElementFlags2.Instant
	56, // 25: ElementFlags2.srcInstant:type_name -> ElementFlags2.Instant
	17, // 26: ElementFlags2.pcSupportDef:type_name -> PCSupportDef
	58, // 27: FunFace.turntable:type_name -> FunFace.Turntable
	57, // 28: FunFace.bomb:type_name -> FunFace.Bomb
	23, // 29: MessageBody.richText:type_name -> RichText
	1,  // 30: RichText.attribute:type_name -> Attribute
	3,  // 31: RichText.elements:type_name -> Element
	14, // 32: RichText.notOnlineAile:type_name -> NotOnlineFile
	18, // 33: RichText.ptt:type_name -> PTT
	29, // 34: RichText.tmpPtt:type_name -> TempPTT
	30, // 35: RichText.trans_211TmpMessage:type_name -> Trans211TempMessage
	15, // 36: SecretFileMessage.notOnlineImage:type_name -> NotOnlineImage
	5,  // 37: SecretFileMessage.flags2:type_name -> ElementFlags2
	3,  // 38: SourceMessage.elements:type_name -> Element
	41, // 39: AppShareInfo.resource:type_name -> PluginInfo
	39, // 40: Message.messageHead:type_name -> MessageHead
	35, // 41: Message.contentHead:type_name -> ContentHead
	13, // 42: Message.messageBody:type_name -> MessageBody
	33, // 43: Message.appShareInfo:type_name -> AppShareInfo
	34, // 44: MessageHead.c2cTempMessageHead:type_name -> C2CTempMessageHead
	37, // 45: MessageHead.groupInfo:type_name -> GroupInfo
	36, // 46: MessageHead.discussInfo:type_name -> DiscussInfo
	40, // 47: MessageHead.mutilTransHead:type_name -> MutilTransHead
	38, // 48: UinPairMessage.messages:type_name -> Message
	59, // 49: MessageDeleteMessageRequest.messageItems:type_name -> MessageDeleteMessageRequest.MessageItem
	42, // 50: MessageGetMessageResponse.uinPairMessages:type_name -> UinPairMessage
	43, // 51: RoutingHead.c2c:type_name -> C2C
	50, // 52: RoutingHead.group:type_name -> Group
	51, // 53: RoutingHead.groupTemp:type_name -> GroupTemp
	46, // 54: RoutingHead.discussion:type_name -> Discussion
	47, // 55: RoutingHead.discussionTemp:type_name -> DiscussionTemp
	52, // 56: MessageSendMessageRequest.routingHead:type_name -> RoutingHead
	35, // 57: MessageSendMessageRequest.contentHead:type_name -> ContentHead
	13, // 58: MessageSendMessageRequest.messageBody:type_name -> MessageBody
	33, // 59: MessageSendMessageRequest.appShare:type_name -> AppShareInfo
	38, // 60: OnlinePushMessage.message:type_name -> Message
	61, // [61:61] is the sub-list for method output_type
	61, // [61:61] is the sub-list for method input_type
	61, // [61:61] is the sub-list for extension type_name
	61, // [61:61] is the sub-list for extension extendee
	0,  // [0:61] is the sub-list for field type_name
}

func init() { file_message_proto_init() }
func file_message_proto_init() {
	if File_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnonymousGroupMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomFace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Element); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementFlags2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtraInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Face); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunFace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LifeOnlineAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketFace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketTrans); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotOnlineFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotOnlineImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PCSupportDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PTT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QQLiveOld); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RichMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RichText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretFileMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShakeWindow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Text); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TipsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TempPTT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trans211TempMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppShareInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2CTempMessageHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscussInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutilTransHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UinPairMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2C); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageDeleteMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageDeleteMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Discussion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscussionTemp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageGetMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageGetMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupTemp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageSendMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageSendMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlinePushMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementFlags2_Instant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunFace_Bomb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunFace_Turntable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageDeleteMessageRequest_MessageItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_message_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[31].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[32].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[33].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[34].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[35].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[36].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[37].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[38].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[39].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[40].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[41].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[42].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[45].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[49].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[54].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[55].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[56].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[57].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[58].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   60,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_message_proto_goTypes,
		DependencyIndexes: file_message_proto_depIdxs,
		MessageInfos:      file_message_proto_msgTypes,
	}.Build()
	File_message_proto = out.File
	file_message_proto_rawDesc = nil
	file_message_proto_goTypes = nil
	file_message_proto_depIdxs = nil
}
