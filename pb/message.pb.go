// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: message.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AppShareInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *uint32     `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Cookie   []byte      `protobuf:"bytes,2,opt,name=cookie,proto3,oneof" json:"cookie,omitempty"`
	Resource *PluginInfo `protobuf:"bytes,3,opt,name=resource,proto3,oneof" json:"resource,omitempty"`
}

func (x *AppShareInfo) Reset() {
	*x = AppShareInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppShareInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppShareInfo) ProtoMessage() {}

func (x *AppShareInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppShareInfo.ProtoReflect.Descriptor instead.
func (*AppShareInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

func (x *AppShareInfo) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *AppShareInfo) GetCookie() []byte {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *AppShareInfo) GetResource() *PluginInfo {
	if x != nil {
		return x.Resource
	}
	return nil
}

type C2CTempMessageHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	C2CType       *uint32 `protobuf:"varint,1,opt,name=c2cType,proto3,oneof" json:"c2cType,omitempty"`
	ServiceType   *uint32 `protobuf:"varint,2,opt,name=serviceType,proto3,oneof" json:"serviceType,omitempty"`
	GroupUin      *uint64 `protobuf:"varint,3,opt,name=groupUin,proto3,oneof" json:"groupUin,omitempty"`
	GroupCode     *uint64 `protobuf:"varint,4,opt,name=groupCode,proto3,oneof" json:"groupCode,omitempty"`
	Sig           []byte  `protobuf:"bytes,5,opt,name=sig,proto3,oneof" json:"sig,omitempty"`
	SigType       *uint32 `protobuf:"varint,6,opt,name=sigType,proto3,oneof" json:"sigType,omitempty"`
	FromPhone     *string `protobuf:"bytes,7,opt,name=fromPhone,proto3,oneof" json:"fromPhone,omitempty"`
	ToPhone       *string `protobuf:"bytes,8,opt,name=toPhone,proto3,oneof" json:"toPhone,omitempty"`
	LockDisplay   *uint32 `protobuf:"varint,9,opt,name=lockDisplay,proto3,oneof" json:"lockDisplay,omitempty"`
	DirectionFlag *uint32 `protobuf:"varint,10,opt,name=directionFlag,proto3,oneof" json:"directionFlag,omitempty"`
}

func (x *C2CTempMessageHead) Reset() {
	*x = C2CTempMessageHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2CTempMessageHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2CTempMessageHead) ProtoMessage() {}

func (x *C2CTempMessageHead) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2CTempMessageHead.ProtoReflect.Descriptor instead.
func (*C2CTempMessageHead) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{1}
}

func (x *C2CTempMessageHead) GetC2CType() uint32 {
	if x != nil && x.C2CType != nil {
		return *x.C2CType
	}
	return 0
}

func (x *C2CTempMessageHead) GetServiceType() uint32 {
	if x != nil && x.ServiceType != nil {
		return *x.ServiceType
	}
	return 0
}

func (x *C2CTempMessageHead) GetGroupUin() uint64 {
	if x != nil && x.GroupUin != nil {
		return *x.GroupUin
	}
	return 0
}

func (x *C2CTempMessageHead) GetGroupCode() uint64 {
	if x != nil && x.GroupCode != nil {
		return *x.GroupCode
	}
	return 0
}

func (x *C2CTempMessageHead) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

func (x *C2CTempMessageHead) GetSigType() uint32 {
	if x != nil && x.SigType != nil {
		return *x.SigType
	}
	return 0
}

func (x *C2CTempMessageHead) GetFromPhone() string {
	if x != nil && x.FromPhone != nil {
		return *x.FromPhone
	}
	return ""
}

func (x *C2CTempMessageHead) GetToPhone() string {
	if x != nil && x.ToPhone != nil {
		return *x.ToPhone
	}
	return ""
}

func (x *C2CTempMessageHead) GetLockDisplay() uint32 {
	if x != nil && x.LockDisplay != nil {
		return *x.LockDisplay
	}
	return 0
}

func (x *C2CTempMessageHead) GetDirectionFlag() uint32 {
	if x != nil && x.DirectionFlag != nil {
		return *x.DirectionFlag
	}
	return 0
}

type ContentHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PkgNum    *uint32 `protobuf:"varint,1,opt,name=pkgNum,proto3,oneof" json:"pkgNum,omitempty"`
	PkgIndex  *uint32 `protobuf:"varint,2,opt,name=pkgIndex,proto3,oneof" json:"pkgIndex,omitempty"`
	DivSeq    *uint32 `protobuf:"varint,3,opt,name=divSeq,proto3,oneof" json:"divSeq,omitempty"`
	AutoReply *uint32 `protobuf:"varint,4,opt,name=autoReply,proto3,oneof" json:"autoReply,omitempty"`
}

func (x *ContentHead) Reset() {
	*x = ContentHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentHead) ProtoMessage() {}

func (x *ContentHead) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentHead.ProtoReflect.Descriptor instead.
func (*ContentHead) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{2}
}

func (x *ContentHead) GetPkgNum() uint32 {
	if x != nil && x.PkgNum != nil {
		return *x.PkgNum
	}
	return 0
}

func (x *ContentHead) GetPkgIndex() uint32 {
	if x != nil && x.PkgIndex != nil {
		return *x.PkgIndex
	}
	return 0
}

func (x *ContentHead) GetDivSeq() uint32 {
	if x != nil && x.DivSeq != nil {
		return *x.DivSeq
	}
	return 0
}

func (x *ContentHead) GetAutoReply() uint32 {
	if x != nil && x.AutoReply != nil {
		return *x.AutoReply
	}
	return 0
}

type DiscussInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiscussUin     *uint64 `protobuf:"varint,1,opt,name=discussUin,proto3,oneof" json:"discussUin,omitempty"`
	DiscussType    *uint32 `protobuf:"varint,2,opt,name=discussType,proto3,oneof" json:"discussType,omitempty"`
	DiscussInfoSeq *uint64 `protobuf:"varint,3,opt,name=discussInfoSeq,proto3,oneof" json:"discussInfoSeq,omitempty"`
	DiscussRemark  []byte  `protobuf:"bytes,4,opt,name=discussRemark,proto3,oneof" json:"discussRemark,omitempty"`
}

func (x *DiscussInfo) Reset() {
	*x = DiscussInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscussInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscussInfo) ProtoMessage() {}

func (x *DiscussInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscussInfo.ProtoReflect.Descriptor instead.
func (*DiscussInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{3}
}

func (x *DiscussInfo) GetDiscussUin() uint64 {
	if x != nil && x.DiscussUin != nil {
		return *x.DiscussUin
	}
	return 0
}

func (x *DiscussInfo) GetDiscussType() uint32 {
	if x != nil && x.DiscussType != nil {
		return *x.DiscussType
	}
	return 0
}

func (x *DiscussInfo) GetDiscussInfoSeq() uint64 {
	if x != nil && x.DiscussInfoSeq != nil {
		return *x.DiscussInfoSeq
	}
	return 0
}

func (x *DiscussInfo) GetDiscussRemark() []byte {
	if x != nil {
		return x.DiscussRemark
	}
	return nil
}

type ExtraGroupKeyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentMaxSeq    uint32 `protobuf:"varint,1,opt,name=current_max_seq,json=currentMaxSeq,proto3" json:"current_max_seq,omitempty"`
	CurrentTime      uint64 `protobuf:"varint,2,opt,name=current_time,json=currentTime,proto3" json:"current_time,omitempty"`
	OperateByParents uint32 `protobuf:"varint,3,opt,name=operate_by_parents,json=operateByParents,proto3" json:"operate_by_parents,omitempty"`
	ExtraGroupInfo   []byte `protobuf:"bytes,4,opt,name=extra_group_info,json=extraGroupInfo,proto3" json:"extra_group_info,omitempty"`
}

func (x *ExtraGroupKeyInfo) Reset() {
	*x = ExtraGroupKeyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraGroupKeyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraGroupKeyInfo) ProtoMessage() {}

func (x *ExtraGroupKeyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraGroupKeyInfo.ProtoReflect.Descriptor instead.
func (*ExtraGroupKeyInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{4}
}

func (x *ExtraGroupKeyInfo) GetCurrentMaxSeq() uint32 {
	if x != nil {
		return x.CurrentMaxSeq
	}
	return 0
}

func (x *ExtraGroupKeyInfo) GetCurrentTime() uint64 {
	if x != nil {
		return x.CurrentTime
	}
	return 0
}

func (x *ExtraGroupKeyInfo) GetOperateByParents() uint32 {
	if x != nil {
		return x.OperateByParents
	}
	return 0
}

func (x *ExtraGroupKeyInfo) GetExtraGroupInfo() []byte {
	if x != nil {
		return x.ExtraGroupInfo
	}
	return nil
}

type GroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupCode    *uint64 `protobuf:"varint,1,opt,name=groupCode,proto3,oneof" json:"groupCode,omitempty"`
	GroupType    *uint32 `protobuf:"varint,2,opt,name=groupType,proto3,oneof" json:"groupType,omitempty"`
	GroupInfoSeq *uint64 `protobuf:"varint,3,opt,name=groupInfoSeq,proto3,oneof" json:"groupInfoSeq,omitempty"`
	GroupCard    []byte  `protobuf:"bytes,4,opt,name=groupCard,proto3,oneof" json:"groupCard,omitempty"`
	GroupRank    []byte  `protobuf:"bytes,5,opt,name=groupRank,proto3,oneof" json:"groupRank,omitempty"`
	GroupLevel   *uint32 `protobuf:"varint,6,opt,name=groupLevel,proto3,oneof" json:"groupLevel,omitempty"`
}

func (x *GroupInfo) Reset() {
	*x = GroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfo) ProtoMessage() {}

func (x *GroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfo.ProtoReflect.Descriptor instead.
func (*GroupInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{5}
}

func (x *GroupInfo) GetGroupCode() uint64 {
	if x != nil && x.GroupCode != nil {
		return *x.GroupCode
	}
	return 0
}

func (x *GroupInfo) GetGroupType() uint32 {
	if x != nil && x.GroupType != nil {
		return *x.GroupType
	}
	return 0
}

func (x *GroupInfo) GetGroupInfoSeq() uint64 {
	if x != nil && x.GroupInfoSeq != nil {
		return *x.GroupInfoSeq
	}
	return 0
}

func (x *GroupInfo) GetGroupCard() []byte {
	if x != nil {
		return x.GroupCard
	}
	return nil
}

func (x *GroupInfo) GetGroupRank() []byte {
	if x != nil {
		return x.GroupRank
	}
	return nil
}

func (x *GroupInfo) GetGroupLevel() uint32 {
	if x != nil && x.GroupLevel != nil {
		return *x.GroupLevel
	}
	return 0
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageHead  *MessageHead  `protobuf:"bytes,1,opt,name=messageHead,proto3" json:"messageHead,omitempty"`
	ContentHead  *ContentHead  `protobuf:"bytes,2,opt,name=contentHead,proto3" json:"contentHead,omitempty"`
	MessageBody  *MessageBody  `protobuf:"bytes,3,opt,name=messageBody,proto3" json:"messageBody,omitempty"`
	AppShareInfo *AppShareInfo `protobuf:"bytes,4,opt,name=appShareInfo,proto3,oneof" json:"appShareInfo,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{6}
}

func (x *Message) GetMessageHead() *MessageHead {
	if x != nil {
		return x.MessageHead
	}
	return nil
}

func (x *Message) GetContentHead() *ContentHead {
	if x != nil {
		return x.ContentHead
	}
	return nil
}

func (x *Message) GetMessageBody() *MessageBody {
	if x != nil {
		return x.MessageBody
	}
	return nil
}

func (x *Message) GetAppShareInfo() *AppShareInfo {
	if x != nil {
		return x.AppShareInfo
	}
	return nil
}

type MessageHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUin            uint64              `protobuf:"varint,1,opt,name=fromUin,proto3" json:"fromUin,omitempty"`
	ToUin              uint64              `protobuf:"varint,2,opt,name=toUin,proto3" json:"toUin,omitempty"`
	MessageType        uint32              `protobuf:"varint,3,opt,name=messageType,proto3" json:"messageType,omitempty"`
	C2CCmd             uint32              `protobuf:"varint,4,opt,name=c2cCmd,proto3" json:"c2cCmd,omitempty"`
	MessageSeq         uint32              `protobuf:"varint,5,opt,name=messageSeq,proto3" json:"messageSeq,omitempty"`
	MessageTime        int64               `protobuf:"varint,6,opt,name=messageTime,proto3" json:"messageTime,omitempty"`
	MessageUid         uint64              `protobuf:"varint,7,opt,name=messageUid,proto3" json:"messageUid,omitempty"`
	C2CTempMessageHead *C2CTempMessageHead `protobuf:"bytes,8,opt,name=c2cTempMessageHead,proto3,oneof" json:"c2cTempMessageHead,omitempty"`
	GroupInfo          *GroupInfo          `protobuf:"bytes,9,opt,name=groupInfo,proto3,oneof" json:"groupInfo,omitempty"`
	FromAppId          *uint32             `protobuf:"varint,10,opt,name=fromAppId,proto3,oneof" json:"fromAppId,omitempty"`
	FromInstId         *uint32             `protobuf:"varint,11,opt,name=fromInstId,proto3,oneof" json:"fromInstId,omitempty"`
	UserActive         *uint32             `protobuf:"varint,12,opt,name=userActive,proto3,oneof" json:"userActive,omitempty"`
	DiscussInfo        *DiscussInfo        `protobuf:"bytes,13,opt,name=discussInfo,proto3,oneof" json:"discussInfo,omitempty"`
	FromNick           *string             `protobuf:"bytes,14,opt,name=fromNick,proto3,oneof" json:"fromNick,omitempty"`
	AuthUin            *uint64             `protobuf:"varint,15,opt,name=authUin,proto3,oneof" json:"authUin,omitempty"`
	AuthNick           *string             `protobuf:"bytes,16,opt,name=authNick,proto3,oneof" json:"authNick,omitempty"`
	MessageFlag        *uint32             `protobuf:"varint,17,opt,name=messageFlag,proto3,oneof" json:"messageFlag,omitempty"`
	AuthRemark         *string             `protobuf:"bytes,18,opt,name=authRemark,proto3,oneof" json:"authRemark,omitempty"`
	GroupName          *string             `protobuf:"bytes,19,opt,name=groupName,proto3,oneof" json:"groupName,omitempty"`
	MutilTransHead     *MutilTransHead     `protobuf:"bytes,20,opt,name=mutilTransHead,proto3,oneof" json:"mutilTransHead,omitempty"`
}

func (x *MessageHead) Reset() {
	*x = MessageHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageHead) ProtoMessage() {}

func (x *MessageHead) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageHead.ProtoReflect.Descriptor instead.
func (*MessageHead) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{7}
}

func (x *MessageHead) GetFromUin() uint64 {
	if x != nil {
		return x.FromUin
	}
	return 0
}

func (x *MessageHead) GetToUin() uint64 {
	if x != nil {
		return x.ToUin
	}
	return 0
}

func (x *MessageHead) GetMessageType() uint32 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *MessageHead) GetC2CCmd() uint32 {
	if x != nil {
		return x.C2CCmd
	}
	return 0
}

func (x *MessageHead) GetMessageSeq() uint32 {
	if x != nil {
		return x.MessageSeq
	}
	return 0
}

func (x *MessageHead) GetMessageTime() int64 {
	if x != nil {
		return x.MessageTime
	}
	return 0
}

func (x *MessageHead) GetMessageUid() uint64 {
	if x != nil {
		return x.MessageUid
	}
	return 0
}

func (x *MessageHead) GetC2CTempMessageHead() *C2CTempMessageHead {
	if x != nil {
		return x.C2CTempMessageHead
	}
	return nil
}

func (x *MessageHead) GetGroupInfo() *GroupInfo {
	if x != nil {
		return x.GroupInfo
	}
	return nil
}

func (x *MessageHead) GetFromAppId() uint32 {
	if x != nil && x.FromAppId != nil {
		return *x.FromAppId
	}
	return 0
}

func (x *MessageHead) GetFromInstId() uint32 {
	if x != nil && x.FromInstId != nil {
		return *x.FromInstId
	}
	return 0
}

func (x *MessageHead) GetUserActive() uint32 {
	if x != nil && x.UserActive != nil {
		return *x.UserActive
	}
	return 0
}

func (x *MessageHead) GetDiscussInfo() *DiscussInfo {
	if x != nil {
		return x.DiscussInfo
	}
	return nil
}

func (x *MessageHead) GetFromNick() string {
	if x != nil && x.FromNick != nil {
		return *x.FromNick
	}
	return ""
}

func (x *MessageHead) GetAuthUin() uint64 {
	if x != nil && x.AuthUin != nil {
		return *x.AuthUin
	}
	return 0
}

func (x *MessageHead) GetAuthNick() string {
	if x != nil && x.AuthNick != nil {
		return *x.AuthNick
	}
	return ""
}

func (x *MessageHead) GetMessageFlag() uint32 {
	if x != nil && x.MessageFlag != nil {
		return *x.MessageFlag
	}
	return 0
}

func (x *MessageHead) GetAuthRemark() string {
	if x != nil && x.AuthRemark != nil {
		return *x.AuthRemark
	}
	return ""
}

func (x *MessageHead) GetGroupName() string {
	if x != nil && x.GroupName != nil {
		return *x.GroupName
	}
	return ""
}

func (x *MessageHead) GetMutilTransHead() *MutilTransHead {
	if x != nil {
		return x.MutilTransHead
	}
	return nil
}

type MessageType0X210 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *MessageType0X210) Reset() {
	*x = MessageType0X210{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageType0X210) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageType0X210) ProtoMessage() {}

func (x *MessageType0X210) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageType0X210.ProtoReflect.Descriptor instead.
func (*MessageType0X210) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{8}
}

func (x *MessageType0X210) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MessageType0X210) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type MessageSubType0X8ARequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos    []*MessageSubType0X8ARequest_Info `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos,omitempty"`
	AppId    *uint32                           `protobuf:"varint,2,opt,name=appId,proto3,oneof" json:"appId,omitempty"`
	InstId   *uint32                           `protobuf:"varint,3,opt,name=instId,proto3,oneof" json:"instId,omitempty"`
	Flag     *uint32                           `protobuf:"varint,4,opt,name=flag,proto3,oneof" json:"flag,omitempty"`
	Reserved []byte                            `protobuf:"bytes,5,opt,name=reserved,proto3,oneof" json:"reserved,omitempty"`
}

func (x *MessageSubType0X8ARequest) Reset() {
	*x = MessageSubType0X8ARequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageSubType0X8ARequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSubType0X8ARequest) ProtoMessage() {}

func (x *MessageSubType0X8ARequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSubType0X8ARequest.ProtoReflect.Descriptor instead.
func (*MessageSubType0X8ARequest) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{9}
}

func (x *MessageSubType0X8ARequest) GetInfos() []*MessageSubType0X8ARequest_Info {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *MessageSubType0X8ARequest) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *MessageSubType0X8ARequest) GetInstId() uint32 {
	if x != nil && x.InstId != nil {
		return *x.InstId
	}
	return 0
}

func (x *MessageSubType0X8ARequest) GetFlag() uint32 {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return 0
}

func (x *MessageSubType0X8ARequest) GetReserved() []byte {
	if x != nil {
		return x.Reserved
	}
	return nil
}

type MutilTransHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *uint32 `protobuf:"varint,1,opt,name=status,proto3,oneof" json:"status,omitempty"`
}

func (x *MutilTransHead) Reset() {
	*x = MutilTransHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutilTransHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutilTransHead) ProtoMessage() {}

func (x *MutilTransHead) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutilTransHead.ProtoReflect.Descriptor instead.
func (*MutilTransHead) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{10}
}

func (x *MutilTransHead) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

type PluginInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *uint32 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	PkgName  *string `protobuf:"bytes,2,opt,name=pkgName,proto3,oneof" json:"pkgName,omitempty"`
	NewVer   *uint32 `protobuf:"varint,3,opt,name=newVer,proto3,oneof" json:"newVer,omitempty"`
	Type     *uint32 `protobuf:"varint,4,opt,name=type,proto3,oneof" json:"type,omitempty"`
	LanType  *uint32 `protobuf:"varint,5,opt,name=lanType,proto3,oneof" json:"lanType,omitempty"`
	Priority *uint32 `protobuf:"varint,6,opt,name=priority,proto3,oneof" json:"priority,omitempty"`
	Name     *string `protobuf:"bytes,7,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Desc     *string `protobuf:"bytes,8,opt,name=desc,proto3,oneof" json:"desc,omitempty"`
	UrlBig   *string `protobuf:"bytes,9,opt,name=urlBig,proto3,oneof" json:"urlBig,omitempty"`
	UrlSmall *string `protobuf:"bytes,10,opt,name=urlSmall,proto3,oneof" json:"urlSmall,omitempty"`
	Config   *string `protobuf:"bytes,11,opt,name=config,proto3,oneof" json:"config,omitempty"`
}

func (x *PluginInfo) Reset() {
	*x = PluginInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginInfo) ProtoMessage() {}

func (x *PluginInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginInfo.ProtoReflect.Descriptor instead.
func (*PluginInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{11}
}

func (x *PluginInfo) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *PluginInfo) GetPkgName() string {
	if x != nil && x.PkgName != nil {
		return *x.PkgName
	}
	return ""
}

func (x *PluginInfo) GetNewVer() uint32 {
	if x != nil && x.NewVer != nil {
		return *x.NewVer
	}
	return 0
}

func (x *PluginInfo) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *PluginInfo) GetLanType() uint32 {
	if x != nil && x.LanType != nil {
		return *x.LanType
	}
	return 0
}

func (x *PluginInfo) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *PluginInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PluginInfo) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *PluginInfo) GetUrlBig() string {
	if x != nil && x.UrlBig != nil {
		return *x.UrlBig
	}
	return ""
}

func (x *PluginInfo) GetUrlSmall() string {
	if x != nil && x.UrlSmall != nil {
		return *x.UrlSmall
	}
	return ""
}

func (x *PluginInfo) GetConfig() string {
	if x != nil && x.Config != nil {
		return *x.Config
	}
	return ""
}

type UinPairMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastReadTime        int64      `protobuf:"varint,1,opt,name=last_read_time,json=lastReadTime,proto3" json:"last_read_time,omitempty"`
	PeerUin             uint64     `protobuf:"varint,2,opt,name=peer_uin,json=peerUin,proto3" json:"peer_uin,omitempty"`
	MessageCompleted    uint32     `protobuf:"varint,3,opt,name=message_completed,json=messageCompleted,proto3" json:"message_completed,omitempty"`
	Messages            []*Message `protobuf:"bytes,4,rep,name=messages,proto3" json:"messages,omitempty"`
	UnreadMessageNumber uint32     `protobuf:"varint,5,opt,name=unread_message_number,json=unreadMessageNumber,proto3" json:"unread_message_number,omitempty"`
}

func (x *UinPairMessage) Reset() {
	*x = UinPairMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UinPairMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UinPairMessage) ProtoMessage() {}

func (x *UinPairMessage) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UinPairMessage.ProtoReflect.Descriptor instead.
func (*UinPairMessage) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{12}
}

func (x *UinPairMessage) GetLastReadTime() int64 {
	if x != nil {
		return x.LastReadTime
	}
	return 0
}

func (x *UinPairMessage) GetPeerUin() uint64 {
	if x != nil {
		return x.PeerUin
	}
	return 0
}

func (x *UinPairMessage) GetMessageCompleted() uint32 {
	if x != nil {
		return x.MessageCompleted
	}
	return 0
}

func (x *UinPairMessage) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *UinPairMessage) GetUnreadMessageNumber() uint32 {
	if x != nil {
		return x.UnreadMessageNumber
	}
	return 0
}

type MessageSubType0X8ARequest_Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUin             *uint64                                             `protobuf:"varint,1,opt,name=fromUin,proto3,oneof" json:"fromUin,omitempty"`
	ToUin               *uint64                                             `protobuf:"varint,2,opt,name=toUin,proto3,oneof" json:"toUin,omitempty"`
	MessageSeq          *uint32                                             `protobuf:"varint,3,opt,name=messageSeq,proto3,oneof" json:"messageSeq,omitempty"`
	MessageUid          *uint64                                             `protobuf:"varint,4,opt,name=messageUid,proto3,oneof" json:"messageUid,omitempty"`
	MessageTime         *uint64                                             `protobuf:"varint,5,opt,name=messageTime,proto3,oneof" json:"messageTime,omitempty"`
	MessageRandom       *uint32                                             `protobuf:"varint,6,opt,name=messageRandom,proto3,oneof" json:"messageRandom,omitempty"`
	PkgNum              *uint32                                             `protobuf:"varint,7,opt,name=pkgNum,proto3,oneof" json:"pkgNum,omitempty"`
	PkgIndex            *uint32                                             `protobuf:"varint,8,opt,name=pkgIndex,proto3,oneof" json:"pkgIndex,omitempty"`
	DivSeq              *uint32                                             `protobuf:"varint,9,opt,name=divSeq,proto3,oneof" json:"divSeq,omitempty"`
	Flag                *uint32                                             `protobuf:"varint,10,opt,name=flag,proto3,oneof" json:"flag,omitempty"`
	WithdrawWordingInfo *MessageSubType0X8ARequest_Info_WithdrawWordingInfo `protobuf:"bytes,11,opt,name=withdrawWordingInfo,proto3,oneof" json:"withdrawWordingInfo,omitempty"`
}

func (x *MessageSubType0X8ARequest_Info) Reset() {
	*x = MessageSubType0X8ARequest_Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageSubType0X8ARequest_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSubType0X8ARequest_Info) ProtoMessage() {}

func (x *MessageSubType0X8ARequest_Info) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSubType0X8ARequest_Info.ProtoReflect.Descriptor instead.
func (*MessageSubType0X8ARequest_Info) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{9, 0}
}

func (x *MessageSubType0X8ARequest_Info) GetFromUin() uint64 {
	if x != nil && x.FromUin != nil {
		return *x.FromUin
	}
	return 0
}

func (x *MessageSubType0X8ARequest_Info) GetToUin() uint64 {
	if x != nil && x.ToUin != nil {
		return *x.ToUin
	}
	return 0
}

func (x *MessageSubType0X8ARequest_Info) GetMessageSeq() uint32 {
	if x != nil && x.MessageSeq != nil {
		return *x.MessageSeq
	}
	return 0
}

func (x *MessageSubType0X8ARequest_Info) GetMessageUid() uint64 {
	if x != nil && x.MessageUid != nil {
		return *x.MessageUid
	}
	return 0
}

func (x *MessageSubType0X8ARequest_Info) GetMessageTime() uint64 {
	if x != nil && x.MessageTime != nil {
		return *x.MessageTime
	}
	return 0
}

func (x *MessageSubType0X8ARequest_Info) GetMessageRandom() uint32 {
	if x != nil && x.MessageRandom != nil {
		return *x.MessageRandom
	}
	return 0
}

func (x *MessageSubType0X8ARequest_Info) GetPkgNum() uint32 {
	if x != nil && x.PkgNum != nil {
		return *x.PkgNum
	}
	return 0
}

func (x *MessageSubType0X8ARequest_Info) GetPkgIndex() uint32 {
	if x != nil && x.PkgIndex != nil {
		return *x.PkgIndex
	}
	return 0
}

func (x *MessageSubType0X8ARequest_Info) GetDivSeq() uint32 {
	if x != nil && x.DivSeq != nil {
		return *x.DivSeq
	}
	return 0
}

func (x *MessageSubType0X8ARequest_Info) GetFlag() uint32 {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return 0
}

func (x *MessageSubType0X8ARequest_Info) GetWithdrawWordingInfo() *MessageSubType0X8ARequest_Info_WithdrawWordingInfo {
	if x != nil {
		return x.WithdrawWordingInfo
	}
	return nil
}

type MessageSubType0X8ARequest_Info_WithdrawWordingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId   *int32  `protobuf:"varint,1,opt,name=itemId,proto3,oneof" json:"itemId,omitempty"`
	ItemName *string `protobuf:"bytes,2,opt,name=itemName,proto3,oneof" json:"itemName,omitempty"`
}

func (x *MessageSubType0X8ARequest_Info_WithdrawWordingInfo) Reset() {
	*x = MessageSubType0X8ARequest_Info_WithdrawWordingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageSubType0X8ARequest_Info_WithdrawWordingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSubType0X8ARequest_Info_WithdrawWordingInfo) ProtoMessage() {}

func (x *MessageSubType0X8ARequest_Info_WithdrawWordingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSubType0X8ARequest_Info_WithdrawWordingInfo.ProtoReflect.Descriptor instead.
func (*MessageSubType0X8ARequest_Info_WithdrawWordingInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{9, 0, 0}
}

func (x *MessageSubType0X8ARequest_Info_WithdrawWordingInfo) GetItemId() int32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *MessageSubType0X8ARequest_Info_WithdrawWordingInfo) GetItemName() string {
	if x != nil && x.ItemName != nil {
		return *x.ItemName
	}
	return ""
}

var File_message_proto protoreflect.FileDescriptor

var file_message_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x01, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x02, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x22, 0xef, 0x03, 0x0a, 0x12, 0x43, 0x32, 0x43, 0x54, 0x65, 0x6d, 0x70, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x32,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x63,
	0x32, 0x63, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x02, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x69, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x73, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x04, 0x52, 0x03, 0x73, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x73,
	0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x07,
	0x73, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x66, 0x72,
	0x6f, 0x6d, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52,
	0x09, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x74, 0x6f, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07,
	0x52, 0x07, 0x74, 0x6f, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b,
	0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x08, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x09, 0x52, 0x0d, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x63, 0x32, 0x63, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x55, 0x69, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x73, 0x69, 0x67, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x73, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x6f, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x6c, 0x61, 0x67, 0x22, 0xbc, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x6b, 0x67, 0x4e, 0x75, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x70, 0x6b, 0x67, 0x4e, 0x75, 0x6d, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x6b, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x08, 0x70, 0x6b, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x64, 0x69, 0x76, 0x53, 0x65, 0x71, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x06, 0x64, 0x69, 0x76, 0x53, 0x65, 0x71, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x6b, 0x67, 0x4e, 0x75, 0x6d, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x70, 0x6b, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x64, 0x69, 0x76, 0x53, 0x65, 0x71, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0xf5, 0x01, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x55,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x63,
	0x75, 0x73, 0x73, 0x55, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x69, 0x73,
	0x63, 0x75, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2b, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x53,
	0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63,
	0x75, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x71, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x0d, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x03, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x52,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x75, 0x73, 0x73, 0x55, 0x69, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x69, 0x73, 0x63,
	0x75, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x69, 0x73, 0x63,
	0x75, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x71, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xb6, 0x01, 0x0a,
	0x11, 0x45, 0x78, 0x74, 0x72, 0x61, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xbd, 0x02, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x09, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x02, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x71, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x72, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x03, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61,
	0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61,
	0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x04, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x61, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x0a,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x71, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x72, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xe2, 0x01, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2e, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x12, 0x2e, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x12, 0x2e, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x6f, 0x64, 0x79, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x36, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x70,
	0x70, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xc9, 0x07, 0x0a, 0x0b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72,
	0x6f, 0x6d, 0x55, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x72, 0x6f,
	0x6d, 0x55, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x55, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x55, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x32, 0x63, 0x43, 0x6d, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x32,
	0x63, 0x43, 0x6d, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x55, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x55, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x12, 0x63, 0x32, 0x63, 0x54, 0x65, 0x6d,
	0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x32, 0x43, 0x54, 0x65, 0x6d, 0x70, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x48, 0x00, 0x52, 0x12, 0x63, 0x32, 0x63, 0x54, 0x65,
	0x6d, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x2d, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x01, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x02, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x6e,
	0x73, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0b,
	0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x05, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x69, 0x63, 0x6b, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x69, 0x63, 0x6b, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x68, 0x55, 0x69, 0x6e, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x07, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x55, 0x69, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x4e, 0x69, 0x63, 0x6b, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x4e, 0x69, 0x63, 0x6b, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x61, 0x75, 0x74,
	0x68, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52,
	0x0a, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0b, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x3c, 0x0a, 0x0e, 0x6d, 0x75, 0x74, 0x69, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x48,
	0x65, 0x61, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x75, 0x74, 0x69,
	0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x48, 0x65, 0x61, 0x64, 0x48, 0x0c, 0x52, 0x0e, 0x6d, 0x75,
	0x74, 0x69, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x48, 0x65, 0x61, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x63, 0x32, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x70, 0x70,
	0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x49,
	0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x69, 0x63, 0x6b, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x55, 0x69, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x4e, 0x69, 0x63, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x52,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x75, 0x74, 0x69, 0x6c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x48, 0x65, 0x61, 0x64, 0x22, 0x40, 0x0a, 0x10, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x30, 0x78, 0x32, 0x31, 0x30, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xb5, 0x07, 0x0a, 0x19, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x30, 0x78, 0x38, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x30, 0x78, 0x38, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x19, 0x0a,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x69, 0x6e, 0x73, 0x74,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x06, 0x69, 0x6e, 0x73, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x03, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x1a,
	0xc3, 0x05, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d,
	0x55, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x07, 0x66, 0x72, 0x6f,
	0x6d, 0x55, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x55, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x55, 0x69, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x71,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x71, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x55, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x0a, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x04, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x0d, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x70, 0x6b, 0x67, 0x4e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x06,
	0x52, 0x06, 0x70, 0x6b, 0x67, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70,
	0x6b, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x07, 0x52,
	0x08, 0x70, 0x6b, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x64, 0x69, 0x76, 0x53, 0x65, 0x71, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x08, 0x52, 0x06,
	0x64, 0x69, 0x76, 0x53, 0x65, 0x71, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x09, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x88,
	0x01, 0x01, 0x12, 0x6a, 0x0a, 0x13, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x57, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65,
	0x30, 0x78, 0x38, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x0a, 0x52, 0x13, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x1a, 0x6b,
	0x0a, 0x13, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x55, 0x69,
	0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x71,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x69, 0x64, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x6b, 0x67, 0x4e, 0x75, 0x6d, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x70, 0x6b, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x69,
	0x76, 0x53, 0x65, 0x71, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x70, 0x70, 0x49, 0x64, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x22, 0x38, 0x0a, 0x0e, 0x4d, 0x75, 0x74, 0x69, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x48, 0x65,
	0x61, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb8, 0x03, 0x0a, 0x0a, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x70, 0x6b, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x07, 0x70, 0x6b, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x6e, 0x65, 0x77, 0x56, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52,
	0x06, 0x6e, 0x65, 0x77, 0x56, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x07, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x75, 0x72, 0x6c, 0x42, 0x69, 0x67, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x06, 0x75, 0x72, 0x6c, 0x42, 0x69, 0x67, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08, 0x75, 0x72, 0x6c, 0x53, 0x6d, 0x61, 0x6c, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x6b, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6e, 0x65, 0x77, 0x56, 0x65, 0x72, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6c, 0x61, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x69, 0x67, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x75, 0x72, 0x6c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xd8, 0x01, 0x0a, 0x0e, 0x55, 0x69, 0x6e, 0x50, 0x61, 0x69,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x55, 0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15,
	0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x75, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_message_proto_rawDescOnce sync.Once
	file_message_proto_rawDescData = file_message_proto_rawDesc
)

func file_message_proto_rawDescGZIP() []byte {
	file_message_proto_rawDescOnce.Do(func() {
		file_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_message_proto_rawDescData)
	})
	return file_message_proto_rawDescData
}

var file_message_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_message_proto_goTypes = []interface{}{
	(*AppShareInfo)(nil),                   // 0: AppShareInfo
	(*C2CTempMessageHead)(nil),             // 1: C2CTempMessageHead
	(*ContentHead)(nil),                    // 2: ContentHead
	(*DiscussInfo)(nil),                    // 3: DiscussInfo
	(*ExtraGroupKeyInfo)(nil),              // 4: ExtraGroupKeyInfo
	(*GroupInfo)(nil),                      // 5: GroupInfo
	(*Message)(nil),                        // 6: Message
	(*MessageHead)(nil),                    // 7: MessageHead
	(*MessageType0X210)(nil),               // 8: MessageType0x210
	(*MessageSubType0X8ARequest)(nil),      // 9: MessageSubType0x8aRequest
	(*MutilTransHead)(nil),                 // 10: MutilTransHead
	(*PluginInfo)(nil),                     // 11: PluginInfo
	(*UinPairMessage)(nil),                 // 12: UinPairMessage
	(*MessageSubType0X8ARequest_Info)(nil), // 13: MessageSubType0x8aRequest.Info
	(*MessageSubType0X8ARequest_Info_WithdrawWordingInfo)(nil), // 14: MessageSubType0x8aRequest.Info.WithdrawWordingInfo
	(*MessageBody)(nil), // 15: MessageBody
}
var file_message_proto_depIdxs = []int32{
	11, // 0: AppShareInfo.resource:type_name -> PluginInfo
	7,  // 1: Message.messageHead:type_name -> MessageHead
	2,  // 2: Message.contentHead:type_name -> ContentHead
	15, // 3: Message.messageBody:type_name -> MessageBody
	0,  // 4: Message.appShareInfo:type_name -> AppShareInfo
	1,  // 5: MessageHead.c2cTempMessageHead:type_name -> C2CTempMessageHead
	5,  // 6: MessageHead.groupInfo:type_name -> GroupInfo
	3,  // 7: MessageHead.discussInfo:type_name -> DiscussInfo
	10, // 8: MessageHead.mutilTransHead:type_name -> MutilTransHead
	13, // 9: MessageSubType0x8aRequest.infos:type_name -> MessageSubType0x8aRequest.Info
	6,  // 10: UinPairMessage.messages:type_name -> Message
	14, // 11: MessageSubType0x8aRequest.Info.withdrawWordingInfo:type_name -> MessageSubType0x8aRequest.Info.WithdrawWordingInfo
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_message_proto_init() }
func file_message_proto_init() {
	if File_message_proto != nil {
		return
	}
	file_message_body_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppShareInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2CTempMessageHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscussInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtraGroupKeyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageType0X210); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageSubType0X8ARequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutilTransHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UinPairMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageSubType0X8ARequest_Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageSubType0X8ARequest_Info_WithdrawWordingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_message_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_message_proto_msgTypes[14].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_message_proto_goTypes,
		DependencyIndexes: file_message_proto_depIdxs,
		MessageInfos:      file_message_proto_msgTypes,
	}.Build()
	File_message_proto = out.File
	file_message_proto_rawDesc = nil
	file_message_proto_goTypes = nil
	file_message_proto_depIdxs = nil
}
